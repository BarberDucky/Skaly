{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/rxjs/Observable.js","webpack:///./node_modules/rxjs/Subscriber.js","webpack:///./node_modules/rxjs/util/subscribeToResult.js","webpack:///./node_modules/rxjs/OuterSubscriber.js","webpack:///./node_modules/rxjs/scheduler/async.js","webpack:///./node_modules/rxjs/Subscription.js","webpack:///./node_modules/rxjs/util/errorObject.js","webpack:///./node_modules/rxjs/Subject.js","webpack:///./node_modules/rxjs/util/tryCatch.js","webpack:///./node_modules/rxjs/util/root.js","webpack:///./node_modules/rxjs/util/isScheduler.js","webpack:///./node_modules/rxjs/util/isArray.js","webpack:///./node_modules/rxjs/observable/EmptyObservable.js","webpack:///./node_modules/rxjs/observable/ArrayObservable.js","webpack:///./node_modules/rxjs/operators/multicast.js","webpack:///./node_modules/rxjs/operators/reduce.js","webpack:///./node_modules/rxjs/util/ArgumentOutOfRangeError.js","webpack:///./node_modules/rxjs/operators/map.js","webpack:///./node_modules/rxjs/scheduler/AsyncScheduler.js","webpack:///./node_modules/rxjs/scheduler/AsyncAction.js","webpack:///./node_modules/rxjs/util/isNumeric.js","webpack:///./node_modules/rxjs/operators/mergeMap.js","webpack:///./node_modules/rxjs/Notification.js","webpack:///./node_modules/rxjs/observable/concat.js","webpack:///./node_modules/rxjs/symbol/iterator.js","webpack:///./node_modules/rxjs/operators/throttle.js","webpack:///./node_modules/rxjs/util/EmptyError.js","webpack:///./node_modules/rxjs/ReplaySubject.js","webpack:///./node_modules/rxjs/operators/zip.js","webpack:///./node_modules/rxjs/util/isDate.js","webpack:///./node_modules/rxjs/observable/merge.js","webpack:///./node_modules/rxjs/operators/mergeAll.js","webpack:///./node_modules/rxjs/operators/observeOn.js","webpack:///./node_modules/rxjs/operators/combineLatest.js","webpack:///./node_modules/rxjs/AsyncSubject.js","webpack:///./node_modules/rxjs/util/ObjectUnsubscribedError.js","webpack:///./node_modules/rxjs/symbol/observable.js","webpack:///./node_modules/rxjs/symbol/rxSubscriber.js","webpack:///./node_modules/rxjs/util/isFunction.js","webpack:///./src/scripts/components/widgets.js","webpack:///./node_modules/rxjs/operators/timestamp.js","webpack:///./node_modules/rxjs/operators/switchMap.js","webpack:///./node_modules/rxjs/operators/refCount.js","webpack:///./node_modules/rxjs/operators/takeLast.js","webpack:///./node_modules/rxjs/operators/scan.js","webpack:///./node_modules/rxjs/operators/audit.js","webpack:///./node_modules/rxjs/operators/find.js","webpack:///./node_modules/rxjs/operators/filter.js","webpack:///./node_modules/rxjs/operators/distinctUntilChanged.js","webpack:///./node_modules/rxjs/operators/defaultIfEmpty.js","webpack:///./node_modules/rxjs/operators/concatMap.js","webpack:///./node_modules/rxjs/operators/onErrorResumeNext.js","webpack:///./node_modules/rxjs/observable/race.js","webpack:///./node_modules/rxjs/operators/concatAll.js","webpack:///./node_modules/rxjs/observable/ScalarObservable.js","webpack:///./node_modules/rxjs/util/noop.js","webpack:///./node_modules/rxjs/util/pipe.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/rxjs/scheduler/VirtualTimeScheduler.js","webpack:///./node_modules/rxjs/util/applyMixins.js","webpack:///./node_modules/rxjs/testing/SubscriptionLog.js","webpack:///./node_modules/rxjs/testing/SubscriptionLoggable.js","webpack:///./node_modules/rxjs/operators/zipAll.js","webpack:///./node_modules/rxjs/operators/withLatestFrom.js","webpack:///./node_modules/rxjs/operators/windowWhen.js","webpack:///./node_modules/rxjs/operators/windowToggle.js","webpack:///./node_modules/rxjs/operators/windowTime.js","webpack:///./node_modules/rxjs/operators/windowCount.js","webpack:///./node_modules/rxjs/operators/window.js","webpack:///./node_modules/rxjs/operators/toArray.js","webpack:///./node_modules/rxjs/operators/timeoutWith.js","webpack:///./node_modules/rxjs/util/TimeoutError.js","webpack:///./node_modules/rxjs/operators/timeout.js","webpack:///./node_modules/rxjs/operators/timeInterval.js","webpack:///./node_modules/rxjs/operator/timeInterval.js","webpack:///./node_modules/rxjs/operators/throttleTime.js","webpack:///./node_modules/rxjs/operators/takeWhile.js","webpack:///./node_modules/rxjs/operators/takeUntil.js","webpack:///./node_modules/rxjs/operators/take.js","webpack:///./node_modules/rxjs/operators/switchMapTo.js","webpack:///./node_modules/rxjs/operators/switchAll.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/rxjs/scheduler/asap.js","webpack:///./node_modules/rxjs/operators/startWith.js","webpack:///./node_modules/rxjs/operators/skipWhile.js","webpack:///./node_modules/rxjs/operators/skipUntil.js","webpack:///./node_modules/rxjs/operators/skipLast.js","webpack:///./node_modules/rxjs/operators/skip.js","webpack:///./node_modules/rxjs/operators/single.js","webpack:///./node_modules/rxjs/operators/shareReplay.js","webpack:///./node_modules/rxjs/operators/share.js","webpack:///./node_modules/rxjs/operators/sequenceEqual.js","webpack:///./node_modules/rxjs/operators/sampleTime.js","webpack:///./node_modules/rxjs/operators/sample.js","webpack:///./node_modules/rxjs/operators/retryWhen.js","webpack:///./node_modules/rxjs/operators/retry.js","webpack:///./node_modules/rxjs/operators/repeatWhen.js","webpack:///./node_modules/rxjs/operators/repeat.js","webpack:///./node_modules/rxjs/operators/race.js","webpack:///./node_modules/rxjs/operators/publishLast.js","webpack:///./node_modules/rxjs/operators/publishReplay.js","webpack:///./node_modules/rxjs/BehaviorSubject.js","webpack:///./node_modules/rxjs/operators/publishBehavior.js","webpack:///./node_modules/rxjs/operators/publish.js","webpack:///./node_modules/rxjs/operators/pluck.js","webpack:///./node_modules/rxjs/operators/partition.js","webpack:///./node_modules/rxjs/operators/pairwise.js","webpack:///./node_modules/rxjs/observable/ConnectableObservable.js","webpack:///./node_modules/rxjs/operators/min.js","webpack:///./node_modules/rxjs/operators/mergeScan.js","webpack:///./node_modules/rxjs/operators/mergeMapTo.js","webpack:///./node_modules/rxjs/operators/merge.js","webpack:///./node_modules/rxjs/operators/max.js","webpack:///./node_modules/rxjs/operators/materialize.js","webpack:///./node_modules/rxjs/operators/mapTo.js","webpack:///./node_modules/rxjs/operators/every.js","webpack:///./node_modules/rxjs/operators/last.js","webpack:///./node_modules/rxjs/operators/auditTime.js","webpack:///./node_modules/rxjs/operators/isEmpty.js","webpack:///./node_modules/rxjs/operators/ignoreElements.js","webpack:///./node_modules/rxjs/operators/groupBy.js","webpack:///./node_modules/rxjs/operators/first.js","webpack:///./node_modules/rxjs/operators/findIndex.js","webpack:///./node_modules/rxjs/operators/finalize.js","webpack:///./node_modules/rxjs/operators/elementAt.js","webpack:///./node_modules/rxjs/operators/expand.js","webpack:///./node_modules/rxjs/operators/exhaustMap.js","webpack:///./node_modules/rxjs/operators/exhaust.js","webpack:///./node_modules/rxjs/operators/tap.js","webpack:///./node_modules/rxjs/operators/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/operators/distinct.js","webpack:///./node_modules/rxjs/operators/delayWhen.js","webpack:///./node_modules/rxjs/operators/delay.js","webpack:///./node_modules/rxjs/operators/debounceTime.js","webpack:///./node_modules/rxjs/operators/debounce.js","webpack:///./node_modules/rxjs/operators/dematerialize.js","webpack:///./node_modules/rxjs/operators/count.js","webpack:///./node_modules/rxjs/operators/concatMapTo.js","webpack:///./node_modules/rxjs/operators/concat.js","webpack:///./node_modules/rxjs/operators/combineAll.js","webpack:///./node_modules/rxjs/operators/catchError.js","webpack:///./node_modules/rxjs/operators/bufferWhen.js","webpack:///./node_modules/rxjs/operators/bufferToggle.js","webpack:///./node_modules/rxjs/operators/bufferTime.js","webpack:///./node_modules/rxjs/operators/bufferCount.js","webpack:///./node_modules/rxjs/operators/buffer.js","webpack:///./node_modules/rxjs/scheduler/queue.js","webpack:///./node_modules/rxjs/observable/dom/AjaxObservable.js","webpack:///./node_modules/rxjs/observable/timer.js","webpack:///./node_modules/rxjs/util/identity.js","webpack:///./node_modules/rxjs/observable/PromiseObservable.js","webpack:///./node_modules/rxjs/observable/FromObservable.js","webpack:///./node_modules/rxjs/observable/from.js","webpack:///./node_modules/rxjs/observable/of.js","webpack:///./node_modules/rxjs/util/isPromise.js","webpack:///./node_modules/rxjs/util/isArrayLike.js","webpack:///./node_modules/rxjs/SubjectSubscription.js","webpack:///./node_modules/rxjs/Observer.js","webpack:///./node_modules/rxjs/util/UnsubscriptionError.js","webpack:///./node_modules/rxjs/util/isObject.js","webpack:///./src/scripts/service/users.service.js","webpack:///./src/scripts/service/format.service.js","webpack:///./src/scripts/components/assignments.js","webpack:///./src/scripts/components/selector.js","webpack:///./src/scripts/components/table.js","webpack:///./node_modules/rxjs/operators.js","webpack:///./node_modules/rxjs/scheduler/AnimationFrameScheduler.js","webpack:///./node_modules/rxjs/util/AnimationFrame.js","webpack:///./node_modules/rxjs/scheduler/AnimationFrameAction.js","webpack:///./node_modules/rxjs/scheduler/animationFrame.js","webpack:///./node_modules/rxjs/testing/HotObservable.js","webpack:///./node_modules/rxjs/testing/ColdObservable.js","webpack:///./node_modules/rxjs/testing/TestScheduler.js","webpack:///./node_modules/rxjs/operator/zipAll.js","webpack:///./node_modules/rxjs/add/operator/zipAll.js","webpack:///./node_modules/rxjs/operator/zip.js","webpack:///./node_modules/rxjs/add/operator/zip.js","webpack:///./node_modules/rxjs/operator/withLatestFrom.js","webpack:///./node_modules/rxjs/add/operator/withLatestFrom.js","webpack:///./node_modules/rxjs/operator/windowWhen.js","webpack:///./node_modules/rxjs/add/operator/windowWhen.js","webpack:///./node_modules/rxjs/operator/windowToggle.js","webpack:///./node_modules/rxjs/add/operator/windowToggle.js","webpack:///./node_modules/rxjs/operator/windowTime.js","webpack:///./node_modules/rxjs/add/operator/windowTime.js","webpack:///./node_modules/rxjs/operator/windowCount.js","webpack:///./node_modules/rxjs/add/operator/windowCount.js","webpack:///./node_modules/rxjs/operator/window.js","webpack:///./node_modules/rxjs/add/operator/window.js","webpack:///./node_modules/rxjs/operator/toArray.js","webpack:///./node_modules/rxjs/add/operator/toArray.js","webpack:///./node_modules/rxjs/operator/timestamp.js","webpack:///./node_modules/rxjs/add/operator/timestamp.js","webpack:///./node_modules/rxjs/operator/timeoutWith.js","webpack:///./node_modules/rxjs/add/operator/timeoutWith.js","webpack:///./node_modules/rxjs/operator/timeout.js","webpack:///./node_modules/rxjs/add/operator/timeout.js","webpack:///./node_modules/rxjs/add/operator/timeInterval.js","webpack:///./node_modules/rxjs/operator/throttleTime.js","webpack:///./node_modules/rxjs/add/operator/throttleTime.js","webpack:///./node_modules/rxjs/operator/throttle.js","webpack:///./node_modules/rxjs/add/operator/throttle.js","webpack:///./node_modules/rxjs/operator/takeWhile.js","webpack:///./node_modules/rxjs/add/operator/takeWhile.js","webpack:///./node_modules/rxjs/operator/takeUntil.js","webpack:///./node_modules/rxjs/add/operator/takeUntil.js","webpack:///./node_modules/rxjs/operator/takeLast.js","webpack:///./node_modules/rxjs/add/operator/takeLast.js","webpack:///./node_modules/rxjs/operator/take.js","webpack:///./node_modules/rxjs/add/operator/take.js","webpack:///./node_modules/rxjs/operator/switchMapTo.js","webpack:///./node_modules/rxjs/add/operator/switchMapTo.js","webpack:///./node_modules/rxjs/operator/switchMap.js","webpack:///./node_modules/rxjs/add/operator/switchMap.js","webpack:///./node_modules/rxjs/operator/switch.js","webpack:///./node_modules/rxjs/add/operator/switch.js","webpack:///./node_modules/rxjs/scheduler/AsapScheduler.js","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./node_modules/rxjs/util/Immediate.js","webpack:///./node_modules/rxjs/scheduler/AsapAction.js","webpack:///./node_modules/rxjs/observable/SubscribeOnObservable.js","webpack:///./node_modules/rxjs/operators/subscribeOn.js","webpack:///./node_modules/rxjs/operator/subscribeOn.js","webpack:///./node_modules/rxjs/add/operator/subscribeOn.js","webpack:///./node_modules/rxjs/operator/startWith.js","webpack:///./node_modules/rxjs/add/operator/startWith.js","webpack:///./node_modules/rxjs/operator/skipWhile.js","webpack:///./node_modules/rxjs/add/operator/skipWhile.js","webpack:///./node_modules/rxjs/operator/skipUntil.js","webpack:///./node_modules/rxjs/add/operator/skipUntil.js","webpack:///./node_modules/rxjs/operator/skipLast.js","webpack:///./node_modules/rxjs/add/operator/skipLast.js","webpack:///./node_modules/rxjs/operator/skip.js","webpack:///./node_modules/rxjs/add/operator/skip.js","webpack:///./node_modules/rxjs/operator/single.js","webpack:///./node_modules/rxjs/add/operator/single.js","webpack:///./node_modules/rxjs/operator/shareReplay.js","webpack:///./node_modules/rxjs/add/operator/shareReplay.js","webpack:///./node_modules/rxjs/operator/share.js","webpack:///./node_modules/rxjs/add/operator/share.js","webpack:///./node_modules/rxjs/operator/sequenceEqual.js","webpack:///./node_modules/rxjs/add/operator/sequenceEqual.js","webpack:///./node_modules/rxjs/operator/scan.js","webpack:///./node_modules/rxjs/add/operator/scan.js","webpack:///./node_modules/rxjs/operator/sampleTime.js","webpack:///./node_modules/rxjs/add/operator/sampleTime.js","webpack:///./node_modules/rxjs/operator/sample.js","webpack:///./node_modules/rxjs/add/operator/sample.js","webpack:///./node_modules/rxjs/operator/retryWhen.js","webpack:///./node_modules/rxjs/add/operator/retryWhen.js","webpack:///./node_modules/rxjs/operator/retry.js","webpack:///./node_modules/rxjs/add/operator/retry.js","webpack:///./node_modules/rxjs/operator/repeatWhen.js","webpack:///./node_modules/rxjs/add/operator/repeatWhen.js","webpack:///./node_modules/rxjs/operator/repeat.js","webpack:///./node_modules/rxjs/add/operator/repeat.js","webpack:///./node_modules/rxjs/operator/reduce.js","webpack:///./node_modules/rxjs/add/operator/reduce.js","webpack:///./node_modules/rxjs/operator/race.js","webpack:///./node_modules/rxjs/add/operator/race.js","webpack:///./node_modules/rxjs/operator/publishLast.js","webpack:///./node_modules/rxjs/add/operator/publishLast.js","webpack:///./node_modules/rxjs/operator/publishReplay.js","webpack:///./node_modules/rxjs/add/operator/publishReplay.js","webpack:///./node_modules/rxjs/operator/publishBehavior.js","webpack:///./node_modules/rxjs/add/operator/publishBehavior.js","webpack:///./node_modules/rxjs/operator/publish.js","webpack:///./node_modules/rxjs/add/operator/publish.js","webpack:///./node_modules/rxjs/operator/pluck.js","webpack:///./node_modules/rxjs/add/operator/pluck.js","webpack:///./node_modules/rxjs/util/not.js","webpack:///./node_modules/rxjs/operator/partition.js","webpack:///./node_modules/rxjs/add/operator/partition.js","webpack:///./node_modules/rxjs/operator/pairwise.js","webpack:///./node_modules/rxjs/add/operator/pairwise.js","webpack:///./node_modules/rxjs/operator/onErrorResumeNext.js","webpack:///./node_modules/rxjs/add/operator/onErrorResumeNext.js","webpack:///./node_modules/rxjs/operator/observeOn.js","webpack:///./node_modules/rxjs/add/operator/observeOn.js","webpack:///./node_modules/rxjs/operator/multicast.js","webpack:///./node_modules/rxjs/add/operator/multicast.js","webpack:///./node_modules/rxjs/operator/min.js","webpack:///./node_modules/rxjs/add/operator/min.js","webpack:///./node_modules/rxjs/operator/mergeScan.js","webpack:///./node_modules/rxjs/add/operator/mergeScan.js","webpack:///./node_modules/rxjs/operator/mergeMapTo.js","webpack:///./node_modules/rxjs/add/operator/mergeMapTo.js","webpack:///./node_modules/rxjs/operator/mergeMap.js","webpack:///./node_modules/rxjs/add/operator/mergeMap.js","webpack:///./node_modules/rxjs/operator/mergeAll.js","webpack:///./node_modules/rxjs/add/operator/mergeAll.js","webpack:///./node_modules/rxjs/operator/merge.js","webpack:///./node_modules/rxjs/add/operator/merge.js","webpack:///./node_modules/rxjs/operator/max.js","webpack:///./node_modules/rxjs/add/operator/max.js","webpack:///./node_modules/rxjs/operator/materialize.js","webpack:///./node_modules/rxjs/add/operator/materialize.js","webpack:///./node_modules/rxjs/operator/mapTo.js","webpack:///./node_modules/rxjs/add/operator/mapTo.js","webpack:///./node_modules/rxjs/operator/map.js","webpack:///./node_modules/rxjs/add/operator/map.js","webpack:///./node_modules/rxjs/operator/every.js","webpack:///./node_modules/rxjs/add/operator/every.js","webpack:///./node_modules/rxjs/operator/let.js","webpack:///./node_modules/rxjs/add/operator/let.js","webpack:///./node_modules/rxjs/operator/last.js","webpack:///./node_modules/rxjs/add/operator/last.js","webpack:///./node_modules/rxjs/operator/auditTime.js","webpack:///./node_modules/rxjs/add/operator/auditTime.js","webpack:///./node_modules/rxjs/operator/audit.js","webpack:///./node_modules/rxjs/add/operator/audit.js","webpack:///./node_modules/rxjs/operator/isEmpty.js","webpack:///./node_modules/rxjs/add/operator/isEmpty.js","webpack:///./node_modules/rxjs/operator/ignoreElements.js","webpack:///./node_modules/rxjs/add/operator/ignoreElements.js","webpack:///./node_modules/rxjs/util/FastMap.js","webpack:///./node_modules/rxjs/util/MapPolyfill.js","webpack:///./node_modules/rxjs/util/Map.js","webpack:///./node_modules/rxjs/operator/groupBy.js","webpack:///./node_modules/rxjs/add/operator/groupBy.js","webpack:///./node_modules/rxjs/operator/first.js","webpack:///./node_modules/rxjs/add/operator/first.js","webpack:///./node_modules/rxjs/operator/findIndex.js","webpack:///./node_modules/rxjs/add/operator/findIndex.js","webpack:///./node_modules/rxjs/operator/find.js","webpack:///./node_modules/rxjs/add/operator/find.js","webpack:///./node_modules/rxjs/operator/finally.js","webpack:///./node_modules/rxjs/add/operator/finally.js","webpack:///./node_modules/rxjs/operator/filter.js","webpack:///./node_modules/rxjs/add/operator/filter.js","webpack:///./node_modules/rxjs/operator/elementAt.js","webpack:///./node_modules/rxjs/add/operator/elementAt.js","webpack:///./node_modules/rxjs/operator/expand.js","webpack:///./node_modules/rxjs/add/operator/expand.js","webpack:///./node_modules/rxjs/operator/exhaustMap.js","webpack:///./node_modules/rxjs/add/operator/exhaustMap.js","webpack:///./node_modules/rxjs/operator/exhaust.js","webpack:///./node_modules/rxjs/add/operator/exhaust.js","webpack:///./node_modules/rxjs/operator/do.js","webpack:///./node_modules/rxjs/add/operator/do.js","webpack:///./node_modules/rxjs/operator/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/add/operator/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/operator/distinctUntilChanged.js","webpack:///./node_modules/rxjs/add/operator/distinctUntilChanged.js","webpack:///./node_modules/rxjs/util/Set.js","webpack:///./node_modules/rxjs/operator/distinct.js","webpack:///./node_modules/rxjs/add/operator/distinct.js","webpack:///./node_modules/rxjs/operator/delayWhen.js","webpack:///./node_modules/rxjs/add/operator/delayWhen.js","webpack:///./node_modules/rxjs/operator/delay.js","webpack:///./node_modules/rxjs/add/operator/delay.js","webpack:///./node_modules/rxjs/operator/defaultIfEmpty.js","webpack:///./node_modules/rxjs/add/operator/defaultIfEmpty.js","webpack:///./node_modules/rxjs/operator/debounceTime.js","webpack:///./node_modules/rxjs/add/operator/debounceTime.js","webpack:///./node_modules/rxjs/operator/debounce.js","webpack:///./node_modules/rxjs/add/operator/debounce.js","webpack:///./node_modules/rxjs/operator/dematerialize.js","webpack:///./node_modules/rxjs/add/operator/dematerialize.js","webpack:///./node_modules/rxjs/operator/count.js","webpack:///./node_modules/rxjs/add/operator/count.js","webpack:///./node_modules/rxjs/operator/concatMapTo.js","webpack:///./node_modules/rxjs/add/operator/concatMapTo.js","webpack:///./node_modules/rxjs/operator/concatMap.js","webpack:///./node_modules/rxjs/add/operator/concatMap.js","webpack:///./node_modules/rxjs/operator/concatAll.js","webpack:///./node_modules/rxjs/add/operator/concatAll.js","webpack:///./node_modules/rxjs/operator/concat.js","webpack:///./node_modules/rxjs/add/operator/concat.js","webpack:///./node_modules/rxjs/operator/combineLatest.js","webpack:///./node_modules/rxjs/add/operator/combineLatest.js","webpack:///./node_modules/rxjs/operator/combineAll.js","webpack:///./node_modules/rxjs/add/operator/combineAll.js","webpack:///./node_modules/rxjs/operator/catch.js","webpack:///./node_modules/rxjs/add/operator/catch.js","webpack:///./node_modules/rxjs/operator/bufferWhen.js","webpack:///./node_modules/rxjs/add/operator/bufferWhen.js","webpack:///./node_modules/rxjs/operator/bufferToggle.js","webpack:///./node_modules/rxjs/add/operator/bufferToggle.js","webpack:///./node_modules/rxjs/operator/bufferTime.js","webpack:///./node_modules/rxjs/add/operator/bufferTime.js","webpack:///./node_modules/rxjs/operator/bufferCount.js","webpack:///./node_modules/rxjs/add/operator/bufferCount.js","webpack:///./node_modules/rxjs/operator/buffer.js","webpack:///./node_modules/rxjs/add/operator/buffer.js","webpack:///./node_modules/rxjs/util/assign.js","webpack:///./node_modules/rxjs/scheduler/QueueScheduler.js","webpack:///./node_modules/rxjs/scheduler/QueueAction.js","webpack:///./node_modules/rxjs/observable/dom/WebSocketSubject.js","webpack:///./node_modules/rxjs/observable/dom/webSocket.js","webpack:///./node_modules/rxjs/add/observable/dom/webSocket.js","webpack:///./node_modules/rxjs/observable/dom/ajax.js","webpack:///./node_modules/rxjs/add/observable/dom/ajax.js","webpack:///./node_modules/rxjs/observable/zip.js","webpack:///./node_modules/rxjs/add/observable/zip.js","webpack:///./node_modules/rxjs/observable/TimerObservable.js","webpack:///./node_modules/rxjs/add/observable/timer.js","webpack:///./node_modules/rxjs/observable/ErrorObservable.js","webpack:///./node_modules/rxjs/observable/throw.js","webpack:///./node_modules/rxjs/add/observable/throw.js","webpack:///./node_modules/rxjs/observable/UsingObservable.js","webpack:///./node_modules/rxjs/observable/using.js","webpack:///./node_modules/rxjs/add/observable/using.js","webpack:///./node_modules/rxjs/observable/RangeObservable.js","webpack:///./node_modules/rxjs/observable/range.js","webpack:///./node_modules/rxjs/add/observable/range.js","webpack:///./node_modules/rxjs/observable/PairsObservable.js","webpack:///./node_modules/rxjs/observable/pairs.js","webpack:///./node_modules/rxjs/add/observable/pairs.js","webpack:///./node_modules/rxjs/observable/onErrorResumeNext.js","webpack:///./node_modules/rxjs/add/observable/onErrorResumeNext.js","webpack:///./node_modules/rxjs/add/observable/of.js","webpack:///./node_modules/rxjs/observable/NeverObservable.js","webpack:///./node_modules/rxjs/observable/never.js","webpack:///./node_modules/rxjs/add/observable/never.js","webpack:///./node_modules/rxjs/add/observable/race.js","webpack:///./node_modules/rxjs/add/observable/merge.js","webpack:///./node_modules/rxjs/Scheduler.js","webpack:///./node_modules/rxjs/scheduler/Action.js","webpack:///./node_modules/rxjs/observable/IntervalObservable.js","webpack:///./node_modules/rxjs/observable/interval.js","webpack:///./node_modules/rxjs/add/observable/interval.js","webpack:///./node_modules/rxjs/observable/IfObservable.js","webpack:///./node_modules/rxjs/observable/if.js","webpack:///./node_modules/rxjs/add/observable/if.js","webpack:///./node_modules/rxjs/observable/GenerateObservable.js","webpack:///./node_modules/rxjs/observable/generate.js","webpack:///./node_modules/rxjs/add/observable/generate.js","webpack:///./node_modules/rxjs/observable/fromPromise.js","webpack:///./node_modules/rxjs/add/observable/fromPromise.js","webpack:///./node_modules/rxjs/observable/FromEventPatternObservable.js","webpack:///./node_modules/rxjs/observable/fromEventPattern.js","webpack:///./node_modules/rxjs/add/observable/fromEventPattern.js","webpack:///./node_modules/rxjs/observable/FromEventObservable.js","webpack:///./node_modules/rxjs/observable/fromEvent.js","webpack:///./node_modules/rxjs/add/observable/fromEvent.js","webpack:///./node_modules/rxjs/add/observable/from.js","webpack:///./node_modules/rxjs/observable/ForkJoinObservable.js","webpack:///./node_modules/rxjs/observable/forkJoin.js","webpack:///./node_modules/rxjs/add/observable/forkJoin.js","webpack:///./node_modules/rxjs/observable/empty.js","webpack:///./node_modules/rxjs/add/observable/empty.js","webpack:///./node_modules/rxjs/observable/DeferObservable.js","webpack:///./node_modules/rxjs/observable/defer.js","webpack:///./node_modules/rxjs/add/observable/defer.js","webpack:///./node_modules/rxjs/observable/ArrayLikeObservable.js","webpack:///./node_modules/rxjs/observable/IteratorObservable.js","webpack:///./node_modules/rxjs/add/observable/concat.js","webpack:///./node_modules/rxjs/InnerSubscriber.js","webpack:///./node_modules/rxjs/observable/combineLatest.js","webpack:///./node_modules/rxjs/add/observable/combineLatest.js","webpack:///./node_modules/rxjs/observable/BoundNodeCallbackObservable.js","webpack:///./node_modules/rxjs/observable/bindNodeCallback.js","webpack:///./node_modules/rxjs/add/observable/bindNodeCallback.js","webpack:///./node_modules/rxjs/observable/BoundCallbackObservable.js","webpack:///./node_modules/rxjs/observable/bindCallback.js","webpack:///./node_modules/rxjs/add/observable/bindCallback.js","webpack:///./node_modules/rxjs/util/toSubscriber.js","webpack:///./node_modules/rxjs/Rx.js","webpack:///./src/scripts/components/view.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","root_1","toSubscriber_1","observable_1","pipe_1","Observable","subscribe","this","_isScalar","_subscribe","lift","operator","observable","source","observerOrNext","error","complete","sink","toSubscriber","add","syncErrorThrowable","_trySubscribe","syncErrorThrown","syncErrorValue","err","forEach","next","PromiseCtor","_this","root","Rx","config","Promise","Error","resolve","reject","subscription","unsubscribe","subscriber","pipe","operations","_i","arguments","length","pipeFromArray","toPromise","x","create","__extends","b","__","constructor","isFunction_1","Subscription_1","Observer_1","rxSubscriber_1","Subscriber","_super","destinationOrNext","isStopped","destination","empty","isTrustedSubscriber","trustedSubscriber","rxSubscriber","SafeSubscriber","_next","_error","_complete","closed","_unsubscribeAndRecycle","_parent","_parents","Subscription","_parentSubscriber","context","isFunction","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","fn","parent","_unsubscribe","obj","isArrayLike_1","isPromise_1","isObject_1","Observable_1","iterator_1","InnerSubscriber_1","subscribeToResult","outerSubscriber","result","outerValue","outerIndex","InnerSubscriber","isArrayLike","len","isPromise","then","setTimeout","iterator","item","done","obs","TypeError","msg","isObject","OuterSubscriber","apply","notifyNext","innerValue","innerIndex","innerSub","notifyError","notifyComplete","AsyncAction_1","AsyncScheduler_1","async","AsyncScheduler","AsyncAction","isArray_1","tryCatch_1","errorObject_1","UnsubscriptionError_1","_subscriptions","errors","hasErrors","index","remove","tryCatch","errorObject","e","UnsubscriptionError","flattenUnsubscriptionErrors","isArray","sub","concat","push","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","reduce","errs","Subscriber_1","ObjectUnsubscribedError_1","SubjectSubscription_1","SubjectSubscriber","Subject","observers","hasError","thrownError","subject","AnonymousSubject","ObjectUnsubscribedError","copy","slice","SubjectSubscription","asObservable","tryCatchTarget","tryCatcher","__window","window","__self","self","WorkerGlobalScope","_root","global","isScheduler","schedule","Array","EmptyObservable","scheduler","dispatch","arg","ScalarObservable_1","EmptyObservable_1","isScheduler_1","ArrayObservable","array","of","pop","ScalarObservable","state","count","ConnectableObservable_1","multicast","subjectOrSubjectFactory","selector","subjectFactory","MulticastOperator","connectable","connectableObservableDescriptor","scan_1","takeLast_1","defaultIfEmpty_1","accumulator","seed","scan","takeLast","defaultIfEmpty","acc","ArgumentOutOfRangeError","stack","message","map","project","thisArg","MapOperator","MapSubscriber","actions","active","scheduled","undefined","flush","action","execute","delay","shift","Scheduler","work","pending","id","recycleAsyncId","requestAsyncId","setInterval","clearInterval","_execute","errored","errorValue","Action","isNumeric","val","parseFloat","subscribeToResult_1","OuterSubscriber_1","mergeMap","resultSelector","concurrent","Number","POSITIVE_INFINITY","MergeMapOperator","observer","MergeMapSubscriber","hasCompleted","buffer","_tryNext","_innerSub","ish","_notifyResultSelector","Notification","kind","hasValue","observe","do","accept","nextOrObserver","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","of_1","from_1","concatAll_1","observables","from","concatAll","symbolIteratorPonyfill","Symbol","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","key","$$iterator","defaultThrottleConfig","leading","trailing","throttle","durationSelector","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","throttled","_trailingValue","duration","tryDurationSelector","_sendTrailing","_a","EmptyError","Subject_1","queue_1","observeOn_1","ReplaySubject","bufferSize","windowTime","_events","_bufferSize","_windowTime","now","_getNow","ReplayEvent","_trimBufferThenGetEvents","ObserveOnSubscriber","queue","eventsCount","spliceCount","time","Math","max","ArrayObservable_1","zipStatic","ZipOperator","zip","ZipSubscriber","values","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","args","_tryProject","nextResult","isComplete","isDate","Date","isNaN","mergeAll_1","merge","last","mergeAll","mergeMap_1","identity_1","identity","Notification_1","observeOn","ObserveOnOperator","notification","scheduleMessage","ObserveOnMessage","none","combineLatest","CombineLatestOperator","CombineLatestSubscriber","toRespond","unused","oldVal","AsyncSubject","hasNext","getSymbolObservable","$$observable","for","$$rxSubscriber","Widgets","type","input","document","createElement","className","setAttribute","appendChild","text","button","innerHTML","div","label","inline","inputDiv","style","display","element","src","image","maxHeight","maxWidth","color","outline","datalist","addOptions","options","firstChild","removeChild","option","async_1","map_1","timestamp","Timestamp","switchMap","SwitchMapOperator","SwitchMapSubscriber","innerSubscription","_tryNotifyNext","refCount","RefCountOperator","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","ArgumentOutOfRangeError_1","TakeLastOperator","total","TakeLastSubscriber","ring","idx","hasSeed","ScanOperator","ScanSubscriber","_seed","set","audit","AuditOperator","AuditSubscriber","clearThrottle","find","predicate","FindValueOperator","yieldIndex","FindValueSubscriber","filter","FilterOperator","FilterSubscriber","distinctUntilChanged","compare","keySelector","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","concatMap","FromObservable_1","onErrorResumeNext","nextSources","OnErrorResumeNextOperator","onErrorResumeNextStatic","FromObservable","OnErrorResumeNextSubscriber","subscribeToNextSource","race","RaceOperator","RaceSubscriber","hasFirst","noop","noop_1","fns","prev","g","Function","eval","VirtualTimeScheduler","SchedulerAction","maxFrames","VirtualAction","frame","frameTimeFactor","sort","sortActions","a","applyMixins","derivedCtor","baseCtors","baseCtor","propertyKeys","j","len2","name_1","SubscriptionLog","subscribedFrame","unsubscribedFrame","SubscriptionLog_1","SubscriptionLoggable","logSubscribedFrame","logUnsubscribedFrame","subscriptionLogs","oldSubscriptionLog","zip_1","zipAll","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","found","windowWhen","closingSelector","WindowOperator","WindowSubscriber","openWindow","unsubscribeClosingNotification","closingNotification","prevWindow","closingNotifier","windowToggle","openings","WindowToggleOperator","WindowToggleSubscriber","contexts","openSubscription","window_1","closeWindow","inner","isNumeric_1","windowTimeSpan","windowCreationInterval","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","windows","closeState","creationState","dispatchWindowClose","dispatchWindowCreation","timeSpanOnlyState","dispatchWindowTimeSpanOnly","numberOfNextedValues","window_2","timeSpanState","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windowBoundaries","windowSubscriber","sourceSubscription","newWindow","reduce_1","toArrayReducer","arr","toArray","isDate_1","timeoutWith","due","withObservable","absoluteTimeout","waitFor","abs","TimeoutWithOperator","TimeoutWithSubscriber","scheduleTimeout","dispatchTimeout","TimeoutError","TimeoutError_1","timeout","TimeoutOperator","errorInstance","TimeoutSubscriber","timeInterval","TimeIntervalOperator","TimeInterval","interval","TimeIntervalSubscriber","lastTime","span","timeInterval_1","throttle_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","dispatchNext","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeUntil","notifier","TakeUntilOperator","TakeUntilSubscriber","take","TakeOperator","TakeSubscriber","switchMapTo","innerObservable","SwitchMapToOperator","SwitchMapToSubscriber","tryResultSelector","switchMap_1","switchAll","Timeout","clearFn","_id","_clearFn","clearTimeout","close","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","_onTimeout","setImmediate","clearImmediate","AsapAction_1","AsapScheduler_1","asap","AsapScheduler","AsapAction","concat_1","startWith","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipLast","SkipLastOperator","_skipCount","SkipLastSubscriber","_count","_ring","skipCount","currentIndex","oldValue","skip","SkipOperator","SkipSubscriber","EmptyError_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","tryNext","ReplaySubject_1","shareReplay","shareReplayOperator","multicast_1","refCount_1","shareSubjectFactory","share","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","areEqual","nextB","sampleTime","period","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","lastValue","sample","SampleOperator","sampleSubscriber","SampleSubscriber","emitValue","retryWhen","RetryWhenOperator","RetryWhenSubscriber","retries","retriesSubscription","retry","RetryOperator","RetrySubscriber","repeatWhen","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","subscribeToRetries","notifications","repeat","RepeatOperator","RepeatSubscriber","race_1","AsyncSubject_1","publishLast","publishReplay","selectorOrScheduler","BehaviorSubject","_value","getValue","BehaviorSubject_1","publishBehavior","publish","pluck","properties","props","currentProp","plucker","not_1","filter_1","partition","not","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","ConnectableObservable","_isComplete","getSubject","_subject","ConnectableSubscriber","connectableProto","writable","min","comparer","mergeScan","MergeScanOperator","MergeScanSubscriber","mergeMapTo","MergeMapToOperator","MergeMapToSubscriber","trySelectResult","merge_1","merge_2","mergeStatic","materialize","MaterializeOperator","MaterializeSubscriber","mapTo","MapToOperator","MapToSubscriber","every","EveryOperator","EverySubscriber","everyValueMatch","LastOperator","LastSubscriber","_tryPredicate","_tryResultSelector","audit_1","timer_1","auditTime","timer","IsEmptyOperator","IsEmptySubscriber","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","FastMap_1","groupBy","elementSelector","subjectSelector","GroupByOperator","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","FastMap","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","clear","removeGroup","delete","groupSubject","refCountSubscription","InnerRefCountSubscription","first","FirstOperator","FirstSubscriber","_emitted","_emit","_emitFinal","find_1","findIndex","finalize","callback","FinallyOperator","FinallySubscriber","elementAt","ElementAtOperator","ElementAtSubscriber","expand","ExpandOperator","ExpandSubscriber","subscribeToProjection","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","hasSubscription","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","tap","DoOperator","DoSubscriber","safeSubscriber","distinctUntilChanged_1","distinctUntilKeyChanged","distinct","flushes","DistinctOperator","DistinctSubscriber","_useKeySelector","_finalizeNext","has","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","completed","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","delayFor","DelayOperator","DelaySubscriber","delay_1","_schedule","scheduleNotification","DelayMessage","debounceTime","dueTime","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","clearDebounce","debouncedNext","debounce","DebounceOperator","DebounceSubscriber","durationSubscription","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","CountOperator","CountSubscriber","concatMap_1","concatMapTo","concat_2","concatStatic","combineLatest_1","combineAll","catchError","CatchOperator","caught","CatchSubscriber","err2","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","openBuffer","closingSubscription","bufferToggle","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","trySubscribe","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","BufferTimeOperator","BufferTimeSubscriber","Context","openContext","timespanOnly","closeAction","dispatchBufferTimeSpanOnly","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","onBufferFull","closeContext","prevContext","bufferCount","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","BufferOperator","BufferSubscriber","QueueAction_1","QueueScheduler_1","QueueScheduler","QueueAction","ajaxGet","url","headers","AjaxObservable","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxPatch","mapResponse","response","ajaxGetJSON","responseType","urlOrRequest","request","createXHR","crossDomain","XMLHttpRequest","XDomainRequest","progId","progIds","ActiveXObject","getXMLHttpRequest","withCredentials","prop","AjaxSubscriber","post","put","patch","getJSON","FormData","serializeBody","send","xhr","AjaxResponse","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","join","JSON","stringify","setRequestHeader","progressSubscriber","xhrTimeout","AjaxTimeoutError","ontimeout","upload","xhrProgress_1","xhrError_1","onprogress","AjaxError","onerror","xhrReadyStateChange","readyState","status_1","status","responseText","onreadystatechange","abort","originalEvent","parseXhrResponse","parse","responseXML","TimerObservable_1","TimerObservable","PromiseObservable","promise","dispatchError","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","IteratorObservable","ArrayLikeObservable","subscriberIndex","toString","UsersService","_classCallCheck","data","credentials","fetch","res","json","alert","subjects","Headers","Content-Type","superUser","newSubjects","FormatService","regExp","format","scale","Assignments","assignment","getAssignments","Selector","createSelector","_assignments2","default","findAssignment","_widgets2","createAssignments","bool","draggable","assignDiv","ondragstart","ev","dataTransfer","setData","Table","main","table","selectedBox","_selector2","tableDiv","createTable","PointInput","createPointInput","caluclateText","createCalculateText","calculateButton","createCalculateButton","generated","generateFormat","rows","cols","points","hidden","setActive","_loop","_loop2","colSpan","history","lowerText","ondragend","updateBox","code","deselectPointInput","oldSpan","parseInt","toFixed","rowNum","colNum","row","header","createCell","_this2","newCell","upperText","controls","addControls","onclick","prevState","deselectControls","oldCell","deselectCell","selectCell","ondragover","preventDefault","ondrop","cellData","getData","_this3","controlsDiv","nextElement","findNextCell","oper","target","oldSpanNext","modifyPoints","cancelBubble","lastMove","cell","operation","newSpan","reset","borderColor","_this4","pointDiv","pointInput","maxInput","submitButton","cancelButton","point","_this5","calcButton","rowValue","backgroundColor","auditTime_1","buffer_1","bufferCount_1","bufferTime_1","bufferToggle_1","bufferWhen_1","catchError_1","combineAll_1","concatMapTo_1","count_1","debounce_1","debounceTime_1","delayWhen_1","dematerialize_1","distinct_1","distinctUntilKeyChanged_1","elementAt_1","every_1","exhaust_1","exhaustMap_1","expand_1","finalize_1","findIndex_1","first_1","groupBy_1","ignoreElements_1","isEmpty_1","last_1","mapTo_1","materialize_1","max_1","mergeMap_2","flatMap","mergeMapTo_1","mergeScan_1","min_1","onErrorResumeNext_1","pairwise_1","partition_1","pluck_1","publish_1","publishBehavior_1","publishLast_1","publishReplay_1","repeat_1","repeatWhen_1","retry_1","retryWhen_1","sample_1","sampleTime_1","sequenceEqual_1","share_1","shareReplay_1","single_1","skip_1","skipLast_1","skipUntil_1","skipWhile_1","startWith_1","switchAll_1","switchMapTo_1","take_1","takeUntil_1","takeWhile_1","tap_1","throttleTime_1","timeout_1","timeoutWith_1","timestamp_1","toArray_1","windowCount_1","windowTime_1","windowToggle_1","windowWhen_1","withLatestFrom_1","zipAll_1","AnimationFrameScheduler","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","cb","AnimationFrame","AnimationFrame_1","AnimationFrameAction","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","SubscriptionLoggable_1","applyMixins_1","HotObservable","messages","setup","messagesLength","ColdObservable","scheduleMessages","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","hotObservables","coldObservables","flushTests","createTime","marbles","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","zipProto","_switch","switch_1","switch","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","run","marker","runClearTimeout","Item","nextTick","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","attachTo","getPrototypeOf","handle","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","port2","documentElement","script","random","addEventListener","attachEvent","task","ImmediateDefinition","canUseProcessNextTick","createProcessNextTickSetImmediate","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","instance","identify","postMessageIsAsynchronous_1","partiallyApplied","handler","addFromSetImmediateArguments","globalMessageHandler","Immediate","Immediate_1","asap_1","SubscribeOnObservable","delayTime","SubscribeOnObservable_1","subscribeOn","SubscribeOnOperator","subscribeOn_1","race_2","raceStatic","pred","notPred","flatMapTo","letProto","func","let_1","let","letBind","MapPolyfill","size","_values","_keys","MapPolyfill_1","_finally","finally_1","finally","_do","do_1","minimalSetImpl","MinimalSet","_catch","catch_1","catch","assignImpl","sources","k","getAssign","assign","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","_connectSocket","protocol","binaryType","onopen","openObserver","closingObserver","reason","onclose","closeObserver","wasClean","WebSocketSubject_1","webSocket","webSocket_1","AjaxObservable_1","ajax","ajax_1","initialDelay","ErrorObservable","ErrorObservable_1","_throw","throw_1","UsingObservable","resourceFactory","observableFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","RangeObservable","start","RangeObservable_1","range","range_1","PairsObservable","PairsObservable_1","pairs","pairs_1","NeverObservable","NeverObservable_1","never","never_1","IntervalObservable","IntervalObservable_1","interval_1","IfObservable","condition","thenSource","elseSource","IfSubscriber","tryIf","IfObservable_1","_if","if_1","if","selfSelector","GenerateObservable","initialState","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","GenerateObservable_1","generate","generate_1","fromPromise","fromPromise_1","FromEventPatternObservable","addHandler","removeHandler","_callSelector","retValue","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","FromEventObservable","sourceObj","eventName","setupSubscription","isNodeList","isHTMLCollection","removeEventListener","isEventTarget","source_1","isJQueryStyleEventEmitter","source_2","isNodeStyleEventEmitter","source_3","FromEventObservable_1","fromEvent","fromEvent_1","ForkJoinObservable","ForkJoinSubscriber","haveValues","_hasValue","ForkJoinObservable_1","forkJoin","forkJoin_1","empty_1","DeferObservable","DeferSubscriber","factory","tryDefer","_callFactory","DeferObservable_1","defer","defer_1","arrayLike","StringIterator","ArrayIterator","getIterator","return","str","charAt","isFinite","valueAsNumber","sign","floor","maxSafeInteger","toLength","pow","BoundNodeCallbackObservable","callbackFunc","handlerFn","innerArgs","result_1","result_2","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","BoundCallbackObservable","BoundCallbackObservable_1","bindCallback","bindCallback_1","TestScheduler_1","animationFrame_1","_operators","operators","Rxjs","View","sideList","selectedSubject","mainDiv","getElementById","registerPage","renderRegister","loginPage","renderLogin","mainPage","renderMain","displayPage","regDiv","userInput","textElement","passInput","superCheck","_users2","checkUserExists","rej","checkInput","checked","addUser","loginDiv","checkUser","updateAside","getSubjects","userString","getSuperUser","mainPageDiv","height","contentHolder","page","querySelectorAll","aside","_table2","selected","updateUser","_format2","putFormat","deleteAside","saveCurrentSubject","subjectInputDiv","subjectInput","subjectAddButton","_this6","subjectDiv","imageDiv","oldSubject","setSubjects","deleteAsideOne","deleteFormat","subjectFromService","getFormat","updateData","deselectAll","selectSubject","_this7","_this8","_this9","nameInput","inputList","getFormatRegExp","checkDuplicate","newInput","getEmptyScale","postFormat","updateAsideOne","border","_view"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 462);\n","\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\nvar pipe_1 = require('./util/pipe');\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipe_1.pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): To resolve an issue where Node users may have multiple\n                    // copies of rxjs in their node_modules directory.\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();\n                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        this.destination = trustedSubscriber;\n                        trustedSubscriber.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber]);\n}\n//# sourceMappingURL=Subscriber.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar isArrayLike_1 = require('./isArrayLike');\nvar isPromise_1 = require('./isPromise');\nvar isObject_1 = require('./isObject');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\nvar InnerSubscriber_1 = require('../InnerSubscriber');\nvar observable_1 = require('../symbol/observable');\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_1.Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike_1.isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise_1.isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root_1.root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[iterator_1.iterator] === 'function') {\n        var iterator = result[iterator_1.iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[observable_1.observable] === 'function') {\n        var obs = result[observable_1.observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject_1.isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\nexports.subscribeToResult = subscribeToResult;\n//# sourceMappingURL=subscribeToResult.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = (function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_1.Subscriber));\nexports.OuterSubscriber = OuterSubscriber;\n//# sourceMappingURL=OuterSubscriber.js.map","\"use strict\";\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n//# sourceMappingURL=async.js.map","\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map","\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('./Observable');\nvar Subscriber_1 = require('./Subscriber');\nvar Subscription_1 = require('./Subscription');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n//# sourceMappingURL=Subject.js.map","\"use strict\";\nvar errorObject_1 = require('./errorObject');\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n//# sourceMappingURL=tryCatch.js.map","\"use strict\";\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n//# sourceMappingURL=root.js.map","\"use strict\";\nfunction isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\nexports.isScheduler = isScheduler;\n//# sourceMappingURL=isScheduler.js.map","\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar EmptyObservable = (function (_super) {\n    __extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable_1.Observable));\nexports.EmptyObservable = EmptyObservable;\n//# sourceMappingURL=EmptyObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable = (function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable_1.EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_1.Observable));\nexports.ArrayObservable = ArrayObservable;\n//# sourceMappingURL=ArrayObservable.js.map","\"use strict\";\nvar ConnectableObservable_1 = require('../observable/ConnectableObservable');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexports.multicast = multicast;\nvar MulticastOperator = (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexports.MulticastOperator = MulticastOperator;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nvar scan_1 = require('./scan');\nvar takeLast_1 = require('./takeLast');\nvar defaultIfEmpty_1 = require('./defaultIfEmpty');\nvar pipe_1 = require('../util/pipe');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe_1.pipe(scan_1.scan(function (acc, value, index) {\n            return accumulator(acc, value, index + 1);\n        }), takeLast_1.takeLast(1))(source);\n    };\n}\nexports.reduce = reduce;\n//# sourceMappingURL=reduce.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = (function (_super) {\n    __extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var err = _super.call(this, 'argument out of range');\n        this.name = err.name = 'ArgumentOutOfRangeError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexports.map = map;\nvar MapOperator = (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexports.MapOperator = MapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = (function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Scheduler_1 = require('../Scheduler');\nvar AsyncScheduler = (function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler_1.Scheduler));\nexports.AsyncScheduler = AsyncScheduler;\n//# sourceMappingURL=AsyncScheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Action_1 = require('./Action');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = (function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root_1.root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action_1.Action));\nexports.AsyncAction = AsyncAction;\n//# sourceMappingURL=AsyncAction.js.map","\"use strict\";\nvar isArray_1 = require('../util/isArray');\nfunction isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\nexports.isNumeric = isNumeric;\n;\n//# sourceMappingURL=isNumeric.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nexports.mergeMap = mergeMap;\nvar MergeMapOperator = (function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexports.MergeMapOperator = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = (function (_super) {\n    __extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapSubscriber = MergeMapSubscriber;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nvar Observable_1 = require('./Observable');\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_1.Observable.of(this.value);\n            case 'E':\n                return Observable_1.Observable.throw(this.error);\n            case 'C':\n                return Observable_1.Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexports.Notification = Notification;\n//# sourceMappingURL=Notification.js.map","\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar of_1 = require('./of');\nvar from_1 = require('./from');\nvar concatAll_1 = require('../operators/concatAll');\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    if (observables.length === 1 || (observables.length === 2 && isScheduler_1.isScheduler(observables[1]))) {\n        return from_1.from(observables[0]);\n    }\n    return concatAll_1.concatAll()(of_1.of.apply(void 0, observables));\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nfunction symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexports.symbolIteratorPonyfill = symbolIteratorPonyfill;\nexports.iterator = symbolIteratorPonyfill(root_1.root);\n/**\n * @deprecated use iterator instead\n */\nexports.$$iterator = exports.iterator;\n//# sourceMappingURL=iterator.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nexports.defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector, config) {\n    if (config === void 0) { config = exports.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };\n}\nexports.throttle = throttle;\nvar ThrottleOperator = (function () {\n    function ThrottleOperator(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = (function (_super) {\n    __extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasTrailingValue = false;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this._trailing) {\n                this._hasTrailingValue = true;\n                this._trailingValue = value;\n            }\n        }\n        else {\n            var duration = this.tryDurationSelector(value);\n            if (duration) {\n                this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n            }\n            if (this._leading) {\n                this.destination.next(value);\n                if (this._trailing) {\n                    this._hasTrailingValue = true;\n                    this._trailingValue = value;\n                }\n            }\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    };\n    ThrottleSubscriber.prototype._unsubscribe = function () {\n        var _a = this, throttled = _a.throttled, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue, _trailing = _a._trailing;\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n    };\n    ThrottleSubscriber.prototype._sendTrailing = function () {\n        var _a = this, destination = _a.destination, throttled = _a.throttled, _trailing = _a._trailing, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue;\n        if (throttled && _trailing && _hasTrailingValue) {\n            destination.next(_trailingValue);\n            this._trailingValue = null;\n            this._hasTrailingValue = false;\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=throttle.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = (function (_super) {\n    __extends(EmptyError, _super);\n    function EmptyError() {\n        var err = _super.call(this, 'no elements in sequence');\n        this.name = err.name = 'EmptyError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return EmptyError;\n}(Error));\nexports.EmptyError = EmptyError;\n//# sourceMappingURL=EmptyError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar queue_1 = require('./scheduler/queue');\nvar Subscription_1 = require('./Subscription');\nvar observeOn_1 = require('./operators/observeOn');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject = (function (_super) {\n    __extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n        _super.call(this);\n        this.scheduler = scheduler;\n        this._events = [];\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue_1.queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject_1.Subject));\nexports.ReplaySubject = ReplaySubject;\nvar ReplayEvent = (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar Subscriber_1 = require('../Subscriber');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar iterator_1 = require('../symbol/iterator');\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nfunction zip() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function zipOperatorFunction(source) {\n        return source.lift.call(zipStatic.apply(void 0, [source].concat(observables)));\n    };\n}\nexports.zip = zip;\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nfunction zipStatic() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = observables[observables.length - 1];\n    if (typeof project === 'function') {\n        observables.pop();\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));\n}\nexports.zipStatic = zipStatic;\nvar ZipOperator = (function () {\n    function ZipOperator(project) {\n        this.project = project;\n    }\n    ZipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.project));\n    };\n    return ZipOperator;\n}());\nexports.ZipOperator = ZipOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipSubscriber = (function (_super) {\n    __extends(ZipSubscriber, _super);\n    function ZipSubscriber(destination, project, values) {\n        if (values === void 0) { values = Object.create(null); }\n        _super.call(this, destination);\n        this.iterators = [];\n        this.active = 0;\n        this.project = (typeof project === 'function') ? project : null;\n        this.values = values;\n    }\n    ZipSubscriber.prototype._next = function (value) {\n        var iterators = this.iterators;\n        if (isArray_1.isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[iterator_1.iterator] === 'function') {\n            iterators.push(new StaticIterator(value[iterator_1.iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    };\n    ZipSubscriber.prototype._complete = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    };\n    ZipSubscriber.prototype.notifyInactive = function () {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ZipSubscriber.prototype.checkIterators = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        var destination = this.destination;\n        // abort if not all of them have values\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        var shouldComplete = false;\n        var args = [];\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            var result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.project) {\n            this._tryProject(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    };\n    ZipSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return ZipSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ZipSubscriber = ZipSubscriber;\nvar StaticIterator = (function () {\n    function StaticIterator(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    StaticIterator.prototype.hasValue = function () {\n        return true;\n    };\n    StaticIterator.prototype.next = function () {\n        var result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    };\n    StaticIterator.prototype.hasCompleted = function () {\n        var nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    };\n    return StaticIterator;\n}());\nvar StaticArrayIterator = (function () {\n    function StaticArrayIterator(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    StaticArrayIterator.prototype[iterator_1.iterator] = function () {\n        return this;\n    };\n    StaticArrayIterator.prototype.next = function (value) {\n        var i = this.index++;\n        var array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    };\n    StaticArrayIterator.prototype.hasValue = function () {\n        return this.array.length > this.index;\n    };\n    StaticArrayIterator.prototype.hasCompleted = function () {\n        return this.array.length === this.index;\n    };\n    return StaticArrayIterator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipBufferIterator = (function (_super) {\n    __extends(ZipBufferIterator, _super);\n    function ZipBufferIterator(destination, parent, observable) {\n        _super.call(this, destination);\n        this.parent = parent;\n        this.observable = observable;\n        this.stillUnsubscribed = true;\n        this.buffer = [];\n        this.isComplete = false;\n    }\n    ZipBufferIterator.prototype[iterator_1.iterator] = function () {\n        return this;\n    };\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    ZipBufferIterator.prototype.next = function () {\n        var buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    };\n    ZipBufferIterator.prototype.hasValue = function () {\n        return this.buffer.length > 0;\n    };\n    ZipBufferIterator.prototype.hasCompleted = function () {\n        return this.buffer.length === 0 && this.isComplete;\n    };\n    ZipBufferIterator.prototype.notifyComplete = function () {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    };\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\n        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);\n    };\n    return ZipBufferIterator;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=zip.js.map","\"use strict\";\nfunction isDate(value) {\n    return value instanceof Date && !isNaN(+value);\n}\nexports.isDate = isDate;\n//# sourceMappingURL=isDate.js.map","\"use strict\";\nvar Observable_1 = require('../Observable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar isScheduler_1 = require('../util/isScheduler');\nvar mergeAll_1 = require('../operators/mergeAll');\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler_1.isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {\n        return observables[0];\n    }\n    return mergeAll_1.mergeAll(concurrent)(new ArrayObservable_1.ArrayObservable(observables, scheduler));\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\nvar identity_1 = require('../util/identity');\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);\n}\nexports.mergeAll = mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexports.observeOn = observeOn;\nvar ObserveOnOperator = (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexports.ObserveOnOperator = ObserveOnOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = (function (_super) {\n    __extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification_1.Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification_1.Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification_1.Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ObserveOnSubscriber = ObserveOnSubscriber;\nvar ObserveOnMessage = (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexports.ObserveOnMessage = ObserveOnMessage;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(new ArrayObservable_1.ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };\n}\nexports.combineLatest = combineLatest;\nvar CombineLatestOperator = (function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\nexports.CombineLatestOperator = CombineLatestOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = (function (_super) {\n    __extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.CombineLatestSubscriber = CombineLatestSubscriber;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar Subscription_1 = require('./Subscription');\n/**\n * @class AsyncSubject<T>\n */\nvar AsyncSubject = (function (_super) {\n    __extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        _super.apply(this, arguments);\n        this.value = null;\n        this.hasNext = false;\n        this.hasCompleted = false;\n    }\n    AsyncSubject.prototype._subscribe = function (subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    };\n    AsyncSubject.prototype.error = function (error) {\n        if (!this.hasCompleted) {\n            _super.prototype.error.call(this, error);\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            _super.prototype.next.call(this, this.value);\n        }\n        _super.prototype.complete.call(this);\n    };\n    return AsyncSubject;\n}(Subject_1.Subject));\nexports.AsyncSubject = AsyncSubject;\n//# sourceMappingURL=AsyncSubject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n//# sourceMappingURL=observable.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n//# sourceMappingURL=isFunction.js.map","export default class Widgets {\r\n    static input(parent, type) {\r\n        const input = document.createElement('input')\r\n        input.className = 'input'\r\n        input.setAttribute('type', type)\r\n        parent.appendChild(input)\r\n        return input\r\n    }\r\n    static button(parent, text) { //logout, back, submit\r\n        const button = document.createElement('button')\r\n        button.className = 'button'\r\n        button.innerHTML = text\r\n        parent.appendChild(button)\r\n        return button\r\n    }\r\n    static div(parent, className) {\r\n        const div = document.createElement('div')\r\n        div.className = className\r\n        parent.appendChild(div)\r\n        return div\r\n    }\r\n    static label(parent, text) {\r\n        const label = document.createElement('label')\r\n        label.className = 'label'\r\n        label.innerHTML = text\r\n        parent.appendChild(label)\r\n        return label\r\n    }\r\n    static inputDiv(parent, type, text, inline) {\r\n        const inputDiv = this.div(parent, 'inputDiv')\r\n        inputDiv.label = this.label(inputDiv, text)\r\n        inputDiv.input = this.input(inputDiv, type)\r\n        if (inline) {\r\n            inputDiv.style.display = \"inline\";\r\n        }\r\n        return inputDiv\r\n    }\r\n    static textElement(parent, type, text) {\r\n        const element = document.createElement(type)\r\n        element.innerHTML = text\r\n        parent.appendChild(element)\r\n        return element\r\n    }\r\n    static imageDiv(parent, className, src) {\r\n        let div = Widgets.div(parent, className)\r\n        let image = document.createElement('img')\r\n        image.src = src\r\n        image.style.maxHeight = '100%'\r\n        image.style.maxWidth = '100%'\r\n        div.appendChild(image)\r\n        return div\r\n    }\r\n    static checkInput(input, state) {\r\n        let color\r\n        if (state) {\r\n            color = \"red\"\r\n        } else {\r\n            color = \"green\"\r\n        }\r\n        input.style.outline = `2px solid ${color}`\r\n    }\r\n    static inputList(parent, text) {\r\n        const div = Widgets.inputDiv(parent, 'text', text)\r\n        div.input.setAttribute('list', 'subjects')\r\n        const datalist = document.createElement('datalist')\r\n        datalist.setAttribute('id', 'subjects')\r\n        div.appendChild(datalist)\r\n        div.addOptions = (options) => {\r\n            while (datalist.firstChild) {\r\n                datalist.removeChild(datalist.firstChild);\r\n            }\r\n            if (options) {\r\n                options.forEach(element => {\r\n                    Widgets.option(datalist, element.id)\r\n                })\r\n            }\r\n        }\r\n        return div\r\n    }\r\n    static option(parent, value) {\r\n        const option = document.createElement('option')\r\n        option.setAttribute('value', value)\r\n        parent.appendChild(option)\r\n        return option\r\n    }\r\n}","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar map_1 = require('./map');\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return map_1.map(function (value) { return new Timestamp(value, scheduler.now()); });\n    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\nexports.timestamp = timestamp;\nvar Timestamp = (function () {\n    function Timestamp(value, timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n    return Timestamp;\n}());\nexports.Timestamp = Timestamp;\n;\n//# sourceMappingURL=timestamp.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nexports.switchMap = switchMap;\nvar SwitchMapOperator = (function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = (function (_super) {\n    __extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nexports.refCount = refCount;\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=refCount.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nexports.takeLast = takeLast;\nvar TakeLastOperator = (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = (function (_super) {\n    __extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.ring = new Array();\n        this.count = 0;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=takeLast.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nexports.scan = scan;\nvar ScanOperator = (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) { hasSeed = false; }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = (function (_super) {\n    __extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this._seed = _seed;\n        this.hasSeed = hasSeed;\n        this.index = 0;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nexports.audit = audit;\nvar AuditOperator = (function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = (function (_super) {\n    __extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);\n            if (duration === errorObject_1.errorObject) {\n                this.destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);\n                if (innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=audit.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nfunction find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };\n}\nexports.find = find;\nvar FindValueOperator = (function () {\n    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    FindValueOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    };\n    return FindValueOperator;\n}());\nexports.FindValueOperator = FindValueOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FindValueSubscriber = (function (_super) {\n    __extends(FindValueSubscriber, _super);\n    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n        this.index = 0;\n    }\n    FindValueSubscriber.prototype.notifyComplete = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    FindValueSubscriber.prototype._next = function (value) {\n        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n        var index = this.index++;\n        try {\n            var result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    FindValueSubscriber.prototype._complete = function () {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    };\n    return FindValueSubscriber;\n}(Subscriber_1.Subscriber));\nexports.FindValueSubscriber = FindValueSubscriber;\n//# sourceMappingURL=find.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nexports.filter = filter;\nvar FilterOperator = (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = (function (_super) {\n    __extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nexports.distinctUntilChanged = distinctUntilChanged;\nvar DistinctUntilChangedOperator = (function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = (function (_super) {\n    __extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch_1.tryCatch(this.keySelector)(value);\n            if (key === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch_1.tryCatch(this.compare)(this.key, key);\n            if (result === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nfunction defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };\n}\nexports.defaultIfEmpty = defaultIfEmpty;\nvar DefaultIfEmptyOperator = (function () {\n    function DefaultIfEmptyOperator(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    };\n    return DefaultIfEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DefaultIfEmptySubscriber = (function (_super) {\n    __extends(DefaultIfEmptySubscriber, _super);\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\n        _super.call(this, destination);\n        this.defaultValue = defaultValue;\n        this.isEmpty = true;\n    }\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    };\n    DefaultIfEmptySubscriber.prototype._complete = function () {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    };\n    return DefaultIfEmptySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=defaultIfEmpty.js.map","\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return mergeMap_1.mergeMap(project, resultSelector, 1);\n}\nexports.concatMap = concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar FromObservable_1 = require('../observable/FromObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n/* tslint:enable:max-line-length */\nfunction onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nexports.onErrorResumeNextStatic = onErrorResumeNextStatic;\nvar OnErrorResumeNextOperator = (function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = (function (_super) {\n    __extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult_1.subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `race([obs1, obs2, ...])`\n    if (observables.length === 1) {\n        if (isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());\n}\nexports.race = race;\nvar RaceOperator = (function () {\n    function RaceOperator() {\n    }\n    RaceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    };\n    return RaceOperator;\n}());\nexports.RaceOperator = RaceOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RaceSubscriber = (function (_super) {\n    __extends(RaceSubscriber, _super);\n    function RaceSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasFirst = false;\n        this.observables = [];\n        this.subscriptions = [];\n    }\n    RaceSubscriber.prototype._next = function (observable) {\n        this.observables.push(observable);\n    };\n    RaceSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (var i = 0; i < len && !this.hasFirst; i++) {\n                var observable = observables[i];\n                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    };\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    var subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    };\n    return RaceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.RaceSubscriber = RaceSubscriber;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar mergeAll_1 = require('./mergeAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return mergeAll_1.mergeAll(1);\n}\nexports.concatAll = concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ScalarObservable = (function (_super) {\n    __extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable_1.Observable));\nexports.ScalarObservable = ScalarObservable;\n//# sourceMappingURL=ScalarObservable.js.map","\"use strict\";\n/* tslint:disable:no-empty */\nfunction noop() { }\nexports.noop = noop;\n//# sourceMappingURL=noop.js.map","\"use strict\";\nvar noop_1 = require('./noop');\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexports.pipe = pipe;\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop_1.noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\nexports.pipeFromArray = pipeFromArray;\n//# sourceMappingURL=pipe.js.map","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar VirtualTimeScheduler = (function (_super) {\n    __extends(VirtualTimeScheduler, _super);\n    function VirtualTimeScheduler(SchedulerAction, maxFrames) {\n        var _this = this;\n        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }\n        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }\n        _super.call(this, SchedulerAction, function () { return _this.frame; });\n        this.maxFrames = maxFrames;\n        this.frame = 0;\n        this.index = -1;\n    }\n    /**\n     * Prompt the Scheduler to execute all of its queued actions, therefore\n     * clearing its queue.\n     * @return {void}\n     */\n    VirtualTimeScheduler.prototype.flush = function () {\n        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;\n        var error, action;\n        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        }\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    VirtualTimeScheduler.frameTimeFactor = 10;\n    return VirtualTimeScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.VirtualTimeScheduler = VirtualTimeScheduler;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar VirtualAction = (function (_super) {\n    __extends(VirtualAction, _super);\n    function VirtualAction(scheduler, work, index) {\n        if (index === void 0) { index = scheduler.index += 1; }\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.index = index;\n        this.active = true;\n        this.index = scheduler.index = index;\n    }\n    VirtualAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (!this.id) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.active = false;\n        // If an action is rescheduled, we save allocations by mutating its state,\n        // pushing it to the end of the scheduler queue, and recycling the action.\n        // But since the VirtualTimeScheduler is used for testing, VirtualActions\n        // must be immutable so they can be inspected later.\n        var action = new VirtualAction(this.scheduler, this.work);\n        this.add(action);\n        return action.schedule(state, delay);\n    };\n    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.delay = scheduler.frame + delay;\n        var actions = scheduler.actions;\n        actions.push(this);\n        actions.sort(VirtualAction.sortActions);\n        return true;\n    };\n    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return undefined;\n    };\n    VirtualAction.prototype._execute = function (state, delay) {\n        if (this.active === true) {\n            return _super.prototype._execute.call(this, state, delay);\n        }\n    };\n    VirtualAction.sortActions = function (a, b) {\n        if (a.delay === b.delay) {\n            if (a.index === b.index) {\n                return 0;\n            }\n            else if (a.index > b.index) {\n                return 1;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (a.delay > b.delay) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    };\n    return VirtualAction;\n}(AsyncAction_1.AsyncAction));\nexports.VirtualAction = VirtualAction;\n//# sourceMappingURL=VirtualTimeScheduler.js.map","\"use strict\";\nfunction applyMixins(derivedCtor, baseCtors) {\n    for (var i = 0, len = baseCtors.length; i < len; i++) {\n        var baseCtor = baseCtors[i];\n        var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n        for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {\n            var name_1 = propertyKeys[j];\n            derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];\n        }\n    }\n}\nexports.applyMixins = applyMixins;\n//# sourceMappingURL=applyMixins.js.map","\"use strict\";\nvar SubscriptionLog = (function () {\n    function SubscriptionLog(subscribedFrame, unsubscribedFrame) {\n        if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }\n        this.subscribedFrame = subscribedFrame;\n        this.unsubscribedFrame = unsubscribedFrame;\n    }\n    return SubscriptionLog;\n}());\nexports.SubscriptionLog = SubscriptionLog;\n//# sourceMappingURL=SubscriptionLog.js.map","\"use strict\";\nvar SubscriptionLog_1 = require('./SubscriptionLog');\nvar SubscriptionLoggable = (function () {\n    function SubscriptionLoggable() {\n        this.subscriptions = [];\n    }\n    SubscriptionLoggable.prototype.logSubscribedFrame = function () {\n        this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));\n        return this.subscriptions.length - 1;\n    };\n    SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {\n        var subscriptionLogs = this.subscriptions;\n        var oldSubscriptionLog = subscriptionLogs[index];\n        subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());\n    };\n    return SubscriptionLoggable;\n}());\nexports.SubscriptionLoggable = SubscriptionLoggable;\n//# sourceMappingURL=SubscriptionLoggable.js.map","\"use strict\";\nvar zip_1 = require('./zip');\nfunction zipAll(project) {\n    return function (source) { return source.lift(new zip_1.ZipOperator(project)); };\n}\nexports.zipAll = zipAll;\n//# sourceMappingURL=zipAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nexports.withLatestFrom = withLatestFrom;\nvar WithLatestFromOperator = (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = (function (_super) {\n    __extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nfunction windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nexports.windowWhen = windowWhen;\nvar WindowOperator = (function () {\n    function WindowOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = (function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.closingSelector = closingSelector;\n        this.openWindow();\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    };\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\n        if (innerSub === void 0) { innerSub = null; }\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var window = this.window = new Subject_1.Subject();\n        this.destination.next(window);\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            var err = errorObject_1.errorObject.e;\n            this.destination.error(err);\n            this.window.error(err);\n        }\n        else {\n            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));\n        }\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=windowWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nfunction windowToggle(openings, closingSelector) {\n    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };\n}\nexports.windowToggle = windowToggle;\nvar WindowToggleOperator = (function () {\n    function WindowToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return WindowToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowToggleSubscriber = (function (_super) {\n    __extends(WindowToggleSubscriber, _super);\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));\n    }\n    WindowToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        if (contexts) {\n            var len = contexts.length;\n            for (var i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._error.call(this, err);\n    };\n    WindowToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    WindowToggleSubscriber.prototype._unsubscribe = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);\n            if (closingNotifier === errorObject_1.errorObject) {\n                return this.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var window_1 = new Subject_1.Subject();\n                var subscription = new Subscription_1.Subscription();\n                var context = { window: window_1, subscription: subscription };\n                this.contexts.push(context);\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n                if (innerSubscription.closed) {\n                    this.closeWindow(this.contexts.length - 1);\n                }\n                else {\n                    innerSubscription.context = context;\n                    subscription.add(innerSubscription);\n                }\n                this.destination.next(window_1);\n            }\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\n        this.error(err);\n    };\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    };\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n        if (index === -1) {\n            return;\n        }\n        var contexts = this.contexts;\n        var context = contexts[index];\n        var window = context.window, subscription = context.subscription;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    };\n    return WindowToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=windowToggle.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar async_1 = require('../scheduler/async');\nvar Subscriber_1 = require('../Subscriber');\nvar isNumeric_1 = require('../util/isNumeric');\nvar isScheduler_1 = require('../util/isScheduler');\nfunction windowTime(windowTimeSpan) {\n    var scheduler = async_1.async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler_1.isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler_1.isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric_1.isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler_1.isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric_1.isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nexports.windowTime = windowTime;\nvar WindowTimeOperator = (function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\nvar CountedSubject = (function (_super) {\n    __extends(CountedSubject, _super);\n    function CountedSubject() {\n        _super.apply(this, arguments);\n        this._numberOfNextedValues = 0;\n    }\n    CountedSubject.prototype.next = function (value) {\n        this._numberOfNextedValues++;\n        _super.prototype.next.call(this, value);\n    };\n    Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n        get: function () {\n            return this._numberOfNextedValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CountedSubject;\n}(Subject_1.Subject));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowTimeSubscriber = (function (_super) {\n    __extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n        this.windows = [];\n        var window = this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var closeState = { subscriber: this, window: window, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var timeSpanOnlyState = { subscriber: this, window: window, windowTimeSpan: windowTimeSpan };\n            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_1 = windows[i];\n            if (!window_1.closed) {\n                window_1.next(value);\n                if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window_1);\n                }\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_2 = windows.shift();\n            if (!window_2.closed) {\n                window_2.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new CountedSubject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    var subscriber = state.subscriber, window = state.window, context = state.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n//# sourceMappingURL=windowTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subject_1 = require('../Subject');\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nexports.windowCount = windowCount;\nvar WindowCountOperator = (function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = (function (_super) {\n    __extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n        this.windows = [new Subject_1.Subject()];\n        this.count = 0;\n        destination.next(this.windows[0]);\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject_1.Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=windowCount.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nexports.window = window;\nvar WindowOperator = (function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = (function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        _super.call(this, destination);\n        this.window = new Subject_1.Subject();\n        destination.next(this.window);\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject_1.Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=window.js.map","\"use strict\";\nvar reduce_1 = require('./reduce');\nfunction toArrayReducer(arr, item, index) {\n    if (index === 0) {\n        return [item];\n    }\n    arr.push(item);\n    return arr;\n}\nfunction toArray() {\n    return reduce_1.reduce(toArrayReducer, []);\n}\nexports.toArray = toArray;\n//# sourceMappingURL=toArray.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) {\n        var absoluteTimeout = isDate_1.isDate(due);\n        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nexports.timeoutWith = timeoutWith;\nvar TimeoutWithOperator = (function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = (function (_super) {\n    __extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n        var withObservable = subscriber.withObservable;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult_1.subscribeToResult(subscriber, withObservable));\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    TimeoutWithSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=timeoutWith.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nvar TimeoutError = (function (_super) {\n    __extends(TimeoutError, _super);\n    function TimeoutError() {\n        var err = _super.call(this, 'Timeout has occurred');\n        this.name = err.name = 'TimeoutError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return TimeoutError;\n}(Error));\nexports.TimeoutError = TimeoutError;\n//# sourceMappingURL=TimeoutError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\nvar TimeoutError_1 = require('../util/TimeoutError');\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nfunction timeout(due, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteTimeout = isDate_1.isDate(due);\n    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n    return function (source) { return source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError_1.TimeoutError())); };\n}\nexports.timeout = timeout;\nvar TimeoutOperator = (function () {\n    function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n    }\n    TimeoutOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));\n    };\n    return TimeoutOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutSubscriber = (function (_super) {\n    __extends(TimeoutSubscriber, _super);\n    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    TimeoutSubscriber.dispatchTimeout = function (subscriber) {\n        subscriber.error(subscriber.errorInstance);\n    };\n    TimeoutSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    TimeoutSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.errorInstance = null;\n    };\n    return TimeoutSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\nfunction timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new TimeIntervalOperator(scheduler)); };\n}\nexports.timeInterval = timeInterval;\nvar TimeInterval = (function () {\n    function TimeInterval(value, interval) {\n        this.value = value;\n        this.interval = interval;\n    }\n    return TimeInterval;\n}());\nexports.TimeInterval = TimeInterval;\n;\nvar TimeIntervalOperator = (function () {\n    function TimeIntervalOperator(scheduler) {\n        this.scheduler = scheduler;\n    }\n    TimeIntervalOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n    };\n    return TimeIntervalOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeIntervalSubscriber = (function (_super) {\n    __extends(TimeIntervalSubscriber, _super);\n    function TimeIntervalSubscriber(destination, scheduler) {\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.lastTime = 0;\n        this.lastTime = scheduler.now();\n    }\n    TimeIntervalSubscriber.prototype._next = function (value) {\n        var now = this.scheduler.now();\n        var span = now - this.lastTime;\n        this.lastTime = now;\n        this.destination.next(new TimeInterval(value, span));\n    };\n    return TimeIntervalSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=timeInterval.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeInterval_1 = require('../operators/timeInterval');\nexports.TimeInterval = timeInterval_1.TimeInterval;\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nfunction timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeInterval_1.timeInterval(scheduler)(this);\n}\nexports.timeInterval = timeInterval;\n//# sourceMappingURL=timeInterval.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\nvar throttle_1 = require('./throttle');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\n}\nexports.throttleTime = throttleTime;\nvar ThrottleTimeOperator = (function () {\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = (function (_super) {\n    __extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n        _super.call(this, destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\n}\nexports.takeWhile = takeWhile;\nvar TakeWhileOperator = (function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = (function (_super) {\n    __extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.index = 0;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nexports.takeUntil = takeUntil;\nvar TakeUntilOperator = (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = (function (_super) {\n    __extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nexports.take = take;\nvar TakeOperator = (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = (function (_super) {\n    __extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=take.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return function (source) { return source.lift(new SwitchMapToOperator(innerObservable, resultSelector)); };\n}\nexports.switchMapTo = switchMapTo;\nvar SwitchMapToOperator = (function () {\n    function SwitchMapToOperator(observable, resultSelector) {\n        this.observable = observable;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n    };\n    return SwitchMapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapToSubscriber = (function (_super) {\n    __extends(SwitchMapToSubscriber, _super);\n    function SwitchMapToSubscriber(destination, inner, resultSelector) {\n        _super.call(this, destination);\n        this.inner = inner;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapToSubscriber.prototype._next = function (value) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));\n    };\n    SwitchMapToSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    return SwitchMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=switchMapTo.js.map","\"use strict\";\nvar switchMap_1 = require('./switchMap');\nvar identity_1 = require('../util/identity');\nfunction switchAll() {\n    return switchMap_1.switchMap(identity_1.identity);\n}\nexports.switchAll = switchAll;\n//# sourceMappingURL=switchAll.js.map","var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmeidate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","\"use strict\";\nvar AsapAction_1 = require('./AsapAction');\nvar AsapScheduler_1 = require('./AsapScheduler');\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\nexports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);\n//# sourceMappingURL=asap.js.map","\"use strict\";\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar ScalarObservable_1 = require('../observable/ScalarObservable');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\nvar concat_1 = require('../observable/concat');\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concat_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), source);\n        }\n        else if (len > 1) {\n            return concat_1.concat(new ArrayObservable_1.ArrayObservable(array, scheduler), source);\n        }\n        else {\n            return concat_1.concat(new EmptyObservable_1.EmptyObservable(scheduler), source);\n        }\n    };\n}\nexports.startWith = startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nexports.skipWhile = skipWhile;\nvar SkipWhileOperator = (function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = (function (_super) {\n    __extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skipWhile.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };\n}\nexports.skipUntil = skipUntil;\nvar SkipUntilOperator = (function () {\n    function SkipUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SkipUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n    };\n    return SkipUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipUntilSubscriber = (function (_super) {\n    __extends(SkipUntilSubscriber, _super);\n    function SkipUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.hasValue = false;\n        this.isInnerStopped = false;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    SkipUntilSubscriber.prototype._next = function (value) {\n        if (this.hasValue) {\n            _super.prototype._next.call(this, value);\n        }\n    };\n    SkipUntilSubscriber.prototype._complete = function () {\n        if (this.isInnerStopped) {\n            _super.prototype._complete.call(this);\n        }\n        else {\n            this.unsubscribe();\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.hasValue = true;\n    };\n    SkipUntilSubscriber.prototype.notifyComplete = function () {\n        this.isInnerStopped = true;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    return SkipUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=skipUntil.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return function (source) { return source.lift(new SkipLastOperator(count)); };\n}\nexports.skipLast = skipLast;\nvar SkipLastOperator = (function () {\n    function SkipLastOperator(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    SkipLastOperator.prototype.call = function (subscriber, source) {\n        if (this._skipCount === 0) {\n            // If we don't want to skip any values then just subscribe\n            // to Subscriber without any further logic.\n            return source.subscribe(new Subscriber_1.Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    };\n    return SkipLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipLastSubscriber = (function (_super) {\n    __extends(SkipLastSubscriber, _super);\n    function SkipLastSubscriber(destination, _skipCount) {\n        _super.call(this, destination);\n        this._skipCount = _skipCount;\n        this._count = 0;\n        this._ring = new Array(_skipCount);\n    }\n    SkipLastSubscriber.prototype._next = function (value) {\n        var skipCount = this._skipCount;\n        var count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            var currentIndex = count % skipCount;\n            var ring = this._ring;\n            var oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    };\n    return SkipLastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skipLast.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nexports.skip = skip;\nvar SkipOperator = (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = (function (_super) {\n    __extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nfunction single(predicate) {\n    return function (source) { return source.lift(new SingleOperator(predicate, source)); };\n}\nexports.single = single;\nvar SingleOperator = (function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SingleSubscriber = (function (_super) {\n    __extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.seenValue = false;\n        this.index = 0;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=single.js.map","\"use strict\";\nvar ReplaySubject_1 = require('../ReplaySubject');\n/**\n * @method shareReplay\n * @owner Observable\n */\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n    return function (source) { return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler)); };\n}\nexports.shareReplay = shareReplay;\nfunction shareReplayOperator(bufferSize, windowTime, scheduler) {\n    var subject;\n    var refCount = 0;\n    var subscription;\n    var hasError = false;\n    var isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next: function (value) { subject.next(value); },\n                error: function (err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete: function () {\n                    isComplete = true;\n                    subject.complete();\n                },\n            });\n        }\n        var innerSub = subject.subscribe(this);\n        return function () {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && refCount === 0 && isComplete) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n}\n;\n//# sourceMappingURL=shareReplay.js.map","\"use strict\";\nvar multicast_1 = require('./multicast');\nvar refCount_1 = require('./refCount');\nvar Subject_1 = require('../Subject');\nfunction shareSubjectFactory() {\n    return new Subject_1.Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };\n}\nexports.share = share;\n;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nexports.sequenceEqual = sequenceEqual;\nvar SequenceEqualOperator = (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexports.SequenceEqualOperator = SequenceEqualOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = (function (_super) {\n    __extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        _super.call(this, destination);\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n        this._a = [];\n        this._b = [];\n        this._oneComplete = false;\n        this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch_1.tryCatch(comparor)(a, b);\n                if (areEqual === errorObject_1.errorObject) {\n                    this.destination.error(errorObject_1.errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SequenceEqualSubscriber = SequenceEqualSubscriber;\nvar SequenceEqualCompareToSubscriber = (function (_super) {\n    __extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        _super.call(this, destination);\n        this.parent = parent;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=sequenceEqual.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nfunction sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\n}\nexports.sampleTime = sampleTime;\nvar SampleTimeOperator = (function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleTimeSubscriber = (function (_super) {\n    __extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        _super.call(this, destination);\n        this.period = period;\n        this.scheduler = scheduler;\n        this.hasValue = false;\n        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nexports.sample = sample;\nvar SampleOperator = (function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult_1.subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = (function (_super) {\n    __extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        _super.apply(this, arguments);\n        this.hasValue = false;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=sample.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nexports.retryWhen = retryWhen;\nvar RetryWhenOperator = (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = (function (_super) {\n    __extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject_1.Subject();\n                retries = tryCatch_1.tryCatch(this.notifier)(errors);\n                if (retries === errorObject_1.errorObject) {\n                    return _super.prototype.error.call(this, errorObject_1.errorObject.e);\n                }\n                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.errors = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        this._unsubscribeAndRecycle();\n        this.errors = errors;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=retryWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nexports.retry = retry;\nvar RetryOperator = (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetrySubscriber = (function (_super) {\n    __extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=retry.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nexports.repeatWhen = repeatWhen;\nvar RepeatWhenOperator = (function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = (function (_super) {\n    __extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.notifications = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this.notifications = notifications;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject_1.Subject();\n        var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject_1.errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (count < 0) {\n            return source.lift(new RepeatOperator(-1, source));\n        }\n        else {\n            return source.lift(new RepeatOperator(count - 1, source));\n        }\n    };\n}\nexports.repeat = repeat;\nvar RepeatOperator = (function () {\n    function RepeatOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RepeatOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    };\n    return RepeatOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatSubscriber = (function (_super) {\n    __extends(RepeatSubscriber, _super);\n    function RepeatSubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RepeatSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.complete.call(this);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RepeatSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=repeat.js.map","\"use strict\";\nvar isArray_1 = require('../util/isArray');\nvar race_1 = require('../observable/race');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function raceOperatorFunction(source) {\n        // if the only argument is an array, it was most likely called with\n        // `pair([obs1, obs2, ...])`\n        if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        return source.lift.call(race_1.race.apply(void 0, [source].concat(observables)));\n    };\n}\nexports.race = race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar AsyncSubject_1 = require('../AsyncSubject');\nvar multicast_1 = require('./multicast');\nfunction publishLast() {\n    return function (source) { return multicast_1.multicast(new AsyncSubject_1.AsyncSubject())(source); };\n}\nexports.publishLast = publishLast;\n//# sourceMappingURL=publishLast.js.map","\"use strict\";\nvar ReplaySubject_1 = require('../ReplaySubject');\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n        scheduler = selectorOrScheduler;\n    }\n    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n    var subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n    return function (source) { return multicast_1.multicast(function () { return subject; }, selector)(source); };\n}\nexports.publishReplay = publishReplay;\n//# sourceMappingURL=publishReplay.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\n/**\n * @class BehaviorSubject<T>\n */\nvar BehaviorSubject = (function (_super) {\n    __extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        _super.call(this);\n        this._value = _value;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject_1.Subject));\nexports.BehaviorSubject = BehaviorSubject;\n//# sourceMappingURL=BehaviorSubject.js.map","\"use strict\";\nvar BehaviorSubject_1 = require('../BehaviorSubject');\nvar multicast_1 = require('./multicast');\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nfunction publishBehavior(value) {\n    return function (source) { return multicast_1.multicast(new BehaviorSubject_1.BehaviorSubject(value))(source); };\n}\nexports.publishBehavior = publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map","\"use strict\";\nvar Subject_1 = require('../Subject');\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return selector ?\n        multicast_1.multicast(function () { return new Subject_1.Subject(); }, selector) :\n        multicast_1.multicast(new Subject_1.Subject());\n}\nexports.publish = publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar map_1 = require('./map');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    var length = properties.length;\n    if (length === 0) {\n        throw new Error('list of properties cannot be empty.');\n    }\n    return function (source) { return map_1.map(plucker(properties, length))(source); };\n}\nexports.pluck = pluck;\nfunction plucker(props, length) {\n    var mapper = function (x) {\n        var currentProp = x;\n        for (var i = 0; i < length; i++) {\n            var p = currentProp[props[i]];\n            if (typeof p !== 'undefined') {\n                currentProp = p;\n            }\n            else {\n                return undefined;\n            }\n        }\n        return currentProp;\n    };\n    return mapper;\n}\n//# sourceMappingURL=pluck.js.map","\"use strict\";\nvar not_1 = require('../util/not');\nvar filter_1 = require('./filter');\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nfunction partition(predicate, thisArg) {\n    return function (source) { return [\n        filter_1.filter(predicate, thisArg)(source),\n        filter_1.filter(not_1.not(predicate, thisArg))(source)\n    ]; };\n}\nexports.partition = partition;\n//# sourceMappingURL=partition.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nexports.pairwise = pairwise;\nvar PairwiseOperator = (function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = (function (_super) {\n    __extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasPrev = false;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=pairwise.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Observable_1 = require('../Observable');\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar refCount_1 = require('../operators/refCount');\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = (function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription_1.Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_1.Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return refCount_1.refCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable_1.Observable));\nexports.ConnectableObservable = ConnectableObservable;\nvar connectableProto = ConnectableObservable.prototype;\nexports.connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = (function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber));\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map","\"use strict\";\nvar reduce_1 = require('./reduce');\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nfunction min(comparer) {\n    var min = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }\n        : function (x, y) { return x < y ? x : y; };\n    return reduce_1.reduce(min);\n}\nexports.min = min;\n//# sourceMappingURL=min.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nexports.mergeScan = mergeScan;\nvar MergeScanOperator = (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexports.MergeScanOperator = MergeScanOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeScanSubscriber = (function (_super) {\n    __extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch_1.tryCatch(this.accumulator)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeScanSubscriber = MergeScanSubscriber;\n//# sourceMappingURL=mergeScan.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n        resultSelector = null;\n    }\n    return function (source) { return source.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent)); };\n}\nexports.mergeMapTo = mergeMapTo;\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nvar MergeMapToOperator = (function () {\n    function MergeMapToOperator(ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapToOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n    };\n    return MergeMapToOperator;\n}());\nexports.MergeMapToOperator = MergeMapToOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapToSubscriber = (function (_super) {\n    __extends(MergeMapToSubscriber, _super);\n    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapToSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var resultSelector = this.resultSelector;\n            var index = this.index++;\n            var ish = this.ish;\n            var destination = this.destination;\n            this.active++;\n            this._innerSub(ish, destination, resultSelector, value, index);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapToSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    MergeMapToSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapToSubscriber = MergeMapToSubscriber;\n//# sourceMappingURL=mergeMapTo.js.map","\"use strict\";\nvar merge_1 = require('../observable/merge');\nvar merge_2 = require('../observable/merge');\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(merge_1.merge.apply(void 0, [source].concat(observables))); };\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar reduce_1 = require('./reduce');\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nfunction max(comparer) {\n    var max = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }\n        : function (x, y) { return x > y ? x : y; };\n    return reduce_1.reduce(max);\n}\nexports.max = max;\n//# sourceMappingURL=max.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nfunction materialize() {\n    return function materializeOperatorFunction(source) {\n        return source.lift(new MaterializeOperator());\n    };\n}\nexports.materialize = materialize;\nvar MaterializeOperator = (function () {\n    function MaterializeOperator() {\n    }\n    MaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MaterializeSubscriber(subscriber));\n    };\n    return MaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MaterializeSubscriber = (function (_super) {\n    __extends(MaterializeSubscriber, _super);\n    function MaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    MaterializeSubscriber.prototype._next = function (value) {\n        this.destination.next(Notification_1.Notification.createNext(value));\n    };\n    MaterializeSubscriber.prototype._error = function (err) {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createError(err));\n        destination.complete();\n    };\n    MaterializeSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createComplete());\n        destination.complete();\n    };\n    return MaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=materialize.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nexports.mapTo = mapTo;\nvar MapToOperator = (function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = (function (_super) {\n    __extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        _super.call(this, destination);\n        this.value = value;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=mapTo.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nfunction every(predicate, thisArg) {\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\n}\nexports.every = every;\nvar EveryOperator = (function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar EverySubscriber = (function (_super) {\n    __extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n        this.index = 0;\n        this.thisArg = thisArg || this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=every.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nfunction last(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new LastOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.last = last;\nvar LastOperator = (function () {\n    function LastOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    LastOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return LastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar LastSubscriber = (function (_super) {\n    __extends(LastSubscriber, _super);\n    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.hasValue = false;\n        this.index = 0;\n        if (typeof defaultValue !== 'undefined') {\n            this.lastValue = defaultValue;\n            this.hasValue = true;\n        }\n    }\n    LastSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.lastValue = result;\n        this.hasValue = true;\n    };\n    LastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.hasValue) {\n            destination.next(this.lastValue);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return LastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=last.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar audit_1 = require('./audit');\nvar timer_1 = require('../observable/timer');\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nfunction auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return audit_1.audit(function () { return timer_1.timer(duration, scheduler); });\n}\nexports.auditTime = auditTime;\n//# sourceMappingURL=auditTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction isEmpty() {\n    return function (source) { return source.lift(new IsEmptyOperator()); };\n}\nexports.isEmpty = isEmpty;\nvar IsEmptyOperator = (function () {\n    function IsEmptyOperator() {\n    }\n    IsEmptyOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new IsEmptySubscriber(observer));\n    };\n    return IsEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IsEmptySubscriber = (function (_super) {\n    __extends(IsEmptySubscriber, _super);\n    function IsEmptySubscriber(destination) {\n        _super.call(this, destination);\n    }\n    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n        var destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    };\n    IsEmptySubscriber.prototype._next = function (value) {\n        this.notifyComplete(false);\n    };\n    IsEmptySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return IsEmptySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=isEmpty.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar noop_1 = require('../util/noop');\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nfunction ignoreElements() {\n    return function ignoreElementsOperatorFunction(source) {\n        return source.lift(new IgnoreElementsOperator());\n    };\n}\nexports.ignoreElements = ignoreElements;\nvar IgnoreElementsOperator = (function () {\n    function IgnoreElementsOperator() {\n    }\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n    };\n    return IgnoreElementsOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IgnoreElementsSubscriber = (function (_super) {\n    __extends(IgnoreElementsSubscriber, _super);\n    function IgnoreElementsSubscriber() {\n        _super.apply(this, arguments);\n    }\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\n        noop_1.noop();\n    };\n    return IgnoreElementsSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=ignoreElements.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar Observable_1 = require('../Observable');\nvar Subject_1 = require('../Subject');\nvar Map_1 = require('../util/Map');\nvar FastMap_1 = require('../util/FastMap');\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nexports.groupBy = groupBy;\nvar GroupByOperator = (function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupBySubscriber = (function (_super) {\n    __extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n        this.groups = null;\n        this.attemptedToUnsubscribe = false;\n        this.count = 0;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject();\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupDurationSubscriber = (function (_super) {\n    __extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        _super.call(this, group);\n        this.key = key;\n        this.group = group;\n        this.parent = parent;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nvar GroupedObservable = (function (_super) {\n    __extends(GroupedObservable, _super);\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        _super.call(this);\n        this.key = key;\n        this.groupSubject = groupSubject;\n        this.refCountSubscription = refCountSubscription;\n    }\n    GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription_1.Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable_1.Observable));\nexports.GroupedObservable = GroupedObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerRefCountSubscription = (function (_super) {\n    __extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        _super.call(this);\n        this.parent = parent;\n        parent.count++;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription_1.Subscription));\n//# sourceMappingURL=groupBy.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.first = first;\nvar FirstOperator = (function () {\n    function FirstOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    FirstOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return FirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FirstSubscriber = (function (_super) {\n    __extends(FirstSubscriber, _super);\n    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.index = 0;\n        this.hasCompleted = false;\n        this._emitted = false;\n    }\n    FirstSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._emit = function (value, index) {\n        if (this.resultSelector) {\n            this._tryResultSelector(value, index);\n            return;\n        }\n        this._emitFinal(value);\n    };\n    FirstSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this._emitFinal(result);\n    };\n    FirstSubscriber.prototype._emitFinal = function (value) {\n        var destination = this.destination;\n        if (!this._emitted) {\n            this._emitted = true;\n            destination.next(value);\n            destination.complete();\n            this.hasCompleted = true;\n        }\n    };\n    FirstSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n            destination.next(this.defaultValue);\n            destination.complete();\n        }\n        else if (!this.hasCompleted) {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return FirstSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar find_1 = require('../operators/find');\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nfunction findIndex(predicate, thisArg) {\n    return function (source) { return source.lift(new find_1.FindValueOperator(predicate, source, true, thisArg)); };\n}\nexports.findIndex = findIndex;\n//# sourceMappingURL=findIndex.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nfunction finalize(callback) {\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\n}\nexports.finalize = finalize;\nvar FinallyOperator = (function () {\n    function FinallyOperator(callback) {\n        this.callback = callback;\n    }\n    FinallyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    };\n    return FinallyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FinallySubscriber = (function (_super) {\n    __extends(FinallySubscriber, _super);\n    function FinallySubscriber(destination, callback) {\n        _super.call(this, destination);\n        this.add(new Subscription_1.Subscription(callback));\n    }\n    return FinallySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=finalize.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return function (source) { return source.lift(new ElementAtOperator(index, defaultValue)); };\n}\nexports.elementAt = elementAt;\nvar ElementAtOperator = (function () {\n    function ElementAtOperator(index, defaultValue) {\n        this.index = index;\n        this.defaultValue = defaultValue;\n        if (index < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    ElementAtOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n    };\n    return ElementAtOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ElementAtSubscriber = (function (_super) {\n    __extends(ElementAtSubscriber, _super);\n    function ElementAtSubscriber(destination, index, defaultValue) {\n        _super.call(this, destination);\n        this.index = index;\n        this.defaultValue = defaultValue;\n    }\n    ElementAtSubscriber.prototype._next = function (x) {\n        if (this.index-- === 0) {\n            this.destination.next(x);\n            this.destination.complete();\n        }\n    };\n    ElementAtSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index >= 0) {\n            if (typeof this.defaultValue !== 'undefined') {\n                destination.next(this.defaultValue);\n            }\n            else {\n                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);\n            }\n        }\n        destination.complete();\n    };\n    return ElementAtSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nfunction expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nexports.expand = expand;\nvar ExpandOperator = (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexports.ExpandOperator = ExpandOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExpandSubscriber = (function (_super) {\n    __extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        _super.call(this, destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this.active = 0;\n        this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            this.buffer = [];\n        }\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch_1.tryCatch(this.project)(value, index);\n            if (result === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.ExpandSubscriber = ExpandSubscriber;\n//# sourceMappingURL=expand.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nfunction exhaustMap(project, resultSelector) {\n    return function (source) { return source.lift(new SwitchFirstMapOperator(project, resultSelector)); };\n}\nexports.exhaustMap = exhaustMap;\nvar SwitchFirstMapOperator = (function () {\n    function SwitchFirstMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchFirstMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstMapSubscriber = (function (_super) {\n    __extends(SwitchFirstMapSubscriber, _super);\n    function SwitchFirstMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.hasSubscription = false;\n        this.hasCompleted = false;\n        this.index = 0;\n    }\n    SwitchFirstMapSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {\n        var index = this.index++;\n        var destination = this.destination;\n        try {\n            var result = this.project(value, index);\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        try {\n            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n            destination.next(result);\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=exhaustMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nfunction exhaust() {\n    return function (source) { return source.lift(new SwitchFirstOperator()); };\n}\nexports.exhaust = exhaust;\nvar SwitchFirstOperator = (function () {\n    function SwitchFirstOperator() {\n    }\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    };\n    return SwitchFirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstSubscriber = (function (_super) {\n    __extends(SwitchFirstSubscriber, _super);\n    function SwitchFirstSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasCompleted = false;\n        this.hasSubscription = false;\n    }\n    SwitchFirstSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, value));\n        }\n    };\n    SwitchFirstSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=exhaust.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nfunction tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nexports.tap = tap;\nvar DoOperator = (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = (function (_super) {\n    __extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=tap.js.map","\"use strict\";\nvar distinctUntilChanged_1 = require('./distinctUntilChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged_1.distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar Set_1 = require('../util/Set');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nexports.distinct = distinct;\nvar DistinctOperator = (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = (function (_super) {\n    __extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.values = new Set_1.Set();\n        if (flushes) {\n            this.add(subscribeToResult_1.subscribeToResult(this, flushes));\n        }\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.DistinctSubscriber = DistinctSubscriber;\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Observable_1 = require('../Observable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nexports.delayWhen = delayWhen;\nvar DelayWhenOperator = (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = (function (_super) {\n    __extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        _super.call(this, destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.values = [];\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = (function (_super) {\n    __extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(source, subscriptionDelay) {\n        _super.call(this);\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable_1.Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = (function (_super) {\n    __extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        _super.call(this);\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=delayWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteDelay = isDate_1.isDate(delay);\n    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };\n}\nexports.delay = delay;\nvar DelayOperator = (function () {\n    function DelayOperator(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    DelayOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    };\n    return DelayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = (function (_super) {\n    __extends(DelaySubscriber, _super);\n    function DelaySubscriber(destination, delay, scheduler) {\n        _super.call(this, destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.queue = [];\n        this.active = false;\n        this.errored = false;\n    }\n    DelaySubscriber.dispatch = function (state) {\n        var source = state.source;\n        var queue = source.queue;\n        var scheduler = state.scheduler;\n        var destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay_1);\n        }\n        else {\n            source.active = false;\n        }\n    };\n    DelaySubscriber.prototype._schedule = function (scheduler) {\n        this.active = true;\n        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    };\n    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n        if (this.errored === true) {\n            return;\n        }\n        var scheduler = this.scheduler;\n        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    };\n    DelaySubscriber.prototype._next = function (value) {\n        this.scheduleNotification(Notification_1.Notification.createNext(value));\n    };\n    DelaySubscriber.prototype._error = function (err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n    };\n    DelaySubscriber.prototype._complete = function () {\n        this.scheduleNotification(Notification_1.Notification.createComplete());\n    };\n    return DelaySubscriber;\n}(Subscriber_1.Subscriber));\nvar DelayMessage = (function () {\n    function DelayMessage(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n    return DelayMessage;\n}());\n//# sourceMappingURL=delay.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };\n}\nexports.debounceTime = debounceTime;\nvar DebounceTimeOperator = (function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = (function (_super) {\n    __extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        _super.call(this, destination);\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n        this.debouncedSubscription = null;\n        this.lastValue = null;\n        this.hasValue = false;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            this.destination.next(this.lastValue);\n            this.lastValue = null;\n            this.hasValue = false;\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };\n}\nexports.debounce = debounce;\nvar DebounceOperator = (function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = (function (_super) {\n    __extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n        this.durationSubscription = null;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult_1.subscribeToResult(this, duration);\n        if (!subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=debounce.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nfunction dematerialize() {\n    return function dematerializeOperatorFunction(source) {\n        return source.lift(new DeMaterializeOperator());\n    };\n}\nexports.dematerialize = dematerialize;\nvar DeMaterializeOperator = (function () {\n    function DeMaterializeOperator() {\n    }\n    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DeMaterializeSubscriber(subscriber));\n    };\n    return DeMaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DeMaterializeSubscriber = (function (_super) {\n    __extends(DeMaterializeSubscriber, _super);\n    function DeMaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    DeMaterializeSubscriber.prototype._next = function (value) {\n        value.observe(this.destination);\n    };\n    return DeMaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=dematerialize.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nexports.count = count;\nvar CountOperator = (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CountSubscriber = (function (_super) {\n    __extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.count = 0;\n        this.index = 0;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=count.js.map","\"use strict\";\nvar concatMap_1 = require('./concatMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nfunction concatMapTo(innerObservable, resultSelector) {\n    return concatMap_1.concatMap(function () { return innerObservable; }, resultSelector);\n}\nexports.concatMapTo = concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map","\"use strict\";\nvar concat_1 = require('../observable/concat');\nvar concat_2 = require('../observable/concat');\nexports.concatStatic = concat_2.concat;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(concat_1.concat.apply(void 0, [source].concat(observables))); };\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar combineLatest_1 = require('../operators/combineLatest');\nfunction combineAll(project) {\n    return function (source) { return source.lift(new combineLatest_1.CombineLatestOperator(project)); };\n}\nexports.combineAll = combineAll;\n//# sourceMappingURL=combineAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nfunction catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        var operator = new CatchOperator(selector);\n        var caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nexports.catchError = catchError;\nvar CatchOperator = (function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = (function (_super) {\n    __extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        _super.call(this, destination);\n        this.selector = selector;\n        this.caught = caught;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`. We can mimic the\n    // behavior of the RetrySubscriber (from the `retry` operator), where\n    // we unsubscribe from our source chain, reset our Subscriber flags,\n    // then subscribe to the selector result.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                _super.prototype.error.call(this, err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=catchError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nexports.bufferWhen = bufferWhen;\nvar BufferWhenOperator = (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = (function (_super) {\n    __extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.closingSelector = closingSelector;\n        this.subscribing = false;\n        this.openBuffer();\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription_1.Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=bufferWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nexports.bufferToggle = bufferToggle;\nvar BufferToggleOperator = (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = (function (_super) {\n    __extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(subscribeToResult_1.subscribeToResult(this, openings));\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            this.destination.next(context.buffer);\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription_1.Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=bufferToggle.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar Subscriber_1 = require('../Subscriber');\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async_1.async;\n    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nexports.bufferTime = bufferTime;\nvar BufferTimeOperator = (function () {\n    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    BufferTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    };\n    return BufferTimeOperator;\n}());\nvar Context = (function () {\n    function Context() {\n        this.buffer = [];\n    }\n    return Context;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferTimeSubscriber = (function (_super) {\n    __extends(BufferTimeSubscriber, _super);\n    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        _super.call(this, destination);\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n        this.contexts = [];\n        var context = this.openContext();\n        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (this.timespanOnly) {\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            var closeState = { subscriber: this, context: context };\n            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n    }\n    BufferTimeSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        var filledBufferContext;\n        for (var i = 0; i < len; i++) {\n            var context = contexts[i];\n            var buffer = context.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    };\n    BufferTimeSubscriber.prototype._error = function (err) {\n        this.contexts.length = 0;\n        _super.prototype._error.call(this, err);\n    };\n    BufferTimeSubscriber.prototype._complete = function () {\n        var _a = this, contexts = _a.contexts, destination = _a.destination;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            destination.next(context.buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferTimeSubscriber.prototype._unsubscribe = function () {\n        this.contexts = null;\n    };\n    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n        this.closeContext(context);\n        var closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            var bufferTimeSpan = this.bufferTimeSpan;\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    };\n    BufferTimeSubscriber.prototype.openContext = function () {\n        var context = new Context();\n        this.contexts.push(context);\n        return context;\n    };\n    BufferTimeSubscriber.prototype.closeContext = function (context) {\n        this.destination.next(context.buffer);\n        var contexts = this.contexts;\n        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    };\n    return BufferTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchBufferTimeSpanOnly(state) {\n    var subscriber = state.subscriber;\n    var prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n    var context = subscriber.openContext();\n    var action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    var subscriber = arg.subscriber, context = arg.context;\n    subscriber.closeContext(context);\n}\n//# sourceMappingURL=bufferTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nfunction bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nexports.bufferCount = bufferCount;\nvar BufferCountOperator = (function () {\n    function BufferCountOperator(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    BufferCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    };\n    return BufferCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferCountSubscriber = (function (_super) {\n    __extends(BufferCountSubscriber, _super);\n    function BufferCountSubscriber(destination, bufferSize) {\n        _super.call(this, destination);\n        this.bufferSize = bufferSize;\n        this.buffer = [];\n    }\n    BufferCountSubscriber.prototype._next = function (value) {\n        var buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    };\n    BufferCountSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferCountSubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSkipCountSubscriber = (function (_super) {\n    __extends(BufferSkipCountSubscriber, _super);\n    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n        _super.call(this, destination);\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        this.buffers = [];\n        this.count = 0;\n    }\n    BufferSkipCountSubscriber.prototype._next = function (value) {\n        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (var i = buffers.length; i--;) {\n            var buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    };\n    BufferSkipCountSubscriber.prototype._complete = function () {\n        var _a = this, buffers = _a.buffers, destination = _a.destination;\n        while (buffers.length > 0) {\n            var buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferSkipCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=bufferCount.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nfunction buffer(closingNotifier) {\n    return function bufferOperatorFunction(source) {\n        return source.lift(new BufferOperator(closingNotifier));\n    };\n}\nexports.buffer = buffer;\nvar BufferOperator = (function () {\n    function BufferOperator(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    BufferOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    };\n    return BufferOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSubscriber = (function (_super) {\n    __extends(BufferSubscriber, _super);\n    function BufferSubscriber(destination, closingNotifier) {\n        _super.call(this, destination);\n        this.buffer = [];\n        this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n    }\n    BufferSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    };\n    return BufferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=buffer.js.map","\"use strict\";\nvar QueueAction_1 = require('./QueueAction');\nvar QueueScheduler_1 = require('./QueueScheduler');\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);\n//# sourceMappingURL=queue.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../../util/root');\nvar tryCatch_1 = require('../../util/tryCatch');\nvar errorObject_1 = require('../../util/errorObject');\nvar Observable_1 = require('../../Observable');\nvar Subscriber_1 = require('../../Subscriber');\nvar map_1 = require('../../operators/map');\nfunction getCORSRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        return new root_1.root.XMLHttpRequest();\n    }\n    else if (!!root_1.root.XDomainRequest) {\n        return new root_1.root.XDomainRequest();\n    }\n    else {\n        throw new Error('CORS is not supported by your browser');\n    }\n}\nfunction getXMLHttpRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        return new root_1.root.XMLHttpRequest();\n    }\n    else {\n        var progId = void 0;\n        try {\n            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n            for (var i = 0; i < 3; i++) {\n                try {\n                    progId = progIds[i];\n                    if (new root_1.root.ActiveXObject(progId)) {\n                        break;\n                    }\n                }\n                catch (e) {\n                }\n            }\n            return new root_1.root.ActiveXObject(progId);\n        }\n        catch (e) {\n            throw new Error('XMLHttpRequest is not supported by your browser');\n        }\n    }\n}\nfunction ajaxGet(url, headers) {\n    if (headers === void 0) { headers = null; }\n    return new AjaxObservable({ method: 'GET', url: url, headers: headers });\n}\nexports.ajaxGet = ajaxGet;\n;\nfunction ajaxPost(url, body, headers) {\n    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });\n}\nexports.ajaxPost = ajaxPost;\n;\nfunction ajaxDelete(url, headers) {\n    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });\n}\nexports.ajaxDelete = ajaxDelete;\n;\nfunction ajaxPut(url, body, headers) {\n    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });\n}\nexports.ajaxPut = ajaxPut;\n;\nfunction ajaxPatch(url, body, headers) {\n    return new AjaxObservable({ method: 'PATCH', url: url, body: body, headers: headers });\n}\nexports.ajaxPatch = ajaxPatch;\n;\nvar mapResponse = map_1.map(function (x, index) { return x.response; });\nfunction ajaxGetJSON(url, headers) {\n    return mapResponse(new AjaxObservable({\n        method: 'GET',\n        url: url,\n        responseType: 'json',\n        headers: headers\n    }));\n}\nexports.ajaxGetJSON = ajaxGetJSON;\n;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar AjaxObservable = (function (_super) {\n    __extends(AjaxObservable, _super);\n    function AjaxObservable(urlOrRequest) {\n        _super.call(this);\n        var request = {\n            async: true,\n            createXHR: function () {\n                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n            },\n            crossDomain: false,\n            withCredentials: false,\n            headers: {},\n            method: 'GET',\n            responseType: 'json',\n            timeout: 0\n        };\n        if (typeof urlOrRequest === 'string') {\n            request.url = urlOrRequest;\n        }\n        else {\n            for (var prop in urlOrRequest) {\n                if (urlOrRequest.hasOwnProperty(prop)) {\n                    request[prop] = urlOrRequest[prop];\n                }\n            }\n        }\n        this.request = request;\n    }\n    AjaxObservable.prototype._subscribe = function (subscriber) {\n        return new AjaxSubscriber(subscriber, this.request);\n    };\n    /**\n     * Creates an observable for an Ajax request with either a request object with\n     * url, headers, etc or a string for a URL.\n     *\n     * @example\n     * source = Rx.Observable.ajax('/products');\n     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n     *\n     * @param {string|Object} request Can be one of the following:\n     *   A string of the URL to make the Ajax call.\n     *   An object with the following properties\n     *   - url: URL of the request\n     *   - body: The body of the request\n     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n     *   - async: Whether the request is async\n     *   - headers: Optional headers\n     *   - crossDomain: true if a cross domain request, else false\n     *   - createXHR: a function to override if you need to use an alternate\n     *   XMLHttpRequest implementation.\n     *   - resultSelector: a function to use to alter the output value type of\n     *   the Observable. Gets {@link AjaxResponse} as an argument.\n     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n     * @static true\n     * @name ajax\n     * @owner Observable\n    */\n    AjaxObservable.create = (function () {\n        var create = function (urlOrRequest) {\n            return new AjaxObservable(urlOrRequest);\n        };\n        create.get = ajaxGet;\n        create.post = ajaxPost;\n        create.delete = ajaxDelete;\n        create.put = ajaxPut;\n        create.patch = ajaxPatch;\n        create.getJSON = ajaxGetJSON;\n        return create;\n    })();\n    return AjaxObservable;\n}(Observable_1.Observable));\nexports.AjaxObservable = AjaxObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AjaxSubscriber = (function (_super) {\n    __extends(AjaxSubscriber, _super);\n    function AjaxSubscriber(destination, request) {\n        _super.call(this, destination);\n        this.request = request;\n        this.done = false;\n        var headers = request.headers = request.headers || {};\n        // force CORS if requested\n        if (!request.crossDomain && !headers['X-Requested-With']) {\n            headers['X-Requested-With'] = 'XMLHttpRequest';\n        }\n        // ensure content type is set\n        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {\n            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n        // properly serialize body\n        request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n        this.send();\n    }\n    AjaxSubscriber.prototype.next = function (e) {\n        this.done = true;\n        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;\n        var response = new AjaxResponse(e, xhr, request);\n        destination.next(response);\n    };\n    AjaxSubscriber.prototype.send = function () {\n        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;\n        var createXHR = request.createXHR;\n        var xhr = tryCatch_1.tryCatch(createXHR).call(request);\n        if (xhr === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            this.xhr = xhr;\n            // set up the events before open XHR\n            // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n            // You need to add the event listeners before calling open() on the request.\n            // Otherwise the progress events will not fire.\n            this.setupEvents(xhr, request);\n            // open XHR\n            var result = void 0;\n            if (user) {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n            }\n            else {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);\n            }\n            if (result === errorObject_1.errorObject) {\n                this.error(errorObject_1.errorObject.e);\n                return null;\n            }\n            // timeout, responseType and withCredentials can be set once the XHR is open\n            if (async) {\n                xhr.timeout = request.timeout;\n                xhr.responseType = request.responseType;\n            }\n            if ('withCredentials' in xhr) {\n                xhr.withCredentials = !!request.withCredentials;\n            }\n            // set headers\n            this.setHeaders(xhr, headers);\n            // finally send the request\n            result = body ? tryCatch_1.tryCatch(xhr.send).call(xhr, body) : tryCatch_1.tryCatch(xhr.send).call(xhr);\n            if (result === errorObject_1.errorObject) {\n                this.error(errorObject_1.errorObject.e);\n                return null;\n            }\n        }\n        return xhr;\n    };\n    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {\n        if (!body || typeof body === 'string') {\n            return body;\n        }\n        else if (root_1.root.FormData && body instanceof root_1.root.FormData) {\n            return body;\n        }\n        if (contentType) {\n            var splitIndex = contentType.indexOf(';');\n            if (splitIndex !== -1) {\n                contentType = contentType.substring(0, splitIndex);\n            }\n        }\n        switch (contentType) {\n            case 'application/x-www-form-urlencoded':\n                return Object.keys(body).map(function (key) { return (encodeURI(key) + \"=\" + encodeURI(body[key])); }).join('&');\n            case 'application/json':\n                return JSON.stringify(body);\n            default:\n                return body;\n        }\n    };\n    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {\n        for (var key in headers) {\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    };\n    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {\n        var progressSubscriber = request.progressSubscriber;\n        function xhrTimeout(e) {\n            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (progressSubscriber) {\n                progressSubscriber.error(e);\n            }\n            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n        }\n        ;\n        xhr.ontimeout = xhrTimeout;\n        xhrTimeout.request = request;\n        xhrTimeout.subscriber = this;\n        xhrTimeout.progressSubscriber = progressSubscriber;\n        if (xhr.upload && 'withCredentials' in xhr) {\n            if (progressSubscriber) {\n                var xhrProgress_1;\n                xhrProgress_1 = function (e) {\n                    var progressSubscriber = xhrProgress_1.progressSubscriber;\n                    progressSubscriber.next(e);\n                };\n                if (root_1.root.XDomainRequest) {\n                    xhr.onprogress = xhrProgress_1;\n                }\n                else {\n                    xhr.upload.onprogress = xhrProgress_1;\n                }\n                xhrProgress_1.progressSubscriber = progressSubscriber;\n            }\n            var xhrError_1;\n            xhrError_1 = function (e) {\n                var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;\n                if (progressSubscriber) {\n                    progressSubscriber.error(e);\n                }\n                subscriber.error(new AjaxError('ajax error', this, request));\n            };\n            xhr.onerror = xhrError_1;\n            xhrError_1.request = request;\n            xhrError_1.subscriber = this;\n            xhrError_1.progressSubscriber = progressSubscriber;\n        }\n        function xhrReadyStateChange(e) {\n            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (this.readyState === 4) {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status_1 = this.status === 1223 ? 204 : this.status;\n                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status_1 === 0) {\n                    status_1 = response ? 200 : 0;\n                }\n                if (200 <= status_1 && status_1 < 300) {\n                    if (progressSubscriber) {\n                        progressSubscriber.complete();\n                    }\n                    subscriber.next(e);\n                    subscriber.complete();\n                }\n                else {\n                    if (progressSubscriber) {\n                        progressSubscriber.error(e);\n                    }\n                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));\n                }\n            }\n        }\n        ;\n        xhr.onreadystatechange = xhrReadyStateChange;\n        xhrReadyStateChange.subscriber = this;\n        xhrReadyStateChange.progressSubscriber = progressSubscriber;\n        xhrReadyStateChange.request = request;\n    };\n    AjaxSubscriber.prototype.unsubscribe = function () {\n        var _a = this, done = _a.done, xhr = _a.xhr;\n        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n            xhr.abort();\n        }\n        _super.prototype.unsubscribe.call(this);\n    };\n    return AjaxSubscriber;\n}(Subscriber_1.Subscriber));\nexports.AjaxSubscriber = AjaxSubscriber;\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nvar AjaxResponse = (function () {\n    function AjaxResponse(originalEvent, xhr, request) {\n        this.originalEvent = originalEvent;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxResponse;\n}());\nexports.AjaxResponse = AjaxResponse;\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nvar AjaxError = (function (_super) {\n    __extends(AjaxError, _super);\n    function AjaxError(message, xhr, request) {\n        _super.call(this, message);\n        this.message = message;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxError;\n}(Error));\nexports.AjaxError = AjaxError;\nfunction parseXhrResponse(responseType, xhr) {\n    switch (responseType) {\n        case 'json':\n            if ('response' in xhr) {\n                //IE does not support json as responseType, parse it internally\n                return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n            }\n            else {\n                // HACK(benlesh): TypeScript shennanigans\n                // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n                return JSON.parse(xhr.responseText || 'null');\n            }\n        case 'xml':\n            return xhr.responseXML;\n        case 'text':\n        default:\n            // HACK(benlesh): TypeScript shennanigans\n            // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n            return ('response' in xhr) ? xhr.response : xhr.responseText;\n    }\n}\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nvar AjaxTimeoutError = (function (_super) {\n    __extends(AjaxTimeoutError, _super);\n    function AjaxTimeoutError(xhr, request) {\n        _super.call(this, 'ajax timeout', xhr, request);\n    }\n    return AjaxTimeoutError;\n}(AjaxError));\nexports.AjaxTimeoutError = AjaxTimeoutError;\n//# sourceMappingURL=AjaxObservable.js.map","\"use strict\";\nvar TimerObservable_1 = require('./TimerObservable');\nexports.timer = TimerObservable_1.TimerObservable.create;\n//# sourceMappingURL=timer.js.map","\"use strict\";\nfunction identity(x) {\n    return x;\n}\nexports.identity = identity;\n//# sourceMappingURL=identity.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PromiseObservable = (function (_super) {\n    __extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable_1.Observable));\nexports.PromiseObservable = PromiseObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n//# sourceMappingURL=PromiseObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar isArrayLike_1 = require('../util/isArrayLike');\nvar isPromise_1 = require('../util/isPromise');\nvar PromiseObservable_1 = require('./PromiseObservable');\nvar IteratorObservable_1 = require('./IteratorObservable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar ArrayLikeObservable_1 = require('./ArrayLikeObservable');\nvar iterator_1 = require('../symbol/iterator');\nvar Observable_1 = require('../Observable');\nvar observeOn_1 = require('../operators/observeOn');\nvar observable_1 = require('../symbol/observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable = (function (_super) {\n    __extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[observable_1.observable] === 'function') {\n                if (ish instanceof Observable_1.Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray_1.isArray(ish)) {\n                return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise_1.isPromise(ish)) {\n                return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike_1.isArrayLike(ish)) {\n                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[observable_1.observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable_1.Observable));\nexports.FromObservable = FromObservable;\n//# sourceMappingURL=FromObservable.js.map","\"use strict\";\nvar FromObservable_1 = require('./FromObservable');\nexports.from = FromObservable_1.FromObservable.create;\n//# sourceMappingURL=from.js.map","\"use strict\";\nvar ArrayObservable_1 = require('./ArrayObservable');\nexports.of = ArrayObservable_1.ArrayObservable.of;\n//# sourceMappingURL=of.js.map","\"use strict\";\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\nexports.isPromise = isPromise;\n//# sourceMappingURL=isPromise.js.map","\"use strict\";\nexports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArrayLike.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('./Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n//# sourceMappingURL=SubjectSubscription.js.map","\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n//# sourceMappingURL=UnsubscriptionError.js.map","\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n//# sourceMappingURL=isObject.js.map","export default class UsersService {\r\n    constructor() {\r\n        this.data = {}\r\n    }\r\n    static addUser(credentials) {\r\n        if (!credentials.id || !credentials.password) {\r\n            alert('Input username and password')\r\n            return Promise.reject()\r\n        } else {\r\n            return fetch(`http://localhost:3000/users?id=${credentials.id}`)\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res.length != 0) {\r\n                        alert('Username already exists')\r\n                        return Promise.reject()\r\n                    } else {\r\n                        credentials.subjects = []\r\n                        fetch('http://localhost:3000/users', {\r\n                                method: 'POST',\r\n                                body: JSON.stringify(credentials),\r\n                                headers: new Headers({\r\n                                    'Content-Type': 'application/json'\r\n                                })\r\n                            })\r\n                            .then(() => alert('Successful registration'))\r\n                    }\r\n                })\r\n        }\r\n    }\r\n    static checkUserExists(id) {\r\n        if (id != '') {\r\n            return fetch(`http://localhost:3000/users?id=${id}`)\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res.length != 0) {\r\n                        return Promise.resolve()\r\n                    } else {\r\n                        return Promise.reject()\r\n                    }\r\n                })\r\n        } else {\r\n            return Promise.resolve()\r\n        }\r\n    }\r\n\r\n    static checkUser(credentials) {\r\n        if (!credentials.id || !credentials.password) {\r\n            alert('Input username and password')\r\n            return Promise.reject()\r\n        } else {\r\n            return fetch(`http://localhost:3000/users?id=${credentials.id}&password=${credentials.password}`)\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res.length == 0) {\r\n                        alert('Wrong credentials')\r\n                        return Promise.reject()\r\n                    } else {\r\n                        alert('Successful login')\r\n                        return Promise.resolve(res[0])\r\n                    }\r\n                })\r\n        }\r\n    }\r\n    static setData(data) {\r\n        this.data = data\r\n    }\r\n    static getData() {\r\n        return this.data\r\n    }\r\n    static getSubjects() {\r\n        if (this.data)\r\n            return this.data.subjects\r\n    }\r\n    static getSuperUser() {\r\n        return this.data.superUser\r\n    }\r\n    static setSubjects(newSubjects) {\r\n        this.data.subjects = newSubjects\r\n    }\r\n    static updateUser() {\r\n        return fetch(`http://localhost:3000/users/${this.data.id}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(this.data),\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json'\r\n            })\r\n        })\r\n    }\r\n}","export default class FormatService {\r\n    static getFormat(subject) {\r\n        return fetch(`http://localhost:3000/formats?id=${subject.text}`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.length != 0) {\r\n                    return Promise.resolve(res[0])\r\n                } else {\r\n                    return Promise.reject()\r\n                }\r\n            })\r\n    }\r\n    static getFormatRegExp(regExp) {\r\n        return fetch(`http://localhost:3000/formats?id_like=^${regExp}`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.length != 0) {\r\n                    return Promise.resolve(res)\r\n                } else {\r\n                    return Promise.reject()\r\n                }\r\n            })\r\n    }\r\n    static getFormatAll() {\r\n        return fetch(`http://localhost:3000/formats`)\r\n            .then(res => res.json())\r\n            .then(res => Promise.resolve(res))\r\n    }\r\n    static postFormat(subject, user) {\r\n        return fetch(`http://localhost:3000/formats?id=${subject.text}`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.length != 0) {\r\n                    alert(\"Subject already exists\")\r\n                    return Promise.reject()\r\n                } else {\r\n                    fetch('http://localhost:3000/formats', {\r\n                        method: 'POST',\r\n                        body: JSON.stringify({\r\n                            id: subject.text,\r\n                            user: user,\r\n                            format: subject.scale.format\r\n                        }),\r\n                        headers: new Headers({\r\n                            'Content-Type': 'application/json'\r\n                        })\r\n                    })\r\n                }\r\n            })\r\n    }\r\n    static putFormat(subject, user) {\r\n        fetch(`http://localhost:3000/formats/${subject.text}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n                id: subject.text,\r\n                user: user,\r\n                format: subject.scale.format\r\n            }),\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json'\r\n            })\r\n        })\r\n    }\r\n    static deleteFormat(subject) {\r\n        fetch(`http://localhost:3000/formats/${subject.text}`, {\r\n            method: 'DELETE',\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json'\r\n            })\r\n        })\r\n    }\r\n}","export default class Assignments {\r\n    static getAssignments() {\r\n        const assignments = [{\r\n                text: 'Kolokv.',\r\n                color: '#b200ff'\r\n            },\r\n            {\r\n                text: 'Ispit',\r\n                color: 'green'\r\n            },\r\n            {\r\n                text: 'Lab',\r\n                color: 'red'\r\n            },\r\n            {\r\n                text: 'Projekat',\r\n                color: 'orange'\r\n            },\r\n            {\r\n                text: 'Domaci',\r\n                color: '#683b11'\r\n            },\r\n            {\r\n                text: 'Ostalo',\r\n                color: 'blue'\r\n            }\r\n        ]\r\n        return assignments\r\n    }\r\n    static findAssignment(key) {\r\n        let assignment = Assignments.getAssignments()\r\n            .find(element => element.text[0] == key)\r\n        if (assignment) {\r\n            return assignment\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n}","import Widgets from './widgets'\r\nimport Assignments from './assignments'\r\n\r\nexport default class Selector {\r\n    constructor(parent) {\r\n        this.selector = this.createSelector(parent)\r\n    }\r\n    getSelector() {\r\n        return this.selector\r\n    }\r\n    findAssignment(key) {\r\n        return Assignments.findAssignment(key)\r\n    }\r\n    createSelector(parent) {\r\n        const selector = Widgets.div(parent, 'selector')\r\n        selector.array = this.createAssignments(selector)\r\n        return selector\r\n    }\r\n    setActive(bool) {\r\n        this.selector.array.forEach(element => element.draggable = bool)\r\n    }\r\n    createAssignments(parent) {\r\n        const assignments = Assignments.getAssignments().map(assignment => {\r\n            const assignDiv = Widgets.div(parent, 'assignDiv')\r\n            assignDiv.id = assignment.text\r\n            assignDiv.innerHTML = `${assignment.text[0]} </br> ${assignment.text}`\r\n            assignDiv.style.color = assignment.color\r\n            assignDiv.data = assignment\r\n            assignDiv.draggable = true;\r\n            assignDiv.ondragstart = (ev) => {\r\n                ev.dataTransfer.setData('application/json', JSON.stringify(assignDiv.data))\r\n            }\r\n            return assignDiv\r\n        })\r\n        return assignments\r\n    }\r\n}","import Selector from './selector'\r\nimport Widgets from './widgets'\r\n\r\nexport default class Table {\r\n    constructor(parent) {\r\n        this.main = Widgets.div(parent, 'tableMain')\r\n\r\n        this.table = []\r\n        this.selectedBox = null\r\n        this.superUser = false\r\n\r\n        this.selector = new Selector(this.main)\r\n        this.tableDiv = this.createTable(this.main, 3, 10)\r\n        this.PointInput = this.createPointInput(this.main)\r\n        this.caluclateText = this.createCalculateText(this.main)\r\n        this.calculateButton = this.createCalculateButton(this.main)\r\n    }\r\n    getData() {\r\n        let generated = this.generateFormat()\r\n        let data = {\r\n            rows: this.table.length,\r\n            cols: this.table[0].length,\r\n            format: generated.format,\r\n            points: generated.points\r\n        }\r\n        return data\r\n    }\r\n    getEmptyScale() {\r\n        return {\r\n            rows: this.table.length,\r\n            cols: this.table[0].length,\r\n            format: ['XXXXXXXXXX', 'XXXXXXXXXX', 'XXXXXXXXXX']\r\n        }\r\n    }\r\n    updateData(data, superUser) {\r\n        this.calculateButton.hidden = superUser\r\n        this.superUser = superUser\r\n        this.selector.setActive(superUser)\r\n        for (let i = 0; i < data.rows; i++) {\r\n            let last = {}\r\n            for (let j = 0; j < data.cols; j++) {\r\n                if (data.format[i][j] != '+') {\r\n                    last = this.table[i][j]\r\n                    this.table[i][j].colSpan = '1'\r\n                    this.table[i][j].hidden = false\r\n                    this.table[i][j].history = []\r\n                    let reset\r\n                    let assignment = this.selector.findAssignment(data.format[i][j])\r\n                    if (assignment) {\r\n                        this.table[i][j].data = assignment\r\n                        if (data.points && data.points[i][j] != 'X') {\r\n                            this.table[i][j].points = data.points[i][j]\r\n                            this.table[i][j].lowerText.innerHTML = this.table[i][j].points\r\n                        } else {\r\n                            this.table[i][j].points = 0\r\n                            if (superUser) {\r\n                                this.table[i][j].lowerText.innerHTML = ''\r\n                            } else {\r\n                                this.table[i][j].lowerText.innerHTML = 0\r\n                            }\r\n                        }\r\n                        if (this.superUser) {\r\n                            this.table[i][j].ondragstart = (ev) => {\r\n                                ev.dataTransfer.setData('application/json', JSON.stringify(this.table[i][j].data))\r\n                            }\r\n                            this.table[i][j].ondragend = (ev) => {\r\n                                this.updateBox(this.table[i][j], `X${this.table[i][j].code.slice(1)}`, true)\r\n                                this.deselectPointInput()\r\n                            }\r\n                        }\r\n                        this.updateBox(this.table[i][j], assignment.text[0], false)\r\n\r\n                    } else {\r\n                        this.updateBox(this.table[i][j], 'X', true)\r\n                    }\r\n                } else {\r\n                    let oldSpan = parseInt(last.colSpan)\r\n                    last.colSpan = `${oldSpan + 1}`\r\n                    last.points = parseFloat(((last.points / oldSpan) * (oldSpan + 1)).toFixed(2))\r\n                    if (!superUser) {\r\n                        last.lowerText.innerHTML = last.points\r\n                    }\r\n                    last.code += '+'\r\n                    last.history.push('hide')\r\n                    this.table[i][j].colSpan = '1'\r\n                    this.updateBox(this.table[i][j], '', true)\r\n                    this.table[i][j].hidden = true\r\n                    this.table[i][j].history = []\r\n                }\r\n            }\r\n        }\r\n    }\r\n    createTable(parent, rowNum, colNum) {\r\n        const tableDiv = document.createElement('table')\r\n        let row\r\n        let header\r\n        row = document.createElement('tr')\r\n        tableDiv.appendChild(row)\r\n        for (let i = 0; i < colNum; i++) {\r\n            header = document.createElement('th')\r\n            row.appendChild(header)\r\n        }\r\n        for (let i = 0; i < rowNum; i++) {\r\n            row = document.createElement('tr')\r\n            this.table[i] = []\r\n            for (let j = 0; j < colNum; j++) {\r\n                this.table[i][j] = this.createCell(i, j)\r\n                row.appendChild(this.table[i][j])\r\n            }\r\n            tableDiv.appendChild(row)\r\n        }\r\n        parent.appendChild(tableDiv)\r\n        return tableDiv\r\n    }\r\n    createCell(i, j) {\r\n        const newCell = document.createElement('td')\r\n        newCell.id = `cell${i}${j}`\r\n        newCell.history = []\r\n        newCell.upperText = Widgets.div(newCell, 'upperText')\r\n        newCell.lowerText = Widgets.div(newCell, 'lowerText')\r\n        newCell.controls = this.addControls(newCell, i, j)\r\n        this.updateBox(newCell, 'X', true)\r\n        newCell.onclick = () => {\r\n            if (this.superUser) {\r\n                const prevState = newCell.controls.hidden\r\n                this.deselectControls()\r\n                newCell.controls.hidden = !prevState\r\n            } else if (newCell.data) {\r\n                let oldCell = this.selectedBox\r\n                this.deselectCell(this.selectedBox)\r\n                if (oldCell != newCell) {\r\n                    this.selectedBox = newCell\r\n                    this.PointInput.hidden = false\r\n                    this.selectCell(newCell)\r\n                }\r\n            }\r\n        }\r\n        newCell.ondragover = (ev) => {\r\n            ev.preventDefault()\r\n        }\r\n        newCell.ondrop = (ev) => {\r\n            if (this.superUser) {\r\n                ev.preventDefault()\r\n                const cellData = JSON.parse(ev.dataTransfer.getData('application/json'))\r\n                newCell.data = cellData\r\n                this.updateBox(newCell, `${cellData.text[0]}${newCell.code.slice(1)}`, false)\r\n                newCell.ondragstart = (ev) => {\r\n                    ev.dataTransfer.setData('application/json', JSON.stringify(newCell.data))\r\n                }\r\n                newCell.ondragend = (ev) => {\r\n                    this.updateBox(newCell, `X${newCell.code.slice(1)}`, true)\r\n                    this.deselectPointInput()\r\n                }\r\n            }\r\n        }\r\n        return newCell\r\n    }\r\n    generateFormat() {\r\n        let format = []\r\n        let points = []\r\n        for (let i = 0; i < this.table.length; i++) {\r\n            format[i] = ''\r\n            points[i] = []\r\n            for (let j = 0; j < this.table[i].length; j++) {\r\n                if (this.table[i][j].points) {\r\n                    let span = parseInt(this.table[i][j].colSpan)\r\n                    points[i][j] = this.table[i][j].points / span\r\n                } else {\r\n                    points[i][j] = 'X'\r\n                }\r\n                if (!this.table[i][j].hidden) {\r\n                    format[i] += this.table[i][j].code\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            format: format,\r\n            points: points\r\n        }\r\n    }\r\n\r\n    addControls(parent, x, y) {\r\n        let oldSpan = {}\r\n        const controlsDiv = Widgets.div(parent, 'controlsDiv')\r\n        const enlargeControl = Widgets.div(controlsDiv, 'enlargeControl')\r\n        enlargeControl.onclick = (ev) => {\r\n            if (x != this.table[0].length - 1) {\r\n                let nextElement = this.findNextCell(x, y)\r\n                oldSpan = parseInt(this.table[x][y].colSpan)\r\n                if (nextElement) {\r\n                    if (nextElement.colSpan == '1') {\r\n                        nextElement.hidden = true\r\n                        nextElement.code = ''\r\n                        parent.history.push({\r\n                            oper: 'hide',\r\n                            target: nextElement\r\n                        })\r\n                    } else {\r\n                        let oldSpanNext = parseInt(nextElement.colSpan)\r\n                        nextElement.colSpan = `${oldSpanNext - 1}`\r\n                        this.modifyPoints(nextElement, oldSpanNext, (span) => span - 1)\r\n                        nextElement.code = nextElement.code.slice(0, -1)\r\n                        parent.history.push({\r\n                            oper: 'borrow',\r\n                            target: nextElement\r\n                        })\r\n                    }\r\n                    this.table[x][y].colSpan = `${oldSpan+1}`\r\n                    this.table[x][y].code += '+'\r\n                    this.modifyPoints(this.table[x][y], oldSpan, (span) => span + 1)\r\n                }\r\n            }\r\n            ev.cancelBubble = true\r\n        }\r\n\r\n        const reduceControl = Widgets.div(controlsDiv, 'reduceControl')\r\n        reduceControl.onclick = (ev) => {\r\n            if (parent.colSpan != '1') {\r\n                oldSpan = parseInt(this.table[x][y].colSpan)\r\n                let lastMove = parent.history.pop()\r\n                if (lastMove.oper == 'hide') {\r\n                    lastMove.target.hidden = false\r\n                    if (lastMove.target.data) {\r\n                        lastMove.target.code = lastMove.target.data.text[0]\r\n                    } else {\r\n                        lastMove.target.code = 'X'\r\n                    }\r\n                } else if (lastMove.oper == 'borrow') {\r\n                    let oldSpanNext = parseInt(lastMove.target.colSpan)\r\n                    lastMove.target.colSpan = `${oldSpanNext + 1}`\r\n                    lastMove.target.code += '+'\r\n                    this.modifyPoints(lastMove.target, oldSpanNext, (span) => span + 1)\r\n                } else {\r\n                    let prev = this.table[x][y + oldSpan - 1]\r\n                    prev.hidden = false\r\n                    if (prev.data) {\r\n                        prev.code = prev.data.text[0]\r\n                    } else {\r\n                        prev.code = 'X'\r\n                    }\r\n                }\r\n                this.table[x][y].colSpan = `${oldSpan - 1}`\r\n                this.table[x][y].code = this.table[x][y].code.slice(0, -1)\r\n                this.modifyPoints(this.table[x][y], oldSpan, (span) => span - 1)\r\n            }\r\n            ev.cancelBubble = true\r\n        }\r\n        controlsDiv.hidden = true\r\n        return controlsDiv\r\n    }\r\n    findNextCell(x, y) {\r\n        let a = x\r\n        let b = y + 1\r\n        while (b < this.table[a].length && this.table[a][b].hidden == true) {\r\n            b++\r\n        }\r\n        return this.table[a][b]\r\n    }\r\n    modifyPoints(cell, oldSpan, operation) {\r\n        if (cell.points) {\r\n            const newSpan = operation(oldSpan)\r\n            cell.points = parseFloat(((newSpan * cell.points) / oldSpan).toFixed(2))\r\n            cell.lowerText.innerHTML = cell.points\r\n        }\r\n    }\r\n    updateBox(element, code, reset) {\r\n        if (!reset) {\r\n            element.code = code\r\n            element.style.color = element.data.color\r\n            element.style.borderColor = element.data.color\r\n            element.upperText.innerHTML = element.data.text[0]\r\n            element.draggable = true && this.superUser\r\n        } else {\r\n            element.code = code\r\n            element.data = null\r\n            element.style.color = 'slateblue'\r\n            element.style.borderColor = 'slateblue'\r\n            element.upperText.innerHTML = ''\r\n            element.lowerText.innerHTML = ''\r\n            element.points = 0\r\n            element.draggable = false\r\n        }\r\n    }\r\n    createPointInput(parent) {\r\n        const pointDiv = Widgets.div(parent, 'pointDiv')\r\n        pointDiv.pointInput = Widgets.inputDiv(pointDiv, 'text', 'Earned points')\r\n        pointDiv.maxInput = Widgets.inputDiv(pointDiv, 'text', 'Maximum possible points')\r\n        pointDiv.submitButton = Widgets.button(pointDiv, 'Submit')\r\n        pointDiv.cancelButton = Widgets.button(pointDiv, 'Cancel')\r\n        pointDiv.hidden = true\r\n        pointDiv.submitButton.onclick = () => {\r\n            if (this.selectedBox.data) {\r\n                let colSpan = parseInt(this.selectedBox.colSpan)\r\n                let point = parseInt(pointDiv.pointInput.input.value)\r\n                let max = parseInt(pointDiv.maxInput.input.value)\r\n                if (!isNaN(point) && !isNaN(max) && point >= 0 && max != 0 && max >= point) {\r\n                    this.selectedBox.points = parseFloat((((point * 100 / max) / 100) * 10 * colSpan).toFixed(2))\r\n                    this.selectedBox.lowerText.innerHTML = this.selectedBox.points\r\n                    this.deselectCell(this.selectedBox)\r\n                } else {\r\n                    alert('invalid input')\r\n                }\r\n            } else {\r\n                this.deselectCell(this.selectedBox)\r\n            }\r\n        }\r\n        pointDiv.cancelButton.onclick = () => {\r\n            this.deselectCell(this.selectedBox)\r\n        }\r\n        return pointDiv\r\n    }\r\n    createCalculateText(parent) {\r\n        const text = Widgets.div(parent, 'markDiv')\r\n        return text\r\n    }\r\n    createCalculateButton(parent) {\r\n        const calcButton = Widgets.button(parent, 'Calculate')\r\n        calcButton.onclick = () => {\r\n            let max = 0\r\n            let rowValue\r\n            for (let i = 0; i < this.table.length; i++) {\r\n                rowValue = this.table[i]\r\n                    .filter(element => element.points && !element.hidden)\r\n                    .reduce((acc, element) => acc + parseFloat(element.points), 0)\r\n                if (rowValue > max) {\r\n                    max = rowValue\r\n                }\r\n            }\r\n            this.caluclateText.hidden = false\r\n            this.caluclateText.innerHTML = `Osvojeno poena: ${max}`\r\n        }\r\n        return calcButton\r\n    }\r\n    selectCell(pointDiv) {\r\n        let color = pointDiv.style.color\r\n        pointDiv.style.color = \"white\"\r\n        pointDiv.style.backgroundColor = color\r\n        pointDiv.style.borderColor = \"white\"\r\n    }\r\n    deselectCell(pointDiv) {\r\n        if (pointDiv) {\r\n            let color = pointDiv.style.backgroundColor\r\n            pointDiv.style.color = color\r\n            pointDiv.style.backgroundColor = \"white\"\r\n            pointDiv.style.borderColor = color\r\n            this.selectedBox = null\r\n            this.deselectPointInput()\r\n        }\r\n    }\r\n    deselectControls() {\r\n        for (let i = 0; i < this.table.length; i++) {\r\n            for (let j = 0; j < this.table[i].length; j++) {\r\n                this.table[i][j].controls.hidden = true\r\n            }\r\n        }\r\n    }\r\n    deselectPointInput() {\r\n        this.PointInput.hidden = true\r\n        this.PointInput.pointInput.input.value = ''\r\n        this.PointInput.maxInput.input.value = ''\r\n    }\r\n    deselectAll() {\r\n        this.deselectControls()\r\n        this.deselectPointInput()\r\n        this.deselectCell(this.selectedBox)\r\n        this.caluclateText.hidden = true\r\n    }\r\n\r\n}","\"use strict\";\nvar audit_1 = require('./operators/audit');\nexports.audit = audit_1.audit;\nvar auditTime_1 = require('./operators/auditTime');\nexports.auditTime = auditTime_1.auditTime;\nvar buffer_1 = require('./operators/buffer');\nexports.buffer = buffer_1.buffer;\nvar bufferCount_1 = require('./operators/bufferCount');\nexports.bufferCount = bufferCount_1.bufferCount;\nvar bufferTime_1 = require('./operators/bufferTime');\nexports.bufferTime = bufferTime_1.bufferTime;\nvar bufferToggle_1 = require('./operators/bufferToggle');\nexports.bufferToggle = bufferToggle_1.bufferToggle;\nvar bufferWhen_1 = require('./operators/bufferWhen');\nexports.bufferWhen = bufferWhen_1.bufferWhen;\nvar catchError_1 = require('./operators/catchError');\nexports.catchError = catchError_1.catchError;\nvar combineAll_1 = require('./operators/combineAll');\nexports.combineAll = combineAll_1.combineAll;\nvar combineLatest_1 = require('./operators/combineLatest');\nexports.combineLatest = combineLatest_1.combineLatest;\nvar concat_1 = require('./operators/concat');\nexports.concat = concat_1.concat;\nvar concatAll_1 = require('./operators/concatAll');\nexports.concatAll = concatAll_1.concatAll;\nvar concatMap_1 = require('./operators/concatMap');\nexports.concatMap = concatMap_1.concatMap;\nvar concatMapTo_1 = require('./operators/concatMapTo');\nexports.concatMapTo = concatMapTo_1.concatMapTo;\nvar count_1 = require('./operators/count');\nexports.count = count_1.count;\nvar debounce_1 = require('./operators/debounce');\nexports.debounce = debounce_1.debounce;\nvar debounceTime_1 = require('./operators/debounceTime');\nexports.debounceTime = debounceTime_1.debounceTime;\nvar defaultIfEmpty_1 = require('./operators/defaultIfEmpty');\nexports.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\nvar delay_1 = require('./operators/delay');\nexports.delay = delay_1.delay;\nvar delayWhen_1 = require('./operators/delayWhen');\nexports.delayWhen = delayWhen_1.delayWhen;\nvar dematerialize_1 = require('./operators/dematerialize');\nexports.dematerialize = dematerialize_1.dematerialize;\nvar distinct_1 = require('./operators/distinct');\nexports.distinct = distinct_1.distinct;\nvar distinctUntilChanged_1 = require('./operators/distinctUntilChanged');\nexports.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\nvar distinctUntilKeyChanged_1 = require('./operators/distinctUntilKeyChanged');\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\nvar elementAt_1 = require('./operators/elementAt');\nexports.elementAt = elementAt_1.elementAt;\nvar every_1 = require('./operators/every');\nexports.every = every_1.every;\nvar exhaust_1 = require('./operators/exhaust');\nexports.exhaust = exhaust_1.exhaust;\nvar exhaustMap_1 = require('./operators/exhaustMap');\nexports.exhaustMap = exhaustMap_1.exhaustMap;\nvar expand_1 = require('./operators/expand');\nexports.expand = expand_1.expand;\nvar filter_1 = require('./operators/filter');\nexports.filter = filter_1.filter;\nvar finalize_1 = require('./operators/finalize');\nexports.finalize = finalize_1.finalize;\nvar find_1 = require('./operators/find');\nexports.find = find_1.find;\nvar findIndex_1 = require('./operators/findIndex');\nexports.findIndex = findIndex_1.findIndex;\nvar first_1 = require('./operators/first');\nexports.first = first_1.first;\nvar groupBy_1 = require('./operators/groupBy');\nexports.groupBy = groupBy_1.groupBy;\nvar ignoreElements_1 = require('./operators/ignoreElements');\nexports.ignoreElements = ignoreElements_1.ignoreElements;\nvar isEmpty_1 = require('./operators/isEmpty');\nexports.isEmpty = isEmpty_1.isEmpty;\nvar last_1 = require('./operators/last');\nexports.last = last_1.last;\nvar map_1 = require('./operators/map');\nexports.map = map_1.map;\nvar mapTo_1 = require('./operators/mapTo');\nexports.mapTo = mapTo_1.mapTo;\nvar materialize_1 = require('./operators/materialize');\nexports.materialize = materialize_1.materialize;\nvar max_1 = require('./operators/max');\nexports.max = max_1.max;\nvar merge_1 = require('./operators/merge');\nexports.merge = merge_1.merge;\nvar mergeAll_1 = require('./operators/mergeAll');\nexports.mergeAll = mergeAll_1.mergeAll;\nvar mergeMap_1 = require('./operators/mergeMap');\nexports.mergeMap = mergeMap_1.mergeMap;\nvar mergeMap_2 = require('./operators/mergeMap');\nexports.flatMap = mergeMap_2.mergeMap;\nvar mergeMapTo_1 = require('./operators/mergeMapTo');\nexports.mergeMapTo = mergeMapTo_1.mergeMapTo;\nvar mergeScan_1 = require('./operators/mergeScan');\nexports.mergeScan = mergeScan_1.mergeScan;\nvar min_1 = require('./operators/min');\nexports.min = min_1.min;\nvar multicast_1 = require('./operators/multicast');\nexports.multicast = multicast_1.multicast;\nvar observeOn_1 = require('./operators/observeOn');\nexports.observeOn = observeOn_1.observeOn;\nvar onErrorResumeNext_1 = require('./operators/onErrorResumeNext');\nexports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\nvar pairwise_1 = require('./operators/pairwise');\nexports.pairwise = pairwise_1.pairwise;\nvar partition_1 = require('./operators/partition');\nexports.partition = partition_1.partition;\nvar pluck_1 = require('./operators/pluck');\nexports.pluck = pluck_1.pluck;\nvar publish_1 = require('./operators/publish');\nexports.publish = publish_1.publish;\nvar publishBehavior_1 = require('./operators/publishBehavior');\nexports.publishBehavior = publishBehavior_1.publishBehavior;\nvar publishLast_1 = require('./operators/publishLast');\nexports.publishLast = publishLast_1.publishLast;\nvar publishReplay_1 = require('./operators/publishReplay');\nexports.publishReplay = publishReplay_1.publishReplay;\nvar race_1 = require('./operators/race');\nexports.race = race_1.race;\nvar reduce_1 = require('./operators/reduce');\nexports.reduce = reduce_1.reduce;\nvar repeat_1 = require('./operators/repeat');\nexports.repeat = repeat_1.repeat;\nvar repeatWhen_1 = require('./operators/repeatWhen');\nexports.repeatWhen = repeatWhen_1.repeatWhen;\nvar retry_1 = require('./operators/retry');\nexports.retry = retry_1.retry;\nvar retryWhen_1 = require('./operators/retryWhen');\nexports.retryWhen = retryWhen_1.retryWhen;\nvar refCount_1 = require('./operators/refCount');\nexports.refCount = refCount_1.refCount;\nvar sample_1 = require('./operators/sample');\nexports.sample = sample_1.sample;\nvar sampleTime_1 = require('./operators/sampleTime');\nexports.sampleTime = sampleTime_1.sampleTime;\nvar scan_1 = require('./operators/scan');\nexports.scan = scan_1.scan;\nvar sequenceEqual_1 = require('./operators/sequenceEqual');\nexports.sequenceEqual = sequenceEqual_1.sequenceEqual;\nvar share_1 = require('./operators/share');\nexports.share = share_1.share;\nvar shareReplay_1 = require('./operators/shareReplay');\nexports.shareReplay = shareReplay_1.shareReplay;\nvar single_1 = require('./operators/single');\nexports.single = single_1.single;\nvar skip_1 = require('./operators/skip');\nexports.skip = skip_1.skip;\nvar skipLast_1 = require('./operators/skipLast');\nexports.skipLast = skipLast_1.skipLast;\nvar skipUntil_1 = require('./operators/skipUntil');\nexports.skipUntil = skipUntil_1.skipUntil;\nvar skipWhile_1 = require('./operators/skipWhile');\nexports.skipWhile = skipWhile_1.skipWhile;\nvar startWith_1 = require('./operators/startWith');\nexports.startWith = startWith_1.startWith;\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nvar switchAll_1 = require('./operators/switchAll');\nexports.switchAll = switchAll_1.switchAll;\nvar switchMap_1 = require('./operators/switchMap');\nexports.switchMap = switchMap_1.switchMap;\nvar switchMapTo_1 = require('./operators/switchMapTo');\nexports.switchMapTo = switchMapTo_1.switchMapTo;\nvar take_1 = require('./operators/take');\nexports.take = take_1.take;\nvar takeLast_1 = require('./operators/takeLast');\nexports.takeLast = takeLast_1.takeLast;\nvar takeUntil_1 = require('./operators/takeUntil');\nexports.takeUntil = takeUntil_1.takeUntil;\nvar takeWhile_1 = require('./operators/takeWhile');\nexports.takeWhile = takeWhile_1.takeWhile;\nvar tap_1 = require('./operators/tap');\nexports.tap = tap_1.tap;\nvar throttle_1 = require('./operators/throttle');\nexports.throttle = throttle_1.throttle;\nvar throttleTime_1 = require('./operators/throttleTime');\nexports.throttleTime = throttleTime_1.throttleTime;\nvar timeInterval_1 = require('./operators/timeInterval');\nexports.timeInterval = timeInterval_1.timeInterval;\nvar timeout_1 = require('./operators/timeout');\nexports.timeout = timeout_1.timeout;\nvar timeoutWith_1 = require('./operators/timeoutWith');\nexports.timeoutWith = timeoutWith_1.timeoutWith;\nvar timestamp_1 = require('./operators/timestamp');\nexports.timestamp = timestamp_1.timestamp;\nvar toArray_1 = require('./operators/toArray');\nexports.toArray = toArray_1.toArray;\nvar window_1 = require('./operators/window');\nexports.window = window_1.window;\nvar windowCount_1 = require('./operators/windowCount');\nexports.windowCount = windowCount_1.windowCount;\nvar windowTime_1 = require('./operators/windowTime');\nexports.windowTime = windowTime_1.windowTime;\nvar windowToggle_1 = require('./operators/windowToggle');\nexports.windowToggle = windowToggle_1.windowToggle;\nvar windowWhen_1 = require('./operators/windowWhen');\nexports.windowWhen = windowWhen_1.windowWhen;\nvar withLatestFrom_1 = require('./operators/withLatestFrom');\nexports.withLatestFrom = withLatestFrom_1.withLatestFrom;\nvar zip_1 = require('./operators/zip');\nexports.zip = zip_1.zip;\nvar zipAll_1 = require('./operators/zipAll');\nexports.zipAll = zipAll_1.zipAll;\n//# sourceMappingURL=operators.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar AnimationFrameScheduler = (function (_super) {\n    __extends(AnimationFrameScheduler, _super);\n    function AnimationFrameScheduler() {\n        _super.apply(this, arguments);\n    }\n    AnimationFrameScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AnimationFrameScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AnimationFrameScheduler = AnimationFrameScheduler;\n//# sourceMappingURL=AnimationFrameScheduler.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar RequestAnimationFrameDefinition = (function () {\n    function RequestAnimationFrameDefinition(root) {\n        if (root.requestAnimationFrame) {\n            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n        }\n        else if (root.mozRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n        }\n        else if (root.webkitRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n        }\n        else if (root.msRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n        }\n        else if (root.oRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n        }\n        else {\n            this.cancelAnimationFrame = root.clearTimeout.bind(root);\n            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };\n        }\n    }\n    return RequestAnimationFrameDefinition;\n}());\nexports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;\nexports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);\n//# sourceMappingURL=AnimationFrame.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\nvar AnimationFrame_1 = require('../util/AnimationFrame');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AnimationFrameAction = (function (_super) {\n    __extends(AnimationFrameAction, _super);\n    function AnimationFrameAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If an animation frame has already been requested, don't request another\n        // one. If an animation frame hasn't been requested yet, request one. Return\n        // the current animation frame request id.\n        return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));\n    };\n    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested animation frame and\n        // set the scheduled flag to undefined so the next AnimationFrameAction will\n        // request its own.\n        if (scheduler.actions.length === 0) {\n            AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AnimationFrameAction;\n}(AsyncAction_1.AsyncAction));\nexports.AnimationFrameAction = AnimationFrameAction;\n//# sourceMappingURL=AnimationFrameAction.js.map","\"use strict\";\nvar AnimationFrameAction_1 = require('./AnimationFrameAction');\nvar AnimationFrameScheduler_1 = require('./AnimationFrameScheduler');\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\nexports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);\n//# sourceMappingURL=animationFrame.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Subscription_1 = require('../Subscription');\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar HotObservable = (function (_super) {\n    __extends(HotObservable, _super);\n    function HotObservable(messages, scheduler) {\n        _super.call(this);\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    HotObservable.prototype._subscribe = function (subscriber) {\n        var subject = this;\n        var index = subject.logSubscribedFrame();\n        subscriber.add(new Subscription_1.Subscription(function () {\n            subject.logUnsubscribedFrame(index);\n        }));\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    HotObservable.prototype.setup = function () {\n        var subject = this;\n        var messagesLength = subject.messages.length;\n        /* tslint:disable:no-var-keyword */\n        for (var i = 0; i < messagesLength; i++) {\n            (function () {\n                var message = subject.messages[i];\n                /* tslint:enable */\n                subject.scheduler.schedule(function () { message.notification.observe(subject); }, message.frame);\n            })();\n        }\n    };\n    return HotObservable;\n}(Subject_1.Subject));\nexports.HotObservable = HotObservable;\napplyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n//# sourceMappingURL=HotObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Subscription_1 = require('../Subscription');\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ColdObservable = (function (_super) {\n    __extends(ColdObservable, _super);\n    function ColdObservable(messages, scheduler) {\n        _super.call(this, function (subscriber) {\n            var observable = this;\n            var index = observable.logSubscribedFrame();\n            subscriber.add(new Subscription_1.Subscription(function () {\n                observable.logUnsubscribedFrame(index);\n            }));\n            observable.scheduleMessages(subscriber);\n            return subscriber;\n        });\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    ColdObservable.prototype.scheduleMessages = function (subscriber) {\n        var messagesLength = this.messages.length;\n        for (var i = 0; i < messagesLength; i++) {\n            var message = this.messages[i];\n            subscriber.add(this.scheduler.schedule(function (_a) {\n                var message = _a.message, subscriber = _a.subscriber;\n                message.notification.observe(subscriber);\n            }, message.frame, { message: message, subscriber: subscriber }));\n        }\n    };\n    return ColdObservable;\n}(Observable_1.Observable));\nexports.ColdObservable = ColdObservable;\napplyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n//# sourceMappingURL=ColdObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Notification_1 = require('../Notification');\nvar ColdObservable_1 = require('./ColdObservable');\nvar HotObservable_1 = require('./HotObservable');\nvar SubscriptionLog_1 = require('./SubscriptionLog');\nvar VirtualTimeScheduler_1 = require('../scheduler/VirtualTimeScheduler');\nvar defaultMaxFrame = 750;\nvar TestScheduler = (function (_super) {\n    __extends(TestScheduler, _super);\n    function TestScheduler(assertDeepEqual) {\n        _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);\n        this.assertDeepEqual = assertDeepEqual;\n        this.hotObservables = [];\n        this.coldObservables = [];\n        this.flushTests = [];\n    }\n    TestScheduler.prototype.createTime = function (marbles) {\n        var indexOf = marbles.indexOf('|');\n        if (indexOf === -1) {\n            throw new Error('marble diagram for time should have a completion marker \"|\"');\n        }\n        return indexOf * TestScheduler.frameTimeFactor;\n    };\n    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n        if (marbles.indexOf('^') !== -1) {\n            throw new Error('cold observable cannot have subscription offset \"^\"');\n        }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('cold observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var cold = new ColdObservable_1.ColdObservable(messages, this);\n        this.coldObservables.push(cold);\n        return cold;\n    };\n    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('hot observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var subject = new HotObservable_1.HotObservable(messages, this);\n        this.hotObservables.push(subject);\n        return subject;\n    };\n    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n        var _this = this;\n        var messages = [];\n        observable.subscribe(function (value) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });\n        }, function (err) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });\n        }, function () {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });\n        });\n        return messages;\n    };\n    TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {\n        var _this = this;\n        if (unsubscriptionMarbles === void 0) { unsubscriptionMarbles = null; }\n        var actual = [];\n        var flushTest = { actual: actual, ready: false };\n        var unsubscriptionFrame = TestScheduler\n            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n        var subscription;\n        this.schedule(function () {\n            subscription = observable.subscribe(function (x) {\n                var value = x;\n                // Support Observable-of-Observables\n                if (x instanceof Observable_1.Observable) {\n                    value = _this.materializeInnerObservable(value, _this.frame);\n                }\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });\n            }, function (err) {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });\n            }, function () {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });\n            });\n        }, 0);\n        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);\n        }\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles, values, errorValue) {\n                flushTest.ready = true;\n                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n            }\n        };\n    };\n    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n        var flushTest = { actual: actualSubscriptionLogs, ready: false };\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles) {\n                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n                flushTest.ready = true;\n                flushTest.expected = marblesArray.map(function (marbles) {\n                    return TestScheduler.parseMarblesAsSubscriptions(marbles);\n                });\n            }\n        };\n    };\n    TestScheduler.prototype.flush = function () {\n        var hotObservables = this.hotObservables;\n        while (hotObservables.length > 0) {\n            hotObservables.shift().setup();\n        }\n        _super.prototype.flush.call(this);\n        var readyFlushTests = this.flushTests.filter(function (test) { return test.ready; });\n        while (readyFlushTests.length > 0) {\n            var test = readyFlushTests.shift();\n            this.assertDeepEqual(test.actual, test.expected);\n        }\n    };\n    TestScheduler.parseMarblesAsSubscriptions = function (marbles) {\n        if (typeof marbles !== 'string') {\n            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);\n        }\n        var len = marbles.length;\n        var groupStart = -1;\n        var subscriptionFrame = Number.POSITIVE_INFINITY;\n        var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '^':\n                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                case '!':\n                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                default:\n                    throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n            }\n        }\n        if (unsubscriptionFrame < 0) {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);\n        }\n        else {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n        }\n    };\n    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {\n        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('conventional marble diagrams cannot have the ' +\n                'unsubscription marker \"!\"');\n        }\n        var len = marbles.length;\n        var testMessages = [];\n        var subIndex = marbles.indexOf('^');\n        var frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n        var getValue = typeof values !== 'object' ?\n            function (x) { return x; } :\n            function (x) {\n                // Support Observable-of-Observables\n                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {\n                    return values[x].messages;\n                }\n                return values[x];\n            };\n        var groupStart = -1;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor + frameOffset;\n            var notification = void 0;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '|':\n                    notification = Notification_1.Notification.createComplete();\n                    break;\n                case '^':\n                    break;\n                case '#':\n                    notification = Notification_1.Notification.createError(errorValue || 'error');\n                    break;\n                default:\n                    notification = Notification_1.Notification.createNext(getValue(c));\n                    break;\n            }\n            if (notification) {\n                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });\n            }\n        }\n        return testMessages;\n    };\n    return TestScheduler;\n}(VirtualTimeScheduler_1.VirtualTimeScheduler));\nexports.TestScheduler = TestScheduler;\n//# sourceMappingURL=TestScheduler.js.map","\"use strict\";\nvar zipAll_1 = require('../operators/zipAll');\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nfunction zipAll(project) {\n    return zipAll_1.zipAll(project)(this);\n}\nexports.zipAll = zipAll;\n//# sourceMappingURL=zipAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zipAll_1 = require('../../operator/zipAll');\nObservable_1.Observable.prototype.zipAll = zipAll_1.zipAll;\n//# sourceMappingURL=zipAll.js.map","\"use strict\";\nvar zip_1 = require('../operators/zip');\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nfunction zipProto() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return zip_1.zip.apply(void 0, observables)(this);\n}\nexports.zipProto = zipProto;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zip_1 = require('../../operator/zip');\nObservable_1.Observable.prototype.zip = zip_1.zipProto;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar withLatestFrom_1 = require('../operators/withLatestFrom');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return withLatestFrom_1.withLatestFrom.apply(void 0, args)(this);\n}\nexports.withLatestFrom = withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar withLatestFrom_1 = require('../../operator/withLatestFrom');\nObservable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar windowWhen_1 = require('../operators/windowWhen');\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nfunction windowWhen(closingSelector) {\n    return windowWhen_1.windowWhen(closingSelector)(this);\n}\nexports.windowWhen = windowWhen;\n//# sourceMappingURL=windowWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowWhen_1 = require('../../operator/windowWhen');\nObservable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;\n//# sourceMappingURL=windowWhen.js.map","\"use strict\";\nvar windowToggle_1 = require('../operators/windowToggle');\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nfunction windowToggle(openings, closingSelector) {\n    return windowToggle_1.windowToggle(openings, closingSelector)(this);\n}\nexports.windowToggle = windowToggle;\n//# sourceMappingURL=windowToggle.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowToggle_1 = require('../../operator/windowToggle');\nObservable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;\n//# sourceMappingURL=windowToggle.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar isNumeric_1 = require('../util/isNumeric');\nvar isScheduler_1 = require('../util/isScheduler');\nvar windowTime_1 = require('../operators/windowTime');\nfunction windowTime(windowTimeSpan) {\n    var scheduler = async_1.async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler_1.isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler_1.isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric_1.isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler_1.isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric_1.isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return windowTime_1.windowTime(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this);\n}\nexports.windowTime = windowTime;\n//# sourceMappingURL=windowTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowTime_1 = require('../../operator/windowTime');\nObservable_1.Observable.prototype.windowTime = windowTime_1.windowTime;\n//# sourceMappingURL=windowTime.js.map","\"use strict\";\nvar windowCount_1 = require('../operators/windowCount');\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return windowCount_1.windowCount(windowSize, startWindowEvery)(this);\n}\nexports.windowCount = windowCount;\n//# sourceMappingURL=windowCount.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowCount_1 = require('../../operator/windowCount');\nObservable_1.Observable.prototype.windowCount = windowCount_1.windowCount;\n//# sourceMappingURL=windowCount.js.map","\"use strict\";\nvar window_1 = require('../operators/window');\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return window_1.window(windowBoundaries)(this);\n}\nexports.window = window;\n//# sourceMappingURL=window.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar window_1 = require('../../operator/window');\nObservable_1.Observable.prototype.window = window_1.window;\n//# sourceMappingURL=window.js.map","\"use strict\";\nvar toArray_1 = require('../operators/toArray');\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nfunction toArray() {\n    return toArray_1.toArray()(this);\n}\nexports.toArray = toArray;\n//# sourceMappingURL=toArray.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar toArray_1 = require('../../operator/toArray');\nObservable_1.Observable.prototype.toArray = toArray_1.toArray;\n//# sourceMappingURL=toArray.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timestamp_1 = require('../operators/timestamp');\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timestamp_1.timestamp(scheduler)(this);\n}\nexports.timestamp = timestamp;\n//# sourceMappingURL=timestamp.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timestamp_1 = require('../../operator/timestamp');\nObservable_1.Observable.prototype.timestamp = timestamp_1.timestamp;\n//# sourceMappingURL=timestamp.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeoutWith_1 = require('../operators/timeoutWith');\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeoutWith_1.timeoutWith(due, withObservable, scheduler)(this);\n}\nexports.timeoutWith = timeoutWith;\n//# sourceMappingURL=timeoutWith.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeoutWith_1 = require('../../operator/timeoutWith');\nObservable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;\n//# sourceMappingURL=timeoutWith.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeout_1 = require('../operators/timeout');\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nfunction timeout(due, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeout_1.timeout(due, scheduler)(this);\n}\nexports.timeout = timeout;\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeout_1 = require('../../operator/timeout');\nObservable_1.Observable.prototype.timeout = timeout_1.timeout;\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeInterval_1 = require('../../operator/timeInterval');\nObservable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;\n//# sourceMappingURL=timeInterval.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar throttle_1 = require('../operators/throttle');\nvar throttleTime_1 = require('../operators/throttleTime');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return throttleTime_1.throttleTime(duration, scheduler, config)(this);\n}\nexports.throttleTime = throttleTime;\n//# sourceMappingURL=throttleTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throttleTime_1 = require('../../operator/throttleTime');\nObservable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;\n//# sourceMappingURL=throttleTime.js.map","\"use strict\";\nvar throttle_1 = require('../operators/throttle');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector, config) {\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return throttle_1.throttle(durationSelector, config)(this);\n}\nexports.throttle = throttle;\n//# sourceMappingURL=throttle.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throttle_1 = require('../../operator/throttle');\nObservable_1.Observable.prototype.throttle = throttle_1.throttle;\n//# sourceMappingURL=throttle.js.map","\"use strict\";\nvar takeWhile_1 = require('../operators/takeWhile');\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return takeWhile_1.takeWhile(predicate)(this);\n}\nexports.takeWhile = takeWhile;\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeWhile_1 = require('../../operator/takeWhile');\nObservable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar takeUntil_1 = require('../operators/takeUntil');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return takeUntil_1.takeUntil(notifier)(this);\n}\nexports.takeUntil = takeUntil;\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeUntil_1 = require('../../operator/takeUntil');\nObservable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar takeLast_1 = require('../operators/takeLast');\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    return takeLast_1.takeLast(count)(this);\n}\nexports.takeLast = takeLast;\n//# sourceMappingURL=takeLast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeLast_1 = require('../../operator/takeLast');\nObservable_1.Observable.prototype.takeLast = takeLast_1.takeLast;\n//# sourceMappingURL=takeLast.js.map","\"use strict\";\nvar take_1 = require('../operators/take');\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return take_1.take(count)(this);\n}\nexports.take = take;\n//# sourceMappingURL=take.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar take_1 = require('../../operator/take');\nObservable_1.Observable.prototype.take = take_1.take;\n//# sourceMappingURL=take.js.map","\"use strict\";\nvar switchMapTo_1 = require('../operators/switchMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return switchMapTo_1.switchMapTo(innerObservable, resultSelector)(this);\n}\nexports.switchMapTo = switchMapTo;\n//# sourceMappingURL=switchMapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMapTo_1 = require('../../operator/switchMapTo');\nObservable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;\n//# sourceMappingURL=switchMapTo.js.map","\"use strict\";\nvar switchMap_1 = require('../operators/switchMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return switchMap_1.switchMap(project, resultSelector)(this);\n}\nexports.switchMap = switchMap;\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMap_1 = require('../../operator/switchMap');\nObservable_1.Observable.prototype.switchMap = switchMap_1.switchMap;\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar switchAll_1 = require('../operators/switchAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nfunction _switch() {\n    return switchAll_1.switchAll()(this);\n}\nexports._switch = _switch;\n//# sourceMappingURL=switch.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switch_1 = require('../../operator/switch');\nObservable_1.Observable.prototype.switch = switch_1._switch;\nObservable_1.Observable.prototype._switch = switch_1._switch;\n//# sourceMappingURL=switch.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar AsapScheduler = (function (_super) {\n    __extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        _super.apply(this, arguments);\n    }\n    AsapScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AsapScheduler = AsapScheduler;\n//# sourceMappingURL=AsapScheduler.js.map","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\"use strict\";\nvar root_1 = require('./root');\nvar ImmediateDefinition = (function () {\n    function ImmediateDefinition(root) {\n        this.root = root;\n        if (root.setImmediate && typeof root.setImmediate === 'function') {\n            this.setImmediate = root.setImmediate.bind(root);\n            this.clearImmediate = root.clearImmediate.bind(root);\n        }\n        else {\n            this.nextHandle = 1;\n            this.tasksByHandle = {};\n            this.currentlyRunningATask = false;\n            // Don't get fooled by e.g. browserify environments.\n            if (this.canUseProcessNextTick()) {\n                // For Node.js before 0.9\n                this.setImmediate = this.createProcessNextTickSetImmediate();\n            }\n            else if (this.canUsePostMessage()) {\n                // For non-IE10 modern browsers\n                this.setImmediate = this.createPostMessageSetImmediate();\n            }\n            else if (this.canUseMessageChannel()) {\n                // For web workers, where supported\n                this.setImmediate = this.createMessageChannelSetImmediate();\n            }\n            else if (this.canUseReadyStateChange()) {\n                // For IE 6–8\n                this.setImmediate = this.createReadyStateChangeSetImmediate();\n            }\n            else {\n                // For older browsers\n                this.setImmediate = this.createSetTimeoutSetImmediate();\n            }\n            var ci = function clearImmediate(handle) {\n                delete clearImmediate.instance.tasksByHandle[handle];\n            };\n            ci.instance = this;\n            this.clearImmediate = ci;\n        }\n    }\n    ImmediateDefinition.prototype.identify = function (o) {\n        return this.root.Object.prototype.toString.call(o);\n    };\n    ImmediateDefinition.prototype.canUseProcessNextTick = function () {\n        return this.identify(this.root.process) === '[object process]';\n    };\n    ImmediateDefinition.prototype.canUseMessageChannel = function () {\n        return Boolean(this.root.MessageChannel);\n    };\n    ImmediateDefinition.prototype.canUseReadyStateChange = function () {\n        var document = this.root.document;\n        return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n    };\n    ImmediateDefinition.prototype.canUsePostMessage = function () {\n        var root = this.root;\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `root.postMessage` means something completely different and can't be used for this purpose.\n        if (root.postMessage && !root.importScripts) {\n            var postMessageIsAsynchronous_1 = true;\n            var oldOnMessage = root.onmessage;\n            root.onmessage = function () {\n                postMessageIsAsynchronous_1 = false;\n            };\n            root.postMessage('', '*');\n            root.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous_1;\n        }\n        return false;\n    };\n    // This function accepts the same arguments as setImmediate, but\n    // returns a function that requires no arguments.\n    ImmediateDefinition.prototype.partiallyApplied = function (handler) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var fn = function result() {\n            var _a = result, handler = _a.handler, args = _a.args;\n            if (typeof handler === 'function') {\n                handler.apply(undefined, args);\n            }\n            else {\n                (new Function('' + handler))();\n            }\n        };\n        fn.handler = handler;\n        fn.args = args;\n        return fn;\n    };\n    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {\n        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n        return this.nextHandle++;\n    };\n    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n        var root = this.root;\n        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n        var onGlobalMessage = function globalMessageHandler(event) {\n            var instance = globalMessageHandler.instance;\n            if (event.source === root &&\n                typeof event.data === 'string' &&\n                event.data.indexOf(messagePrefix) === 0) {\n                instance.runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n        onGlobalMessage.instance = this;\n        root.addEventListener('message', onGlobalMessage, false);\n        var fn = function setImmediate() {\n            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.postMessage(messagePrefix + handle, '*');\n            return handle;\n        };\n        fn.instance = this;\n        fn.messagePrefix = messagePrefix;\n        return fn;\n    };\n    ImmediateDefinition.prototype.runIfPresent = function (handle) {\n        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (this.currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // 'too much recursion' error.\n            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n        }\n        else {\n            var task = this.tasksByHandle[handle];\n            if (task) {\n                this.currentlyRunningATask = true;\n                try {\n                    task();\n                }\n                finally {\n                    this.clearImmediate(handle);\n                    this.currentlyRunningATask = false;\n                }\n            }\n        }\n    };\n    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {\n        var _this = this;\n        var channel = new this.root.MessageChannel();\n        channel.port1.onmessage = function (event) {\n            var handle = event.data;\n            _this.runIfPresent(handle);\n        };\n        var fn = function setImmediate() {\n            var _a = setImmediate, channel = _a.channel, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            channel.port2.postMessage(handle);\n            return handle;\n        };\n        fn.channel = channel;\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var root = instance.root;\n            var doc = root.document;\n            var html = doc.documentElement;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement('script');\n            script.onreadystatechange = function () {\n                instance.runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    return ImmediateDefinition;\n}());\nexports.ImmediateDefinition = ImmediateDefinition;\nexports.Immediate = new ImmediateDefinition(root_1.root);\n//# sourceMappingURL=Immediate.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Immediate_1 = require('../util/Immediate');\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsapAction = (function (_super) {\n    __extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If a microtask has already been scheduled, don't schedule another\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n        // the current scheduled microtask id.\n        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested microtask and\n        // set the scheduled flag to undefined so the next AsapAction will schedule\n        // its own.\n        if (scheduler.actions.length === 0) {\n            Immediate_1.Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction_1.AsyncAction));\nexports.AsapAction = AsapAction;\n//# sourceMappingURL=AsapAction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar asap_1 = require('../scheduler/asap');\nvar isNumeric_1 = require('../util/isNumeric');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar SubscribeOnObservable = (function (_super) {\n    __extends(SubscribeOnObservable, _super);\n    function SubscribeOnObservable(source, delayTime, scheduler) {\n        if (delayTime === void 0) { delayTime = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        _super.call(this);\n        this.source = source;\n        this.delayTime = delayTime;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {\n            this.delayTime = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = asap_1.asap;\n        }\n    }\n    SubscribeOnObservable.create = function (source, delay, scheduler) {\n        if (delay === void 0) { delay = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        return new SubscribeOnObservable(source, delay, scheduler);\n    };\n    SubscribeOnObservable.dispatch = function (arg) {\n        var source = arg.source, subscriber = arg.subscriber;\n        return this.add(source.subscribe(subscriber));\n    };\n    SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n        var delay = this.delayTime;\n        var source = this.source;\n        var scheduler = this.scheduler;\n        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n            source: source, subscriber: subscriber\n        });\n    };\n    return SubscribeOnObservable;\n}(Observable_1.Observable));\nexports.SubscribeOnObservable = SubscribeOnObservable;\n//# sourceMappingURL=SubscribeOnObservable.js.map","\"use strict\";\nvar SubscribeOnObservable_1 = require('../observable/SubscribeOnObservable');\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function subscribeOnOperatorFunction(source) {\n        return source.lift(new SubscribeOnOperator(scheduler, delay));\n    };\n}\nexports.subscribeOn = subscribeOn;\nvar SubscribeOnOperator = (function () {\n    function SubscribeOnOperator(scheduler, delay) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    SubscribeOnOperator.prototype.call = function (subscriber, source) {\n        return new SubscribeOnObservable_1.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);\n    };\n    return SubscribeOnOperator;\n}());\n//# sourceMappingURL=subscribeOn.js.map","\"use strict\";\nvar subscribeOn_1 = require('../operators/subscribeOn');\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return subscribeOn_1.subscribeOn(scheduler, delay)(this);\n}\nexports.subscribeOn = subscribeOn;\n//# sourceMappingURL=subscribeOn.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar subscribeOn_1 = require('../../operator/subscribeOn');\nObservable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;\n//# sourceMappingURL=subscribeOn.js.map","\"use strict\";\nvar startWith_1 = require('../operators/startWith');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return startWith_1.startWith.apply(void 0, array)(this);\n}\nexports.startWith = startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar startWith_1 = require('../../operator/startWith');\nObservable_1.Observable.prototype.startWith = startWith_1.startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar skipWhile_1 = require('../operators/skipWhile');\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return skipWhile_1.skipWhile(predicate)(this);\n}\nexports.skipWhile = skipWhile;\n//# sourceMappingURL=skipWhile.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipWhile_1 = require('../../operator/skipWhile');\nObservable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;\n//# sourceMappingURL=skipWhile.js.map","\"use strict\";\nvar skipUntil_1 = require('../operators/skipUntil');\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return skipUntil_1.skipUntil(notifier)(this);\n}\nexports.skipUntil = skipUntil;\n//# sourceMappingURL=skipUntil.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipUntil_1 = require('../../operator/skipUntil');\nObservable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;\n//# sourceMappingURL=skipUntil.js.map","\"use strict\";\nvar skipLast_1 = require('../operators/skipLast');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return skipLast_1.skipLast(count)(this);\n}\nexports.skipLast = skipLast;\n//# sourceMappingURL=skipLast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipLast_1 = require('../../operator/skipLast');\nObservable_1.Observable.prototype.skipLast = skipLast_1.skipLast;\n//# sourceMappingURL=skipLast.js.map","\"use strict\";\nvar skip_1 = require('../operators/skip');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return skip_1.skip(count)(this);\n}\nexports.skip = skip;\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skip_1 = require('../../operator/skip');\nObservable_1.Observable.prototype.skip = skip_1.skip;\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar single_1 = require('../operators/single');\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nfunction single(predicate) {\n    return single_1.single(predicate)(this);\n}\nexports.single = single;\n//# sourceMappingURL=single.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar single_1 = require('../../operator/single');\nObservable_1.Observable.prototype.single = single_1.single;\n//# sourceMappingURL=single.js.map","\"use strict\";\nvar shareReplay_1 = require('../operators/shareReplay');\n/**\n * @method shareReplay\n * @owner Observable\n */\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n    return shareReplay_1.shareReplay(bufferSize, windowTime, scheduler)(this);\n}\nexports.shareReplay = shareReplay;\n;\n//# sourceMappingURL=shareReplay.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar shareReplay_1 = require('../../operator/shareReplay');\nObservable_1.Observable.prototype.shareReplay = shareReplay_1.shareReplay;\n//# sourceMappingURL=shareReplay.js.map","\"use strict\";\nvar share_1 = require('../operators/share');\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return share_1.share()(this);\n}\nexports.share = share;\n;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar share_1 = require('../../operator/share');\nObservable_1.Observable.prototype.share = share_1.share;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar sequenceEqual_1 = require('../operators/sequenceEqual');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return sequenceEqual_1.sequenceEqual(compareTo, comparor)(this);\n}\nexports.sequenceEqual = sequenceEqual;\n//# sourceMappingURL=sequenceEqual.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sequenceEqual_1 = require('../../operator/sequenceEqual');\nObservable_1.Observable.prototype.sequenceEqual = sequenceEqual_1.sequenceEqual;\n//# sourceMappingURL=sequenceEqual.js.map","\"use strict\";\nvar scan_1 = require('../operators/scan');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return scan_1.scan(accumulator, seed)(this);\n    }\n    return scan_1.scan(accumulator)(this);\n}\nexports.scan = scan;\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar scan_1 = require('../../operator/scan');\nObservable_1.Observable.prototype.scan = scan_1.scan;\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar sampleTime_1 = require('../operators/sampleTime');\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nfunction sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return sampleTime_1.sampleTime(period, scheduler)(this);\n}\nexports.sampleTime = sampleTime;\n//# sourceMappingURL=sampleTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sampleTime_1 = require('../../operator/sampleTime');\nObservable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;\n//# sourceMappingURL=sampleTime.js.map","\"use strict\";\nvar sample_1 = require('../operators/sample');\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return sample_1.sample(notifier)(this);\n}\nexports.sample = sample;\n//# sourceMappingURL=sample.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sample_1 = require('../../operator/sample');\nObservable_1.Observable.prototype.sample = sample_1.sample;\n//# sourceMappingURL=sample.js.map","\"use strict\";\nvar retryWhen_1 = require('../operators/retryWhen');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n    return retryWhen_1.retryWhen(notifier)(this);\n}\nexports.retryWhen = retryWhen;\n//# sourceMappingURL=retryWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar retryWhen_1 = require('../../operator/retryWhen');\nObservable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;\n//# sourceMappingURL=retryWhen.js.map","\"use strict\";\nvar retry_1 = require('../operators/retry');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n    if (count === void 0) { count = -1; }\n    return retry_1.retry(count)(this);\n}\nexports.retry = retry;\n//# sourceMappingURL=retry.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar retry_1 = require('../../operator/retry');\nObservable_1.Observable.prototype.retry = retry_1.retry;\n//# sourceMappingURL=retry.js.map","\"use strict\";\nvar repeatWhen_1 = require('../operators/repeatWhen');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return repeatWhen_1.repeatWhen(notifier)(this);\n}\nexports.repeatWhen = repeatWhen;\n//# sourceMappingURL=repeatWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar repeatWhen_1 = require('../../operator/repeatWhen');\nObservable_1.Observable.prototype.repeatWhen = repeatWhen_1.repeatWhen;\n//# sourceMappingURL=repeatWhen.js.map","\"use strict\";\nvar repeat_1 = require('../operators/repeat');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return repeat_1.repeat(count)(this);\n}\nexports.repeat = repeat;\n//# sourceMappingURL=repeat.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar repeat_1 = require('../../operator/repeat');\nObservable_1.Observable.prototype.repeat = repeat_1.repeat;\n//# sourceMappingURL=repeat.js.map","\"use strict\";\nvar reduce_1 = require('../operators/reduce');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return reduce_1.reduce(accumulator, seed)(this);\n    }\n    return reduce_1.reduce(accumulator)(this);\n}\nexports.reduce = reduce;\n//# sourceMappingURL=reduce.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar reduce_1 = require('../../operator/reduce');\nObservable_1.Observable.prototype.reduce = reduce_1.reduce;\n//# sourceMappingURL=reduce.js.map","\"use strict\";\nvar race_1 = require('../operators/race');\n// NOTE: to support backwards compatability with 5.4.* and lower\nvar race_2 = require('../observable/race');\nexports.raceStatic = race_2.race;\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return race_1.race.apply(void 0, observables)(this);\n}\nexports.race = race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar race_1 = require('../../operator/race');\nObservable_1.Observable.prototype.race = race_1.race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar publishLast_1 = require('../operators/publishLast');\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nfunction publishLast() {\n    //TODO(benlesh): correct type-flow through here.\n    return publishLast_1.publishLast()(this);\n}\nexports.publishLast = publishLast;\n//# sourceMappingURL=publishLast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishLast_1 = require('../../operator/publishLast');\nObservable_1.Observable.prototype.publishLast = publishLast_1.publishLast;\n//# sourceMappingURL=publishLast.js.map","\"use strict\";\nvar publishReplay_1 = require('../operators/publishReplay');\n/* tslint:enable:max-line-length */\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    return publishReplay_1.publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler)(this);\n}\nexports.publishReplay = publishReplay;\n//# sourceMappingURL=publishReplay.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishReplay_1 = require('../../operator/publishReplay');\nObservable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;\n//# sourceMappingURL=publishReplay.js.map","\"use strict\";\nvar publishBehavior_1 = require('../operators/publishBehavior');\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nfunction publishBehavior(value) {\n    return publishBehavior_1.publishBehavior(value)(this);\n}\nexports.publishBehavior = publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishBehavior_1 = require('../../operator/publishBehavior');\nObservable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map","\"use strict\";\nvar publish_1 = require('../operators/publish');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return publish_1.publish(selector)(this);\n}\nexports.publish = publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publish_1 = require('../../operator/publish');\nObservable_1.Observable.prototype.publish = publish_1.publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar pluck_1 = require('../operators/pluck');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    return pluck_1.pluck.apply(void 0, properties)(this);\n}\nexports.pluck = pluck;\n//# sourceMappingURL=pluck.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pluck_1 = require('../../operator/pluck');\nObservable_1.Observable.prototype.pluck = pluck_1.pluck;\n//# sourceMappingURL=pluck.js.map","\"use strict\";\nfunction not(pred, thisArg) {\n    function notPred() {\n        return !(notPred.pred.apply(notPred.thisArg, arguments));\n    }\n    notPred.pred = pred;\n    notPred.thisArg = thisArg;\n    return notPred;\n}\nexports.not = not;\n//# sourceMappingURL=not.js.map","\"use strict\";\nvar partition_1 = require('../operators/partition');\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nfunction partition(predicate, thisArg) {\n    return partition_1.partition(predicate, thisArg)(this);\n}\nexports.partition = partition;\n//# sourceMappingURL=partition.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar partition_1 = require('../../operator/partition');\nObservable_1.Observable.prototype.partition = partition_1.partition;\n//# sourceMappingURL=partition.js.map","\"use strict\";\nvar pairwise_1 = require('../operators/pairwise');\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return pairwise_1.pairwise()(this);\n}\nexports.pairwise = pairwise;\n//# sourceMappingURL=pairwise.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pairwise_1 = require('../../operator/pairwise');\nObservable_1.Observable.prototype.pairwise = pairwise_1.pairwise;\n//# sourceMappingURL=pairwise.js.map","\"use strict\";\nvar onErrorResumeNext_1 = require('../operators/onErrorResumeNext');\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    return onErrorResumeNext_1.onErrorResumeNext.apply(void 0, nextSources)(this);\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar onErrorResumeNext_1 = require('../../operator/onErrorResumeNext');\nObservable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar observeOn_1 = require('../operators/observeOn');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return observeOn_1.observeOn(scheduler, delay)(this);\n}\nexports.observeOn = observeOn;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar observeOn_1 = require('../../operator/observeOn');\nObservable_1.Observable.prototype.observeOn = observeOn_1.observeOn;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar multicast_1 = require('../operators/multicast');\n/* tslint:enable:max-line-length */\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return multicast_1.multicast(subjectOrSubjectFactory, selector)(this);\n}\nexports.multicast = multicast;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar multicast_1 = require('../../operator/multicast');\nObservable_1.Observable.prototype.multicast = multicast_1.multicast;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nvar min_1 = require('../operators/min');\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nfunction min(comparer) {\n    return min_1.min(comparer)(this);\n}\nexports.min = min;\n//# sourceMappingURL=min.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar min_1 = require('../../operator/min');\nObservable_1.Observable.prototype.min = min_1.min;\n//# sourceMappingURL=min.js.map","\"use strict\";\nvar mergeScan_1 = require('../operators/mergeScan');\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeScan_1.mergeScan(accumulator, seed, concurrent)(this);\n}\nexports.mergeScan = mergeScan;\n//# sourceMappingURL=mergeScan.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeScan_1 = require('../../operator/mergeScan');\nObservable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;\n//# sourceMappingURL=mergeScan.js.map","\"use strict\";\nvar mergeMapTo_1 = require('../operators/mergeMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMapTo_1.mergeMapTo(innerObservable, resultSelector, concurrent)(this);\n}\nexports.mergeMapTo = mergeMapTo;\n//# sourceMappingURL=mergeMapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeMapTo_1 = require('../../operator/mergeMapTo');\nObservable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;\nObservable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;\n//# sourceMappingURL=mergeMapTo.js.map","\"use strict\";\nvar mergeMap_1 = require('../operators/mergeMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(project, resultSelector, concurrent)(this);\n}\nexports.mergeMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeMap_1 = require('../../operator/mergeMap');\nObservable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;\nObservable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nvar mergeAll_1 = require('../operators/mergeAll');\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeAll_1.mergeAll(concurrent)(this);\n}\nexports.mergeAll = mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeAll_1 = require('../../operator/mergeAll');\nObservable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar merge_1 = require('../operators/merge');\nvar merge_2 = require('../observable/merge');\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return merge_1.merge.apply(void 0, observables)(this);\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../operator/merge');\nObservable_1.Observable.prototype.merge = merge_1.merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar max_1 = require('../operators/max');\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nfunction max(comparer) {\n    return max_1.max(comparer)(this);\n}\nexports.max = max;\n//# sourceMappingURL=max.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar max_1 = require('../../operator/max');\nObservable_1.Observable.prototype.max = max_1.max;\n//# sourceMappingURL=max.js.map","\"use strict\";\nvar materialize_1 = require('../operators/materialize');\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nfunction materialize() {\n    return materialize_1.materialize()(this);\n}\nexports.materialize = materialize;\n//# sourceMappingURL=materialize.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar materialize_1 = require('../../operator/materialize');\nObservable_1.Observable.prototype.materialize = materialize_1.materialize;\n//# sourceMappingURL=materialize.js.map","\"use strict\";\nvar mapTo_1 = require('../operators/mapTo');\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return mapTo_1.mapTo(value)(this);\n}\nexports.mapTo = mapTo;\n//# sourceMappingURL=mapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mapTo_1 = require('../../operator/mapTo');\nObservable_1.Observable.prototype.mapTo = mapTo_1.mapTo;\n//# sourceMappingURL=mapTo.js.map","\"use strict\";\nvar map_1 = require('../operators/map');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return map_1.map(project, thisArg)(this);\n}\nexports.map = map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar every_1 = require('../operators/every');\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nfunction every(predicate, thisArg) {\n    return every_1.every(predicate, thisArg)(this);\n}\nexports.every = every;\n//# sourceMappingURL=every.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar every_1 = require('../../operator/every');\nObservable_1.Observable.prototype.every = every_1.every;\n//# sourceMappingURL=every.js.map","\"use strict\";\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nfunction letProto(func) {\n    return func(this);\n}\nexports.letProto = letProto;\n//# sourceMappingURL=let.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar let_1 = require('../../operator/let');\nObservable_1.Observable.prototype.let = let_1.letProto;\nObservable_1.Observable.prototype.letBind = let_1.letProto;\n//# sourceMappingURL=let.js.map","\"use strict\";\nvar last_1 = require('../operators/last');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nfunction last(predicate, resultSelector, defaultValue) {\n    return last_1.last(predicate, resultSelector, defaultValue)(this);\n}\nexports.last = last;\n//# sourceMappingURL=last.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar last_1 = require('../../operator/last');\nObservable_1.Observable.prototype.last = last_1.last;\n//# sourceMappingURL=last.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar auditTime_1 = require('../operators/auditTime');\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nfunction auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return auditTime_1.auditTime(duration, scheduler)(this);\n}\nexports.auditTime = auditTime;\n//# sourceMappingURL=auditTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar auditTime_1 = require('../../operator/auditTime');\nObservable_1.Observable.prototype.auditTime = auditTime_1.auditTime;\n//# sourceMappingURL=auditTime.js.map","\"use strict\";\nvar audit_1 = require('../operators/audit');\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return audit_1.audit(durationSelector)(this);\n}\nexports.audit = audit;\n//# sourceMappingURL=audit.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar audit_1 = require('../../operator/audit');\nObservable_1.Observable.prototype.audit = audit_1.audit;\n//# sourceMappingURL=audit.js.map","\"use strict\";\nvar isEmpty_1 = require('../operators/isEmpty');\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nfunction isEmpty() {\n    return isEmpty_1.isEmpty()(this);\n}\nexports.isEmpty = isEmpty;\n//# sourceMappingURL=isEmpty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar isEmpty_1 = require('../../operator/isEmpty');\nObservable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;\n//# sourceMappingURL=isEmpty.js.map","\"use strict\";\nvar ignoreElements_1 = require('../operators/ignoreElements');\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nfunction ignoreElements() {\n    return ignoreElements_1.ignoreElements()(this);\n}\nexports.ignoreElements = ignoreElements;\n;\n//# sourceMappingURL=ignoreElements.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar ignoreElements_1 = require('../../operator/ignoreElements');\nObservable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;\n//# sourceMappingURL=ignoreElements.js.map","\"use strict\";\nvar FastMap = (function () {\n    function FastMap() {\n        this.values = {};\n    }\n    FastMap.prototype.delete = function (key) {\n        this.values[key] = null;\n        return true;\n    };\n    FastMap.prototype.set = function (key, value) {\n        this.values[key] = value;\n        return this;\n    };\n    FastMap.prototype.get = function (key) {\n        return this.values[key];\n    };\n    FastMap.prototype.forEach = function (cb, thisArg) {\n        var values = this.values;\n        for (var key in values) {\n            if (values.hasOwnProperty(key) && values[key] !== null) {\n                cb.call(thisArg, values[key], key);\n            }\n        }\n    };\n    FastMap.prototype.clear = function () {\n        this.values = {};\n    };\n    return FastMap;\n}());\nexports.FastMap = FastMap;\n//# sourceMappingURL=FastMap.js.map","\"use strict\";\nvar MapPolyfill = (function () {\n    function MapPolyfill() {\n        this.size = 0;\n        this._values = [];\n        this._keys = [];\n    }\n    MapPolyfill.prototype.get = function (key) {\n        var i = this._keys.indexOf(key);\n        return i === -1 ? undefined : this._values[i];\n    };\n    MapPolyfill.prototype.set = function (key, value) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            this._keys.push(key);\n            this._values.push(value);\n            this.size++;\n        }\n        else {\n            this._values[i] = value;\n        }\n        return this;\n    };\n    MapPolyfill.prototype.delete = function (key) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            return false;\n        }\n        this._values.splice(i, 1);\n        this._keys.splice(i, 1);\n        this.size--;\n        return true;\n    };\n    MapPolyfill.prototype.clear = function () {\n        this._keys.length = 0;\n        this._values.length = 0;\n        this.size = 0;\n    };\n    MapPolyfill.prototype.forEach = function (cb, thisArg) {\n        for (var i = 0; i < this.size; i++) {\n            cb.call(thisArg, this._values[i], this._keys[i]);\n        }\n    };\n    return MapPolyfill;\n}());\nexports.MapPolyfill = MapPolyfill;\n//# sourceMappingURL=MapPolyfill.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar MapPolyfill_1 = require('./MapPolyfill');\nexports.Map = root_1.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();\n//# sourceMappingURL=Map.js.map","\"use strict\";\nvar groupBy_1 = require('../operators/groupBy');\nexports.GroupedObservable = groupBy_1.GroupedObservable;\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return groupBy_1.groupBy(keySelector, elementSelector, durationSelector, subjectSelector)(this);\n}\nexports.groupBy = groupBy;\n//# sourceMappingURL=groupBy.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar groupBy_1 = require('../../operator/groupBy');\nObservable_1.Observable.prototype.groupBy = groupBy_1.groupBy;\n//# sourceMappingURL=groupBy.js.map","\"use strict\";\nvar first_1 = require('../operators/first');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return first_1.first(predicate, resultSelector, defaultValue)(this);\n}\nexports.first = first;\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar first_1 = require('../../operator/first');\nObservable_1.Observable.prototype.first = first_1.first;\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar findIndex_1 = require('../operators/findIndex');\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nfunction findIndex(predicate, thisArg) {\n    return findIndex_1.findIndex(predicate, thisArg)(this);\n}\nexports.findIndex = findIndex;\n//# sourceMappingURL=findIndex.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar findIndex_1 = require('../../operator/findIndex');\nObservable_1.Observable.prototype.findIndex = findIndex_1.findIndex;\n//# sourceMappingURL=findIndex.js.map","\"use strict\";\nvar find_1 = require('../operators/find');\n/* tslint:enable:max-line-length */\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nfunction find(predicate, thisArg) {\n    return find_1.find(predicate, thisArg)(this);\n}\nexports.find = find;\n//# sourceMappingURL=find.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar find_1 = require('../../operator/find');\nObservable_1.Observable.prototype.find = find_1.find;\n//# sourceMappingURL=find.js.map","\"use strict\";\nvar finalize_1 = require('../operators/finalize');\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nfunction _finally(callback) {\n    return finalize_1.finalize(callback)(this);\n}\nexports._finally = _finally;\n//# sourceMappingURL=finally.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar finally_1 = require('../../operator/finally');\nObservable_1.Observable.prototype.finally = finally_1._finally;\nObservable_1.Observable.prototype._finally = finally_1._finally;\n//# sourceMappingURL=finally.js.map","\"use strict\";\nvar filter_1 = require('../operators/filter');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return filter_1.filter(predicate, thisArg)(this);\n}\nexports.filter = filter;\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar filter_1 = require('../../operator/filter');\nObservable_1.Observable.prototype.filter = filter_1.filter;\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar elementAt_1 = require('../operators/elementAt');\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return elementAt_1.elementAt(index, defaultValue)(this);\n}\nexports.elementAt = elementAt;\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar elementAt_1 = require('../../operator/elementAt');\nObservable_1.Observable.prototype.elementAt = elementAt_1.elementAt;\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar expand_1 = require('../operators/expand');\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nfunction expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return expand_1.expand(project, concurrent, scheduler)(this);\n}\nexports.expand = expand;\n//# sourceMappingURL=expand.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar expand_1 = require('../../operator/expand');\nObservable_1.Observable.prototype.expand = expand_1.expand;\n//# sourceMappingURL=expand.js.map","\"use strict\";\nvar exhaustMap_1 = require('../operators/exhaustMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nfunction exhaustMap(project, resultSelector) {\n    return exhaustMap_1.exhaustMap(project, resultSelector)(this);\n}\nexports.exhaustMap = exhaustMap;\n//# sourceMappingURL=exhaustMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar exhaustMap_1 = require('../../operator/exhaustMap');\nObservable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;\n//# sourceMappingURL=exhaustMap.js.map","\"use strict\";\nvar exhaust_1 = require('../operators/exhaust');\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nfunction exhaust() {\n    return exhaust_1.exhaust()(this);\n}\nexports.exhaust = exhaust;\n//# sourceMappingURL=exhaust.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar exhaust_1 = require('../../operator/exhaust');\nObservable_1.Observable.prototype.exhaust = exhaust_1.exhaust;\n//# sourceMappingURL=exhaust.js.map","\"use strict\";\nvar tap_1 = require('../operators/tap');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nfunction _do(nextOrObserver, error, complete) {\n    return tap_1.tap(nextOrObserver, error, complete)(this);\n}\nexports._do = _do;\n//# sourceMappingURL=do.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar do_1 = require('../../operator/do');\nObservable_1.Observable.prototype.do = do_1._do;\nObservable_1.Observable.prototype._do = do_1._do;\n//# sourceMappingURL=do.js.map","\"use strict\";\nvar distinctUntilKeyChanged_1 = require('../operators/distinctUntilKeyChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n    return distinctUntilKeyChanged_1.distinctUntilKeyChanged(key, compare)(this);\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctUntilKeyChanged_1 = require('../../operator/distinctUntilKeyChanged');\nObservable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","\"use strict\";\nvar distinctUntilChanged_1 = require('../operators/distinctUntilChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return distinctUntilChanged_1.distinctUntilChanged(compare, keySelector)(this);\n}\nexports.distinctUntilChanged = distinctUntilChanged;\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctUntilChanged_1 = require('../../operator/distinctUntilChanged');\nObservable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar root_1 = require('./root');\nfunction minimalSetImpl() {\n    // THIS IS NOT a full impl of Set, this is just the minimum\n    // bits of functionality we need for this library.\n    return (function () {\n        function MinimalSet() {\n            this._values = [];\n        }\n        MinimalSet.prototype.add = function (value) {\n            if (!this.has(value)) {\n                this._values.push(value);\n            }\n        };\n        MinimalSet.prototype.has = function (value) {\n            return this._values.indexOf(value) !== -1;\n        };\n        Object.defineProperty(MinimalSet.prototype, \"size\", {\n            get: function () {\n                return this._values.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MinimalSet.prototype.clear = function () {\n            this._values.length = 0;\n        };\n        return MinimalSet;\n    }());\n}\nexports.minimalSetImpl = minimalSetImpl;\nexports.Set = root_1.root.Set || minimalSetImpl();\n//# sourceMappingURL=Set.js.map","\"use strict\";\nvar distinct_1 = require('../operators/distinct');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return distinct_1.distinct(keySelector, flushes)(this);\n}\nexports.distinct = distinct;\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinct_1 = require('../../operator/distinct');\nObservable_1.Observable.prototype.distinct = distinct_1.distinct;\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nvar delayWhen_1 = require('../operators/delayWhen');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    return delayWhen_1.delayWhen(delayDurationSelector, subscriptionDelay)(this);\n}\nexports.delayWhen = delayWhen;\n//# sourceMappingURL=delayWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar delayWhen_1 = require('../../operator/delayWhen');\nObservable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;\n//# sourceMappingURL=delayWhen.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar delay_1 = require('../operators/delay');\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return delay_1.delay(delay, scheduler)(this);\n}\nexports.delay = delay;\n//# sourceMappingURL=delay.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar delay_1 = require('../../operator/delay');\nObservable_1.Observable.prototype.delay = delay_1.delay;\n//# sourceMappingURL=delay.js.map","\"use strict\";\nvar defaultIfEmpty_1 = require('../operators/defaultIfEmpty');\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nfunction defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return defaultIfEmpty_1.defaultIfEmpty(defaultValue)(this);\n}\nexports.defaultIfEmpty = defaultIfEmpty;\n//# sourceMappingURL=defaultIfEmpty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar defaultIfEmpty_1 = require('../../operator/defaultIfEmpty');\nObservable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\n//# sourceMappingURL=defaultIfEmpty.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar debounceTime_1 = require('../operators/debounceTime');\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return debounceTime_1.debounceTime(dueTime, scheduler)(this);\n}\nexports.debounceTime = debounceTime;\n//# sourceMappingURL=debounceTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar debounceTime_1 = require('../../operator/debounceTime');\nObservable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;\n//# sourceMappingURL=debounceTime.js.map","\"use strict\";\nvar debounce_1 = require('../operators/debounce');\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return debounce_1.debounce(durationSelector)(this);\n}\nexports.debounce = debounce;\n//# sourceMappingURL=debounce.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar debounce_1 = require('../../operator/debounce');\nObservable_1.Observable.prototype.debounce = debounce_1.debounce;\n//# sourceMappingURL=debounce.js.map","\"use strict\";\nvar dematerialize_1 = require('../operators/dematerialize');\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nfunction dematerialize() {\n    return dematerialize_1.dematerialize()(this);\n}\nexports.dematerialize = dematerialize;\n//# sourceMappingURL=dematerialize.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar dematerialize_1 = require('../../operator/dematerialize');\nObservable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;\n//# sourceMappingURL=dematerialize.js.map","\"use strict\";\nvar count_1 = require('../operators/count');\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return count_1.count(predicate)(this);\n}\nexports.count = count;\n//# sourceMappingURL=count.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar count_1 = require('../../operator/count');\nObservable_1.Observable.prototype.count = count_1.count;\n//# sourceMappingURL=count.js.map","\"use strict\";\nvar concatMapTo_1 = require('../operators/concatMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nfunction concatMapTo(innerObservable, resultSelector) {\n    return concatMapTo_1.concatMapTo(innerObservable, resultSelector)(this);\n}\nexports.concatMapTo = concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatMapTo_1 = require('../../operator/concatMapTo');\nObservable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map","\"use strict\";\nvar concatMap_1 = require('../operators/concatMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return concatMap_1.concatMap(project, resultSelector)(this);\n}\nexports.concatMap = concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatMap_1 = require('../../operator/concatMap');\nObservable_1.Observable.prototype.concatMap = concatMap_1.concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar concatAll_1 = require('../operators/concatAll');\n/* tslint:enable:max-line-length */\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return concatAll_1.concatAll()(this);\n}\nexports.concatAll = concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatAll_1 = require('../../operator/concatAll');\nObservable_1.Observable.prototype.concatAll = concatAll_1.concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar concat_1 = require('../operators/concat');\nvar concat_2 = require('../observable/concat');\nexports.concatStatic = concat_2.concat;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return concat_1.concat.apply(void 0, observables)(this);\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concat_1 = require('../../operator/concat');\nObservable_1.Observable.prototype.concat = concat_1.concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar combineLatest_1 = require('../operators/combineLatest');\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return combineLatest_1.combineLatest.apply(void 0, observables)(this);\n}\nexports.combineLatest = combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineLatest_1 = require('../../operator/combineLatest');\nObservable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar combineAll_1 = require('../operators/combineAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nfunction combineAll(project) {\n    return combineAll_1.combineAll(project)(this);\n}\nexports.combineAll = combineAll;\n//# sourceMappingURL=combineAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineAll_1 = require('../../operator/combineAll');\nObservable_1.Observable.prototype.combineAll = combineAll_1.combineAll;\n//# sourceMappingURL=combineAll.js.map","\"use strict\";\nvar catchError_1 = require('../operators/catchError');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nfunction _catch(selector) {\n    return catchError_1.catchError(selector)(this);\n}\nexports._catch = _catch;\n//# sourceMappingURL=catch.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar catch_1 = require('../../operator/catch');\nObservable_1.Observable.prototype.catch = catch_1._catch;\nObservable_1.Observable.prototype._catch = catch_1._catch;\n//# sourceMappingURL=catch.js.map","\"use strict\";\nvar bufferWhen_1 = require('../operators/bufferWhen');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return bufferWhen_1.bufferWhen(closingSelector)(this);\n}\nexports.bufferWhen = bufferWhen;\n//# sourceMappingURL=bufferWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferWhen_1 = require('../../operator/bufferWhen');\nObservable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;\n//# sourceMappingURL=bufferWhen.js.map","\"use strict\";\nvar bufferToggle_1 = require('../operators/bufferToggle');\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return bufferToggle_1.bufferToggle(openings, closingSelector)(this);\n}\nexports.bufferToggle = bufferToggle;\n//# sourceMappingURL=bufferToggle.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferToggle_1 = require('../../operator/bufferToggle');\nObservable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;\n//# sourceMappingURL=bufferToggle.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar bufferTime_1 = require('../operators/bufferTime');\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async_1.async;\n    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return bufferTime_1.bufferTime(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this);\n}\nexports.bufferTime = bufferTime;\n//# sourceMappingURL=bufferTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferTime_1 = require('../../operator/bufferTime');\nObservable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;\n//# sourceMappingURL=bufferTime.js.map","\"use strict\";\nvar bufferCount_1 = require('../operators/bufferCount');\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nfunction bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return bufferCount_1.bufferCount(bufferSize, startBufferEvery)(this);\n}\nexports.bufferCount = bufferCount;\n//# sourceMappingURL=bufferCount.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferCount_1 = require('../../operator/bufferCount');\nObservable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;\n//# sourceMappingURL=bufferCount.js.map","\"use strict\";\nvar buffer_1 = require('../operators/buffer');\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nfunction buffer(closingNotifier) {\n    return buffer_1.buffer(closingNotifier)(this);\n}\nexports.buffer = buffer;\n//# sourceMappingURL=buffer.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar buffer_1 = require('../../operator/buffer');\nObservable_1.Observable.prototype.buffer = buffer_1.buffer;\n//# sourceMappingURL=buffer.js.map","\"use strict\";\nvar root_1 = require('./root');\nfunction assignImpl(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    var len = sources.length;\n    for (var i = 0; i < len; i++) {\n        var source = sources[i];\n        for (var k in source) {\n            if (source.hasOwnProperty(k)) {\n                target[k] = source[k];\n            }\n        }\n    }\n    return target;\n}\nexports.assignImpl = assignImpl;\n;\nfunction getAssign(root) {\n    return root.Object.assign || assignImpl;\n}\nexports.getAssign = getAssign;\nexports.assign = getAssign(root_1.root);\n//# sourceMappingURL=assign.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar QueueScheduler = (function (_super) {\n    __extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        _super.apply(this, arguments);\n    }\n    return QueueScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.QueueScheduler = QueueScheduler;\n//# sourceMappingURL=QueueScheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = (function (_super) {\n    __extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction_1.AsyncAction));\nexports.QueueAction = QueueAction;\n//# sourceMappingURL=QueueAction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../../Subject');\nvar Subscriber_1 = require('../../Subscriber');\nvar Observable_1 = require('../../Observable');\nvar Subscription_1 = require('../../Subscription');\nvar root_1 = require('../../util/root');\nvar ReplaySubject_1 = require('../../ReplaySubject');\nvar tryCatch_1 = require('../../util/tryCatch');\nvar errorObject_1 = require('../../util/errorObject');\nvar assign_1 = require('../../util/assign');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar WebSocketSubject = (function (_super) {\n    __extends(WebSocketSubject, _super);\n    function WebSocketSubject(urlConfigOrSource, destination) {\n        if (urlConfigOrSource instanceof Observable_1.Observable) {\n            _super.call(this, destination, urlConfigOrSource);\n        }\n        else {\n            _super.call(this);\n            this.WebSocketCtor = root_1.root.WebSocket;\n            this._output = new Subject_1.Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                this.url = urlConfigOrSource;\n            }\n            else {\n                // WARNING: config object could override important members here.\n                assign_1.assign(this, urlConfigOrSource);\n            }\n            if (!this.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n    }\n    WebSocketSubject.prototype.resultSelector = function (e) {\n        return JSON.parse(e.data);\n    };\n    /**\n     * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n     *\n     * @example <caption>Wraps browser WebSocket</caption>\n     *\n     * let socket$ = Observable.webSocket('ws://localhost:8081');\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n     *\n     * import { w3cwebsocket } from 'websocket';\n     *\n     * let socket$ = Observable.webSocket({\n     *   url: 'ws://localhost:8081',\n     *   WebSocketCtor: w3cwebsocket\n     * });\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n     * @return {WebSocketSubject}\n     * @static true\n     * @name webSocket\n     * @owner Observable\n     */\n    WebSocketSubject.create = function (urlConfigOrSource) {\n        return new WebSocketSubject(urlConfigOrSource);\n    };\n    WebSocketSubject.prototype.lift = function (operator) {\n        var sock = new WebSocketSubject(this, this.destination);\n        sock.operator = operator;\n        return sock;\n    };\n    WebSocketSubject.prototype._resetState = function () {\n        this.socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n        this._output = new Subject_1.Subject();\n    };\n    // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n        var self = this;\n        return new Observable_1.Observable(function (observer) {\n            var result = tryCatch_1.tryCatch(subMsg)();\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                self.next(result);\n            }\n            var subscription = self.subscribe(function (x) {\n                var result = tryCatch_1.tryCatch(messageFilter)(x);\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else if (result) {\n                    observer.next(x);\n                }\n            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\n            return function () {\n                var result = tryCatch_1.tryCatch(unsubMsg)();\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else {\n                    self.next(result);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    };\n    WebSocketSubject.prototype._connectSocket = function () {\n        var _this = this;\n        var WebSocketCtor = this.WebSocketCtor;\n        var observer = this._output;\n        var socket = null;\n        try {\n            socket = this.protocol ?\n                new WebSocketCtor(this.url, this.protocol) :\n                new WebSocketCtor(this.url);\n            this.socket = socket;\n            if (this.binaryType) {\n                this.socket.binaryType = this.binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        var subscription = new Subscription_1.Subscription(function () {\n            _this.socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = function (e) {\n            var openObserver = _this.openObserver;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            var queue = _this.destination;\n            _this.destination = Subscriber_1.Subscriber.create(function (x) { return socket.readyState === 1 && socket.send(x); }, function (e) {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n                        'and an optional reason: { code: number, reason: string }'));\n                }\n                _this._resetState();\n            }, function () {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                _this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {\n                subscription.add(queue.subscribe(_this.destination));\n            }\n        };\n        socket.onerror = function (e) {\n            _this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = function (e) {\n            _this._resetState();\n            var closeObserver = _this.closeObserver;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = function (e) {\n            var result = tryCatch_1.tryCatch(_this.resultSelector)(e);\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                observer.next(result);\n            }\n        };\n    };\n    WebSocketSubject.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var source = this.source;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this.socket) {\n            this._connectSocket();\n        }\n        var subscription = new Subscription_1.Subscription();\n        subscription.add(this._output.subscribe(subscriber));\n        subscription.add(function () {\n            var socket = _this.socket;\n            if (_this._output.observers.length === 0) {\n                if (socket && socket.readyState === 1) {\n                    socket.close();\n                }\n                _this._resetState();\n            }\n        });\n        return subscription;\n    };\n    WebSocketSubject.prototype.unsubscribe = function () {\n        var _a = this, source = _a.source, socket = _a.socket;\n        if (socket && socket.readyState === 1) {\n            socket.close();\n            this._resetState();\n        }\n        _super.prototype.unsubscribe.call(this);\n        if (!source) {\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n    };\n    return WebSocketSubject;\n}(Subject_1.AnonymousSubject));\nexports.WebSocketSubject = WebSocketSubject;\n//# sourceMappingURL=WebSocketSubject.js.map","\"use strict\";\nvar WebSocketSubject_1 = require('./WebSocketSubject');\nexports.webSocket = WebSocketSubject_1.WebSocketSubject.create;\n//# sourceMappingURL=webSocket.js.map","\"use strict\";\nvar Observable_1 = require('../../../Observable');\nvar webSocket_1 = require('../../../observable/dom/webSocket');\nObservable_1.Observable.webSocket = webSocket_1.webSocket;\n//# sourceMappingURL=webSocket.js.map","\"use strict\";\nvar AjaxObservable_1 = require('./AjaxObservable');\nexports.ajax = AjaxObservable_1.AjaxObservable.create;\n//# sourceMappingURL=ajax.js.map","\"use strict\";\nvar Observable_1 = require('../../../Observable');\nvar ajax_1 = require('../../../observable/dom/ajax');\nObservable_1.Observable.ajax = ajax_1.ajax;\n//# sourceMappingURL=ajax.js.map","\"use strict\";\nvar zip_1 = require('../operators/zip');\nexports.zip = zip_1.zipStatic;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zip_1 = require('../../observable/zip');\nObservable_1.Observable.zip = zip_1.zip;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar isDate_1 = require('../util/isDate');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar TimerObservable = (function (_super) {\n    __extends(TimerObservable, _super);\n    function TimerObservable(dueTime, period, scheduler) {\n        if (dueTime === void 0) { dueTime = 0; }\n        _super.call(this);\n        this.period = -1;\n        this.dueTime = 0;\n        if (isNumeric_1.isNumeric(period)) {\n            this.period = Number(period) < 1 && 1 || Number(period);\n        }\n        else if (isScheduler_1.isScheduler(period)) {\n            scheduler = period;\n        }\n        if (!isScheduler_1.isScheduler(scheduler)) {\n            scheduler = async_1.async;\n        }\n        this.scheduler = scheduler;\n        this.dueTime = isDate_1.isDate(dueTime) ?\n            (+dueTime - this.scheduler.now()) :\n            dueTime;\n    }\n    /**\n     * Creates an Observable that starts emitting after an `initialDelay` and\n     * emits ever increasing numbers after each `period` of time thereafter.\n     *\n     * <span class=\"informal\">Its like {@link interval}, but you can specify when\n     * should the emissions start.</span>\n     *\n     * <img src=\"./img/timer.png\" width=\"100%\">\n     *\n     * `timer` returns an Observable that emits an infinite sequence of ascending\n     * integers, with a constant interval of time, `period` of your choosing\n     * between those emissions. The first emission happens after the specified\n     * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n     * operator uses the `async` IScheduler to provide a notion of time, but you\n     * may pass any IScheduler to it. If `period` is not specified, the output\n     * Observable emits only one value, `0`. Otherwise, it emits an infinite\n     * sequence.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n     * var numbers = Rx.Observable.timer(3000, 1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @example <caption>Emits one number after five seconds</caption>\n     * var numbers = Rx.Observable.timer(5000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link interval}\n     * @see {@link delay}\n     *\n     * @param {number|Date} initialDelay The initial delay time to wait before\n     * emitting the first value of `0`.\n     * @param {number} [period] The period of time between emissions of the\n     * subsequent numbers.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a `0` after the\n     * `initialDelay` and ever increasing numbers after each `period` of time\n     * thereafter.\n     * @static true\n     * @name timer\n     * @owner Observable\n     */\n    TimerObservable.create = function (initialDelay, period, scheduler) {\n        if (initialDelay === void 0) { initialDelay = 0; }\n        return new TimerObservable(initialDelay, period, scheduler);\n    };\n    TimerObservable.dispatch = function (state) {\n        var index = state.index, period = state.period, subscriber = state.subscriber;\n        var action = this;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        else if (period === -1) {\n            return subscriber.complete();\n        }\n        state.index = index + 1;\n        action.schedule(state, period);\n    };\n    TimerObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;\n        return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n            index: index, period: period, subscriber: subscriber\n        });\n    };\n    return TimerObservable;\n}(Observable_1.Observable));\nexports.TimerObservable = TimerObservable;\n//# sourceMappingURL=TimerObservable.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timer_1 = require('../../observable/timer');\nObservable_1.Observable.timer = timer_1.timer;\n//# sourceMappingURL=timer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ErrorObservable = (function (_super) {\n    __extends(ErrorObservable, _super);\n    function ErrorObservable(error, scheduler) {\n        _super.call(this);\n        this.error = error;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits an error notification.\n     *\n     * <span class=\"informal\">Just emits 'error', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/throw.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the error notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then emit an error.</caption>\n     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x === 13 ?\n     *     Rx.Observable.throw('Thirteens are bad') :\n     *     Rx.Observable.of('a', 'b', 'c')\n     * );\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link of}\n     *\n     * @param {any} error The particular Error to pass to the error notification.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the error notification.\n     * @return {Observable} An error Observable: emits only the error notification\n     * using the given error argument.\n     * @static true\n     * @name throw\n     * @owner Observable\n     */\n    ErrorObservable.create = function (error, scheduler) {\n        return new ErrorObservable(error, scheduler);\n    };\n    ErrorObservable.dispatch = function (arg) {\n        var error = arg.error, subscriber = arg.subscriber;\n        subscriber.error(error);\n    };\n    ErrorObservable.prototype._subscribe = function (subscriber) {\n        var error = this.error;\n        var scheduler = this.scheduler;\n        subscriber.syncErrorThrowable = true;\n        if (scheduler) {\n            return scheduler.schedule(ErrorObservable.dispatch, 0, {\n                error: error, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.error(error);\n        }\n    };\n    return ErrorObservable;\n}(Observable_1.Observable));\nexports.ErrorObservable = ErrorObservable;\n//# sourceMappingURL=ErrorObservable.js.map","\"use strict\";\nvar ErrorObservable_1 = require('./ErrorObservable');\nexports._throw = ErrorObservable_1.ErrorObservable.create;\n//# sourceMappingURL=throw.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throw_1 = require('../../observable/throw');\nObservable_1.Observable.throw = throw_1._throw;\n//# sourceMappingURL=throw.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar UsingObservable = (function (_super) {\n    __extends(UsingObservable, _super);\n    function UsingObservable(resourceFactory, observableFactory) {\n        _super.call(this);\n        this.resourceFactory = resourceFactory;\n        this.observableFactory = observableFactory;\n    }\n    UsingObservable.create = function (resourceFactory, observableFactory) {\n        return new UsingObservable(resourceFactory, observableFactory);\n    };\n    UsingObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;\n        var resource;\n        try {\n            resource = resourceFactory();\n            return new UsingSubscriber(subscriber, resource, observableFactory);\n        }\n        catch (err) {\n            subscriber.error(err);\n        }\n    };\n    return UsingObservable;\n}(Observable_1.Observable));\nexports.UsingObservable = UsingObservable;\nvar UsingSubscriber = (function (_super) {\n    __extends(UsingSubscriber, _super);\n    function UsingSubscriber(destination, resource, observableFactory) {\n        _super.call(this, destination);\n        this.resource = resource;\n        this.observableFactory = observableFactory;\n        destination.add(resource);\n        this.tryUse();\n    }\n    UsingSubscriber.prototype.tryUse = function () {\n        try {\n            var source = this.observableFactory.call(this, this.resource);\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return UsingSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=UsingObservable.js.map","\"use strict\";\nvar UsingObservable_1 = require('./UsingObservable');\nexports.using = UsingObservable_1.UsingObservable.create;\n//# sourceMappingURL=using.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar using_1 = require('../../observable/using');\nObservable_1.Observable.using = using_1.using;\n//# sourceMappingURL=using.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar RangeObservable = (function (_super) {\n    __extends(RangeObservable, _super);\n    function RangeObservable(start, count, scheduler) {\n        _super.call(this);\n        this.start = start;\n        this._count = count;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits a sequence of numbers within a specified\n     * range.\n     *\n     * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n     *\n     * <img src=\"./img/range.png\" width=\"100%\">\n     *\n     * `range` operator emits a range of sequential integers, in order, where you\n     * select the `start` of the range and its `length`. By default, uses no\n     * IScheduler and just delivers the notifications synchronously, but may use\n     * an optional IScheduler to regulate those deliveries.\n     *\n     * @example <caption>Emits the numbers 1 to 10</caption>\n     * var numbers = Rx.Observable.range(1, 10);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link interval}\n     *\n     * @param {number} [start=0] The value of the first integer in the sequence.\n     * @param {number} [count=0] The number of sequential integers to generate.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the notifications.\n     * @return {Observable} An Observable of numbers that emits a finite range of\n     * sequential integers.\n     * @static true\n     * @name range\n     * @owner Observable\n     */\n    RangeObservable.create = function (start, count, scheduler) {\n        if (start === void 0) { start = 0; }\n        if (count === void 0) { count = 0; }\n        return new RangeObservable(start, count, scheduler);\n    };\n    RangeObservable.dispatch = function (state) {\n        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(start);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        state.start = start + 1;\n        this.schedule(state);\n    };\n    RangeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var start = this.start;\n        var count = this._count;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(RangeObservable.dispatch, 0, {\n                index: index, count: count, start: start, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(start++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return RangeObservable;\n}(Observable_1.Observable));\nexports.RangeObservable = RangeObservable;\n//# sourceMappingURL=RangeObservable.js.map","\"use strict\";\nvar RangeObservable_1 = require('./RangeObservable');\nexports.range = RangeObservable_1.RangeObservable.create;\n//# sourceMappingURL=range.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar range_1 = require('../../observable/range');\nObservable_1.Observable.range = range_1.range;\n//# sourceMappingURL=range.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nfunction dispatch(state) {\n    var obj = state.obj, keys = state.keys, length = state.length, index = state.index, subscriber = state.subscriber;\n    if (index === length) {\n        subscriber.complete();\n        return;\n    }\n    var key = keys[index];\n    subscriber.next([key, obj[key]]);\n    state.index = index + 1;\n    this.schedule(state);\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PairsObservable = (function (_super) {\n    __extends(PairsObservable, _super);\n    function PairsObservable(obj, scheduler) {\n        _super.call(this);\n        this.obj = obj;\n        this.scheduler = scheduler;\n        this.keys = Object.keys(obj);\n    }\n    /**\n     * Convert an object into an observable sequence of [key, value] pairs\n     * using an optional IScheduler to enumerate the object.\n     *\n     * @example <caption>Converts a javascript object to an Observable</caption>\n     * var obj = {\n     *   foo: 42,\n     *   bar: 56,\n     *   baz: 78\n     * };\n     *\n     * var source = Rx.Observable.pairs(obj);\n     *\n     * var subscription = source.subscribe(\n     *   function (x) {\n     *     console.log('Next: %s', x);\n     *   },\n     *   function (err) {\n     *     console.log('Error: %s', err);\n     *   },\n     *   function () {\n     *     console.log('Completed');\n     *   });\n     *\n     * @param {Object} obj The object to inspect and turn into an\n     * Observable sequence.\n     * @param {Scheduler} [scheduler] An optional IScheduler to run the\n     * enumeration of the input sequence on.\n     * @returns {(Observable<Array<string | T>>)} An observable sequence of\n     * [key, value] pairs from the object.\n     */\n    PairsObservable.create = function (obj, scheduler) {\n        return new PairsObservable(obj, scheduler);\n    };\n    PairsObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, keys = _a.keys, scheduler = _a.scheduler;\n        var length = keys.length;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                obj: this.obj, keys: keys, length: length, index: 0, subscriber: subscriber\n            });\n        }\n        else {\n            for (var idx = 0; idx < length; idx++) {\n                var key = keys[idx];\n                subscriber.next([key, this.obj[key]]);\n            }\n            subscriber.complete();\n        }\n    };\n    return PairsObservable;\n}(Observable_1.Observable));\nexports.PairsObservable = PairsObservable;\n//# sourceMappingURL=PairsObservable.js.map","\"use strict\";\nvar PairsObservable_1 = require('./PairsObservable');\nexports.pairs = PairsObservable_1.PairsObservable.create;\n//# sourceMappingURL=pairs.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pairs_1 = require('../../observable/pairs');\nObservable_1.Observable.pairs = pairs_1.pairs;\n//# sourceMappingURL=pairs.js.map","\"use strict\";\nvar onErrorResumeNext_1 = require('../operators/onErrorResumeNext');\nexports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar onErrorResumeNext_1 = require('../../observable/onErrorResumeNext');\nObservable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar of_1 = require('../../observable/of');\nObservable_1.Observable.of = of_1.of;\n//# sourceMappingURL=of.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar noop_1 = require('../util/noop');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar NeverObservable = (function (_super) {\n    __extends(NeverObservable, _super);\n    function NeverObservable() {\n        _super.call(this);\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer.\n     *\n     * <span class=\"informal\">An Observable that never emits anything.</span>\n     *\n     * <img src=\"./img/never.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that emits\n     * neither values nor errors nor the completion notification. It can be used\n     * for testing purposes or for composing with other Observables. Please note\n     * that by never emitting a complete notification, this Observable keeps the\n     * subscription from being disposed automatically. Subscriptions need to be\n     * manually disposed.\n     *\n     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n     * function info() {\n     *   console.log('Will not be called');\n     * }\n     * var result = Rx.Observable.never().startWith(7);\n     * result.subscribe(x => console.log(x), info, info);\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @return {Observable} A \"never\" Observable: never emits anything.\n     * @static true\n     * @name never\n     * @owner Observable\n     */\n    NeverObservable.create = function () {\n        return new NeverObservable();\n    };\n    NeverObservable.prototype._subscribe = function (subscriber) {\n        noop_1.noop();\n    };\n    return NeverObservable;\n}(Observable_1.Observable));\nexports.NeverObservable = NeverObservable;\n//# sourceMappingURL=NeverObservable.js.map","\"use strict\";\nvar NeverObservable_1 = require('./NeverObservable');\nexports.never = NeverObservable_1.NeverObservable.create;\n//# sourceMappingURL=never.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar never_1 = require('../../observable/never');\nObservable_1.Observable.never = never_1.never;\n//# sourceMappingURL=never.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar race_1 = require('../../observable/race');\nObservable_1.Observable.race = race_1.race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../observable/merge');\nObservable_1.Observable.merge = merge_1.merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n//# sourceMappingURL=Scheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = (function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription_1.Subscription));\nexports.Action = Action;\n//# sourceMappingURL=Action.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IntervalObservable = (function (_super) {\n    __extends(IntervalObservable, _super);\n    function IntervalObservable(period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        _super.call(this);\n        this.period = period;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(period) || period < 0) {\n            this.period = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = async_1.async;\n        }\n    }\n    /**\n     * Creates an Observable that emits sequential numbers every specified\n     * interval of time, on a specified IScheduler.\n     *\n     * <span class=\"informal\">Emits incremental numbers periodically in time.\n     * </span>\n     *\n     * <img src=\"./img/interval.png\" width=\"100%\">\n     *\n     * `interval` returns an Observable that emits an infinite sequence of\n     * ascending integers, with a constant interval of time of your choosing\n     * between those emissions. The first emission is not sent immediately, but\n     * only after the first period has passed. By default, this operator uses the\n     * `async` IScheduler to provide a notion of time, but you may pass any\n     * IScheduler to it.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n     * var numbers = Rx.Observable.interval(1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link delay}\n     *\n     * @param {number} [period=0] The interval size in milliseconds (by default)\n     * or the time unit determined by the scheduler's clock.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a sequential number each time\n     * interval.\n     * @static true\n     * @name interval\n     * @owner Observable\n     */\n    IntervalObservable.create = function (period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        return new IntervalObservable(period, scheduler);\n    };\n    IntervalObservable.dispatch = function (state) {\n        var index = state.index, subscriber = state.subscriber, period = state.period;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index += 1;\n        this.schedule(state, period);\n    };\n    IntervalObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var period = this.period;\n        var scheduler = this.scheduler;\n        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n            index: index, subscriber: subscriber, period: period\n        }));\n    };\n    return IntervalObservable;\n}(Observable_1.Observable));\nexports.IntervalObservable = IntervalObservable;\n//# sourceMappingURL=IntervalObservable.js.map","\"use strict\";\nvar IntervalObservable_1 = require('./IntervalObservable');\nexports.interval = IntervalObservable_1.IntervalObservable.create;\n//# sourceMappingURL=interval.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar interval_1 = require('../../observable/interval');\nObservable_1.Observable.interval = interval_1.interval;\n//# sourceMappingURL=interval.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IfObservable = (function (_super) {\n    __extends(IfObservable, _super);\n    function IfObservable(condition, thenSource, elseSource) {\n        _super.call(this);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n    }\n    IfObservable.create = function (condition, thenSource, elseSource) {\n        return new IfObservable(condition, thenSource, elseSource);\n    };\n    IfObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n    };\n    return IfObservable;\n}(Observable_1.Observable));\nexports.IfObservable = IfObservable;\nvar IfSubscriber = (function (_super) {\n    __extends(IfSubscriber, _super);\n    function IfSubscriber(destination, condition, thenSource, elseSource) {\n        _super.call(this, destination);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n        this.tryIf();\n    }\n    IfSubscriber.prototype.tryIf = function () {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        var result;\n        try {\n            result = condition();\n            var source = result ? thenSource : elseSource;\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n            else {\n                this._complete();\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return IfSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=IfObservable.js.map","\"use strict\";\nvar IfObservable_1 = require('./IfObservable');\nexports._if = IfObservable_1.IfObservable.create;\n//# sourceMappingURL=if.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar if_1 = require('../../observable/if');\nObservable_1.Observable.if = if_1._if;\n//# sourceMappingURL=if.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar isScheduler_1 = require('../util/isScheduler');\nvar selfSelector = function (value) { return value; };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar GenerateObservable = (function (_super) {\n    __extends(GenerateObservable, _super);\n    function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {\n        _super.call(this);\n        this.initialState = initialState;\n        this.condition = condition;\n        this.iterate = iterate;\n        this.resultSelector = resultSelector;\n        this.scheduler = scheduler;\n    }\n    GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\n        if (arguments.length == 1) {\n            return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);\n        }\n        if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {\n            return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);\n        }\n        return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);\n    };\n    GenerateObservable.prototype._subscribe = function (subscriber) {\n        var state = this.initialState;\n        if (this.scheduler) {\n            return this.scheduler.schedule(GenerateObservable.dispatch, 0, {\n                subscriber: subscriber,\n                iterate: this.iterate,\n                condition: this.condition,\n                resultSelector: this.resultSelector,\n                state: state });\n        }\n        var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;\n        do {\n            if (condition) {\n                var conditionResult = void 0;\n                try {\n                    conditionResult = condition(state);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (!conditionResult) {\n                    subscriber.complete();\n                    break;\n                }\n            }\n            var value = void 0;\n            try {\n                value = resultSelector(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            subscriber.next(value);\n            if (subscriber.closed) {\n                break;\n            }\n            try {\n                state = iterate(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        } while (true);\n    };\n    GenerateObservable.dispatch = function (state) {\n        var subscriber = state.subscriber, condition = state.condition;\n        if (subscriber.closed) {\n            return;\n        }\n        if (state.needIterate) {\n            try {\n                state.state = state.iterate(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        }\n        else {\n            state.needIterate = true;\n        }\n        if (condition) {\n            var conditionResult = void 0;\n            try {\n                conditionResult = condition(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            if (!conditionResult) {\n                subscriber.complete();\n                return;\n            }\n            if (subscriber.closed) {\n                return;\n            }\n        }\n        var value;\n        try {\n            value = state.resultSelector(state.state);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return;\n        }\n        if (subscriber.closed) {\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        return this.schedule(state);\n    };\n    return GenerateObservable;\n}(Observable_1.Observable));\nexports.GenerateObservable = GenerateObservable;\n//# sourceMappingURL=GenerateObservable.js.map","\"use strict\";\nvar GenerateObservable_1 = require('./GenerateObservable');\nexports.generate = GenerateObservable_1.GenerateObservable.create;\n//# sourceMappingURL=generate.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar generate_1 = require('../../observable/generate');\nObservable_1.Observable.generate = generate_1.generate;\n//# sourceMappingURL=generate.js.map","\"use strict\";\nvar PromiseObservable_1 = require('./PromiseObservable');\nexports.fromPromise = PromiseObservable_1.PromiseObservable.create;\n//# sourceMappingURL=fromPromise.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromPromise_1 = require('../../observable/fromPromise');\nObservable_1.Observable.fromPromise = fromPromise_1.fromPromise;\n//# sourceMappingURL=fromPromise.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('../util/isFunction');\nvar Observable_1 = require('../Observable');\nvar Subscription_1 = require('../Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventPatternObservable = (function (_super) {\n    __extends(FromEventPatternObservable, _super);\n    function FromEventPatternObservable(addHandler, removeHandler, selector) {\n        _super.call(this);\n        this.addHandler = addHandler;\n        this.removeHandler = removeHandler;\n        this.selector = selector;\n    }\n    /**\n     * Creates an Observable from an API based on addHandler/removeHandler\n     * functions.\n     *\n     * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n     * Observable.</span>\n     *\n     * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n     *\n     * Creates an Observable by using the `addHandler` and `removeHandler`\n     * functions to add and remove the handlers, with an optional selector\n     * function to project the event arguments to a result. The `addHandler` is\n     * called when the output Observable is subscribed, and `removeHandler` is\n     * called when the Subscription is unsubscribed.\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * function addClickHandler(handler) {\n     *   document.addEventListener('click', handler);\n     * }\n     *\n     * function removeClickHandler(handler) {\n     *   document.removeEventListener('click', handler);\n     * }\n     *\n     * var clicks = Rx.Observable.fromEventPattern(\n     *   addClickHandler,\n     *   removeClickHandler\n     * );\n     * clicks.subscribe(x => console.log(x));\n     *\n     * @see {@link from}\n     * @see {@link fromEvent}\n     *\n     * @param {function(handler: Function): any} addHandler A function that takes\n     * a `handler` function as argument and attaches it somehow to the actual\n     * source of events.\n     * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n     * takes a `handler` function as argument and removes it in case it was\n     * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n     * removeHandler function will forward it.\n     * @param {function(...args: any): T} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEventPattern\n     * @owner Observable\n     */\n    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {\n        return new FromEventPatternObservable(addHandler, removeHandler, selector);\n    };\n    FromEventPatternObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var removeHandler = this.removeHandler;\n        var handler = !!this.selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            _this._callSelector(subscriber, args);\n        } : function (e) { subscriber.next(e); };\n        var retValue = this._callAddHandler(handler, subscriber);\n        if (!isFunction_1.isFunction(removeHandler)) {\n            return;\n        }\n        subscriber.add(new Subscription_1.Subscription(function () {\n            //TODO: determine whether or not to forward to error handler\n            removeHandler(handler, retValue);\n        }));\n    };\n    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {\n        try {\n            var result = this.selector.apply(this, args);\n            subscriber.next(result);\n        }\n        catch (e) {\n            subscriber.error(e);\n        }\n    };\n    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {\n        try {\n            return this.addHandler(handler) || null;\n        }\n        catch (e) {\n            errorSubscriber.error(e);\n        }\n    };\n    return FromEventPatternObservable;\n}(Observable_1.Observable));\nexports.FromEventPatternObservable = FromEventPatternObservable;\n//# sourceMappingURL=FromEventPatternObservable.js.map","\"use strict\";\nvar FromEventPatternObservable_1 = require('./FromEventPatternObservable');\nexports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;\n//# sourceMappingURL=fromEventPattern.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEventPattern_1 = require('../../observable/fromEventPattern');\nObservable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;\n//# sourceMappingURL=fromEventPattern.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar isFunction_1 = require('../util/isFunction');\nvar errorObject_1 = require('../util/errorObject');\nvar Subscription_1 = require('../Subscription');\nvar toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventObservable = (function (_super) {\n    __extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction_1.isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        }\n        else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };\n        }\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function () { return source_2.off(eventName, handler); };\n        }\n        else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n        }\n        else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription_1.Subscription(unsubscribe));\n    };\n    FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);\n            if (result === errorObject_1.errorObject) {\n                subscriber.error(errorObject_1.errorObject.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { return subscriber.next(e); };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable_1.Observable));\nexports.FromEventObservable = FromEventObservable;\n//# sourceMappingURL=FromEventObservable.js.map","\"use strict\";\nvar FromEventObservable_1 = require('./FromEventObservable');\nexports.fromEvent = FromEventObservable_1.FromEventObservable.create;\n//# sourceMappingURL=fromEvent.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEvent_1 = require('../../observable/fromEvent');\nObservable_1.Observable.fromEvent = fromEvent_1.fromEvent;\n//# sourceMappingURL=fromEvent.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar from_1 = require('../../observable/from');\nObservable_1.Observable.from = from_1.from;\n//# sourceMappingURL=from.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isArray_1 = require('../util/isArray');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ForkJoinObservable = (function (_super) {\n    __extends(ForkJoinObservable, _super);\n    function ForkJoinObservable(sources, resultSelector) {\n        _super.call(this);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Joins last values emitted by passed Observables.\n     *\n     * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n     *\n     * <img src=\"./img/forkJoin.png\" width=\"100%\">\n     *\n     * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n     * or directly as arguments. If no input Observables are provided, resulting stream will complete\n     * immediately.\n     *\n     * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n     * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n     * array will have `n` values, where first value is the last thing emitted by the first Observable,\n     * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n     * not emit more than once and it will complete after that. If you need to emit combined values not only\n     * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n     * or {@link zip} instead.\n     *\n     * In order for resulting array to have the same length as the number of input Observables, whenever any of\n     * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n     * and it will not emit anything either, even if it already has some last values from other Observables.\n     * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n     * unless at any point some other Observable completes without emitting value, which brings us back to\n     * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n     * have to emit something at least once and complete.\n     *\n     * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n     * will be immediately unsubscribed.\n     *\n     * Optionally `forkJoin` accepts project function, that will be called with values which normally\n     * would land in emitted array. Whatever is returned by project function, will appear in output\n     * Observable instead. This means that default project can be thought of as a function that takes\n     * all its arguments and puts them into an array. Note that project function will be called only\n     * when output Observable is supposed to emit a result.\n     *\n     * @example <caption>Use forkJoin with operator emitting immediately</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.of(1, 2, 3, 4),\n     *   Rx.Observable.of(5, 6, 7, 8)\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [4, 8]\n     * // \"This is how it ends!\"\n     *\n     *\n     * @example <caption>Use forkJoin with operator emitting after some time</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [2, 3] after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     *\n     * @example <caption>Use forkJoin with project function</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n     *   (n, m) => n + m\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // 5 after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     * @see {@link combineLatest}\n     * @see {@link zip}\n     *\n     * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n     * passed directly to the operator.\n     * @param {function} [project] Function that takes values emitted by input Observables and returns value\n     * that will appear in resulting Observable instead of default array.\n     * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n     * or value from project function.\n     * @static true\n     * @name forkJoin\n     * @owner Observable\n     */\n    ForkJoinObservable.create = function () {\n        var sources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sources[_i - 0] = arguments[_i];\n        }\n        if (sources === null || arguments.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        var resultSelector = null;\n        if (typeof sources[sources.length - 1] === 'function') {\n            resultSelector = sources.pop();\n        }\n        // if the first and only other argument besides the resultSelector is an array\n        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n            sources = sources[0];\n        }\n        if (sources.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        return new ForkJoinObservable(sources, resultSelector);\n    };\n    ForkJoinObservable.prototype._subscribe = function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n    };\n    return ForkJoinObservable;\n}(Observable_1.Observable));\nexports.ForkJoinObservable = ForkJoinObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = (function (_super) {\n    __extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources, resultSelector) {\n        _super.call(this, destination);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n        this.completed = 0;\n        this.haveValues = 0;\n        var len = sources.length;\n        this.total = len;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                innerSubscription.outerIndex = i;\n                this.add(innerSubscription);\n            }\n        }\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var destination = this.destination;\n        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            var value = resultSelector ? resultSelector.apply(this, values) : values;\n            destination.next(value);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=ForkJoinObservable.js.map","\"use strict\";\nvar ForkJoinObservable_1 = require('./ForkJoinObservable');\nexports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;\n//# sourceMappingURL=forkJoin.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar forkJoin_1 = require('../../observable/forkJoin');\nObservable_1.Observable.forkJoin = forkJoin_1.forkJoin;\n//# sourceMappingURL=forkJoin.js.map","\"use strict\";\nvar EmptyObservable_1 = require('./EmptyObservable');\nexports.empty = EmptyObservable_1.EmptyObservable.create;\n//# sourceMappingURL=empty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar empty_1 = require('../../observable/empty');\nObservable_1.Observable.empty = empty_1.empty;\n//# sourceMappingURL=empty.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar DeferObservable = (function (_super) {\n    __extends(DeferObservable, _super);\n    function DeferObservable(observableFactory) {\n        _super.call(this);\n        this.observableFactory = observableFactory;\n    }\n    /**\n     * Creates an Observable that, on subscribe, calls an Observable factory to\n     * make an Observable for each new Observer.\n     *\n     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n     * is subscribed.\n     * </span>\n     *\n     * <img src=\"./img/defer.png\" width=\"100%\">\n     *\n     * `defer` allows you to create the Observable only when the Observer\n     * subscribes, and create a fresh Observable for each Observer. It waits until\n     * an Observer subscribes to it, and then it generates an Observable,\n     * typically with an Observable factory function. It does this afresh for each\n     * subscriber, so although each subscriber may think it is subscribing to the\n     * same Observable, in fact each subscriber gets its own individual\n     * Observable.\n     *\n     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n     * var clicksOrInterval = Rx.Observable.defer(function () {\n     *   if (Math.random() > 0.5) {\n     *     return Rx.Observable.fromEvent(document, 'click');\n     *   } else {\n     *     return Rx.Observable.interval(1000);\n     *   }\n     * });\n     * clicksOrInterval.subscribe(x => console.log(x));\n     *\n     * // Results in the following behavior:\n     * // If the result of Math.random() is greater than 0.5 it will listen\n     * // for clicks anywhere on the \"document\"; when document is clicked it\n     * // will log a MouseEvent object to the console. If the result is less\n     * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n     *\n     * @see {@link create}\n     *\n     * @param {function(): SubscribableOrPromise} observableFactory The Observable\n     * factory function to invoke for each Observer that subscribes to the output\n     * Observable. May also return a Promise, which will be converted on the fly\n     * to an Observable.\n     * @return {Observable} An Observable whose Observers' subscriptions trigger\n     * an invocation of the given Observable factory function.\n     * @static true\n     * @name defer\n     * @owner Observable\n     */\n    DeferObservable.create = function (observableFactory) {\n        return new DeferObservable(observableFactory);\n    };\n    DeferObservable.prototype._subscribe = function (subscriber) {\n        return new DeferSubscriber(subscriber, this.observableFactory);\n    };\n    return DeferObservable;\n}(Observable_1.Observable));\nexports.DeferObservable = DeferObservable;\nvar DeferSubscriber = (function (_super) {\n    __extends(DeferSubscriber, _super);\n    function DeferSubscriber(destination, factory) {\n        _super.call(this, destination);\n        this.factory = factory;\n        this.tryDefer();\n    }\n    DeferSubscriber.prototype.tryDefer = function () {\n        try {\n            this._callFactory();\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    DeferSubscriber.prototype._callFactory = function () {\n        var result = this.factory();\n        if (result) {\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return DeferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=DeferObservable.js.map","\"use strict\";\nvar DeferObservable_1 = require('./DeferObservable');\nexports.defer = DeferObservable_1.DeferObservable.create;\n//# sourceMappingURL=defer.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar defer_1 = require('../../observable/defer');\nObservable_1.Observable.defer = defer_1.defer;\n//# sourceMappingURL=defer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayLikeObservable = (function (_super) {\n    __extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable_1.Observable));\nexports.ArrayLikeObservable = ArrayLikeObservable;\n//# sourceMappingURL=ArrayLikeObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IteratorObservable = (function (_super) {\n    __extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                }\n                else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable_1.Observable));\nexports.IteratorObservable = IteratorObservable;\nvar StringIterator = (function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = str.length; }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[iterator_1.iterator] = function () { return (this); };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}());\nvar ArrayIterator = (function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = toLength(arr); }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[iterator_1.iterator] = function () { return this; };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}());\nfunction getIterator(obj) {\n    var i = obj[iterator_1.iterator];\n    if (!i && typeof obj === 'string') {\n        return new StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[iterator_1.iterator]();\n}\nvar maxSafeInteger = Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root_1.root.isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n//# sourceMappingURL=IteratorObservable.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concat_1 = require('../../observable/concat');\nObservable_1.Observable.concat = concat_1.concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = (function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_1.Subscriber));\nexports.InnerSubscriber = InnerSubscriber;\n//# sourceMappingURL=InnerSubscriber.js.map","\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar isArray_1 = require('../util/isArray');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar combineLatest_1 = require('../operators/combineLatest');\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));\n}\nexports.combineLatest = combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineLatest_1 = require('../../observable/combineLatest');\nObservable_1.Observable.combineLatest = combineLatest_1.combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundNodeCallbackObservable = (function (_super) {\n    __extends(BoundNodeCallbackObservable, _super);\n    function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a Node.js-style callback API to a function that returns an\n     * Observable.\n     *\n     * <span class=\"informal\">It's just like {@link bindCallback}, but the\n     * callback is expected to be of type `callback(error, result)`.</span>\n     *\n     * `bindNodeCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, but the\n     * last parameter must be a callback function that `func` calls when it is\n     * done. The callback function is expected to follow Node.js conventions,\n     * where the first argument to the callback is an error object, signaling\n     * whether call was successful. If that object is passed to callback, it means\n     * something went wrong.\n     *\n     * The output of `bindNodeCallback` is a function that takes the same\n     * parameters as `func`, except the last one (the callback). When the output\n     * function is called with arguments, it will return an Observable.\n     * If `func` calls its callback with error parameter present, Observable will\n     * error with that value as well. If error parameter is not passed, Observable will emit\n     * second parameter. If there are more parameters (third and so on),\n     * Observable will emit an array with all arguments, except first error argument.\n     *\n     * Optionally `bindNodeCallback` accepts selector function, which allows you to\n     * make resulting Observable emit value computed by selector, instead of regular\n     * callback arguments. It works similarly to {@link bindCallback} selector, but\n     * Node.js-style error argument will never be passed to that function.\n     *\n     * Note that `func` will not be called at the same time output function is,\n     * but rather whenever resulting Observable is subscribed. By default call to\n     * `func` will happen synchronously after subscription, but that can be changed\n     * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n     * can also control when values from callback will be emitted by Observable.\n     * To find out more, check out documentation for {@link bindCallback}, where\n     * Scheduler works exactly the same.\n     *\n     * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n     * of returned function, when it is called.\n     *\n     * After Observable emits value, it will complete immediately. This means\n     * even if `func` calls callback again, values from second and consecutive\n     * calls will never appear on the stream. If you need to handle functions\n     * that call callbacks multiple times, check out {@link fromEvent} or\n     * {@link fromEventPattern} instead.\n     *\n     * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n     * \"Node.js-style\" callbacks are just a convention, so if you write for\n     * browsers or any other environment and API you use implements that callback style,\n     * `bindNodeCallback` can be safely used on that API functions as well.\n     *\n     * Remember that Error object passed to callback does not have to be an instance\n     * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n     * Error parameter of callback function is interpreted as \"present\", when value\n     * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n     * string or boolean `true`. In all of these cases resulting Observable would error\n     * with that value. This means usually regular style callbacks will fail very often when\n     * `bindNodeCallback` is used. If your Observable errors much more often then you\n     * would expect, check if callback really is called in Node.js-style and, if not,\n     * switch to {@link bindCallback} instead.\n     *\n     * Note that even if error parameter is technically present in callback, but its value\n     * is falsy, it still won't appear in array emitted by Observable or in selector function.\n     *\n     *\n     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n     * import * as fs from 'fs';\n     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n     * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Use on function calling callback with multiple arguments</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // null\n     *   console.log(a); // 5\n     *   console.log(b); // \"some string\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // [5, \"some string\"]\n     * });\n     *\n     *\n     * @example <caption>Use with selector function</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // undefined\n     *   console.log(a); // \"abc\"\n     *   console.log(b); // \"DEF\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // \"abcDEF\"\n     * });\n     *\n     *\n     * @example <caption>Use on function calling callback in regular style</caption>\n     * someFunction(a => {\n     *   console.log(a); // 5\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(\n     *   value => {}             // never gets called\n     *   err => console.log(err) // 5\n     *);\n     *\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func Function with a Node.js-style callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps those to a value to emit on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the Node.js callback would\n     * deliver.\n     * @static true\n     * @name bindNodeCallback\n     * @owner Observable\n     */\n    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    var err = innerArgs.shift();\n                    if (err) {\n                        subject.error(err);\n                    }\n                    else if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    return BoundNodeCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;\nfunction dispatch(state) {\n    var self = this;\n    var source = state.source, subscriber = state.subscriber, context = state.context;\n    // XXX: cast to `any` to access to the private field in `source`.\n    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;\n    var subject = source.subject;\n    if (!subject) {\n        subject = source.subject = new AsyncSubject_1.AsyncSubject();\n        var handler = function handlerFn() {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                innerArgs[_i - 0] = arguments[_i];\n            }\n            var source = handlerFn.source;\n            var selector = source.selector, subject = source.subject;\n            var err = innerArgs.shift();\n            if (err) {\n                self.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));\n            }\n            else if (selector) {\n                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                if (result_2 === errorObject_1.errorObject) {\n                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                }\n                else {\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                }\n            }\n            else {\n                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n            }\n        };\n        // use named function to pass values in without closure\n        handler.source = source;\n        var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n        if (result === errorObject_1.errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n        }\n    }\n    self.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundNodeCallbackObservable.js.map","\"use strict\";\nvar BoundNodeCallbackObservable_1 = require('./BoundNodeCallbackObservable');\nexports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;\n//# sourceMappingURL=bindNodeCallback.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bindNodeCallback_1 = require('../../observable/bindNodeCallback');\nObservable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;\n//# sourceMappingURL=bindNodeCallback.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundCallbackObservable = (function (_super) {\n    __extends(BoundCallbackObservable, _super);\n    function BoundCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a callback API to a function that returns an Observable.\n     *\n     * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n     * it will return a function `g` that when called as `g(x)` will output an\n     * Observable.</span>\n     *\n     * `bindCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, the\n     * last parameter must be a callback function that `func` calls when it is\n     * done.\n     *\n     * The output of `bindCallback` is a function that takes the same parameters\n     * as `func`, except the last one (the callback). When the output function\n     * is called with arguments it will return an Observable. If function `func`\n     * calls its callback with one argument the Observable will emit that value.\n     * If on the other hand the callback is called with multiple values the resulting\n     * Observable will emit an array with said values as arguments.\n     *\n     * It is very important to remember that input function `func` is not called\n     * when the output function is, but rather when the Observable returned by the output\n     * function is subscribed. This means if `func` makes an AJAX request, that request\n     * will be made every time someone subscribes to the resulting Observable, but not before.\n     *\n     * Optionally, a selector function can be passed to `bindObservable`. The selector function\n     * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n     * Even though by default multiple arguments passed to callback appear in the stream as an array\n     * the selector function will be called with arguments directly, just as the callback would.\n     * This means you can imagine the default selector (when one is not provided explicitly)\n     * as a function that aggregates all its arguments into an array, or simply returns first argument\n     * if there is only one.\n     *\n     * The last optional parameter - {@link Scheduler} - can be used to control when the call\n     * to `func` happens after someone subscribes to Observable, as well as when results\n     * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n     * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n     * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n     * and call `subscribe` on the output Observable all function calls that are currently executing\n     * will end before `func` is invoked.\n     *\n     * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n     * In particular, if the callback is called synchronously the subscription of the resulting Observable\n     * will call the `next` function synchronously as well.  If you want to defer that call,\n     * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n     * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n     *\n     * Note that the Observable created by the output function will always emit a single value\n     * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n     * calls will not appear in the stream. If you need to listen for multiple calls,\n     *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n     *\n     * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n     * will be the context that the output function has at call time. In particular, if `func`\n     * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n     * it is recommended that the context of the output function is set to that object as well.\n     *\n     * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n     * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n     * provides convenient error handling and probably is a better choice.\n     * `bindCallback` will treat such functions the same as any other and error parameters\n     * (whether passed or not) will always be interpreted as regular callback argument.\n     *\n     *\n     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n     * // Suppose we have jQuery.getJSON('/my/url', callback)\n     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n     * var result = getJSONAsObservable('/my/url');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Receive an array of arguments passed to a callback</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 5\n     *   console.log(b); // 'some string'\n     *   console.log(c); // {someProperty: 'someValue'}\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n     * boundSomeFunction().subscribe(values => {\n     *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n     * });\n     *\n     *\n     * @example <caption>Use bindCallback with a selector function</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 'a'\n     *   console.log(b); // 'b'\n     *   console.log(c); // 'c'\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n     * boundSomeFunction().subscribe(value => {\n     *   console.log(value) // 'abc'\n     * });\n     *\n     *\n     * @example <caption>Compare behaviour with and without async Scheduler</caption>\n     * function iCallMyCallbackSynchronously(cb) {\n     *   cb();\n     * }\n     *\n     * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n     * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n     *\n     * boundSyncFn().subscribe(() => console.log('I was sync!'));\n     * boundAsyncFn().subscribe(() => console.log('I was async!'));\n     * console.log('This happened...');\n     *\n     * // Logs:\n     * // I was sync!\n     * // This happened...\n     * // I was async!\n     *\n     *\n     * @example <caption>Use bindCallback on an object method</caption>\n     * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n     * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n     * .subscribe(subscriber);\n     *\n     *\n     * @see {@link bindNodeCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func A function with a callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps them to a value that is emitted on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the callback would deliver.\n     * @static true\n     * @name bindCallback\n     * @owner Observable\n     */\n    BoundCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    BoundCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    BoundCallbackObservable.dispatch = function (state) {\n        var self = this;\n        var source = state.source, subscriber = state.subscriber, context = state.context;\n        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n        var subject = source.subject;\n        if (!subject) {\n            subject = source.subject = new AsyncSubject_1.AsyncSubject();\n            var handler = function handlerFn() {\n                var innerArgs = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    innerArgs[_i - 0] = arguments[_i];\n                }\n                var source = handlerFn.source;\n                var selector = source.selector, subject = source.subject;\n                if (selector) {\n                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                    if (result_2 === errorObject_1.errorObject) {\n                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                    }\n                    else {\n                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                    }\n                }\n                else {\n                    var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n                }\n            };\n            // use named function to pass values in without closure\n            handler.source = source;\n            var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n            if (result === errorObject_1.errorObject) {\n                subject.error(errorObject_1.errorObject.e);\n            }\n        }\n        self.add(subject.subscribe(subscriber));\n    };\n    return BoundCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundCallbackObservable = BoundCallbackObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundCallbackObservable.js.map","\"use strict\";\nvar BoundCallbackObservable_1 = require('./BoundCallbackObservable');\nexports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;\n//# sourceMappingURL=bindCallback.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bindCallback_1 = require('../../observable/bindCallback');\nObservable_1.Observable.bindCallback = bindCallback_1.bindCallback;\n//# sourceMappingURL=bindCallback.js.map","\"use strict\";\nvar Subscriber_1 = require('../Subscriber');\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\nvar Observer_1 = require('../Observer');\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n//# sourceMappingURL=toSubscriber.js.map","\"use strict\";\n/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nvar Subject_1 = require('./Subject');\nexports.Subject = Subject_1.Subject;\nexports.AnonymousSubject = Subject_1.AnonymousSubject;\n/* tslint:enable:no-unused-variable */\nvar Observable_1 = require('./Observable');\nexports.Observable = Observable_1.Observable;\n// statics\n/* tslint:disable:no-use-before-declare */\nrequire('./add/observable/bindCallback');\nrequire('./add/observable/bindNodeCallback');\nrequire('./add/observable/combineLatest');\nrequire('./add/observable/concat');\nrequire('./add/observable/defer');\nrequire('./add/observable/empty');\nrequire('./add/observable/forkJoin');\nrequire('./add/observable/from');\nrequire('./add/observable/fromEvent');\nrequire('./add/observable/fromEventPattern');\nrequire('./add/observable/fromPromise');\nrequire('./add/observable/generate');\nrequire('./add/observable/if');\nrequire('./add/observable/interval');\nrequire('./add/observable/merge');\nrequire('./add/observable/race');\nrequire('./add/observable/never');\nrequire('./add/observable/of');\nrequire('./add/observable/onErrorResumeNext');\nrequire('./add/observable/pairs');\nrequire('./add/observable/range');\nrequire('./add/observable/using');\nrequire('./add/observable/throw');\nrequire('./add/observable/timer');\nrequire('./add/observable/zip');\n//dom\nrequire('./add/observable/dom/ajax');\nrequire('./add/observable/dom/webSocket');\n//operators\nrequire('./add/operator/buffer');\nrequire('./add/operator/bufferCount');\nrequire('./add/operator/bufferTime');\nrequire('./add/operator/bufferToggle');\nrequire('./add/operator/bufferWhen');\nrequire('./add/operator/catch');\nrequire('./add/operator/combineAll');\nrequire('./add/operator/combineLatest');\nrequire('./add/operator/concat');\nrequire('./add/operator/concatAll');\nrequire('./add/operator/concatMap');\nrequire('./add/operator/concatMapTo');\nrequire('./add/operator/count');\nrequire('./add/operator/dematerialize');\nrequire('./add/operator/debounce');\nrequire('./add/operator/debounceTime');\nrequire('./add/operator/defaultIfEmpty');\nrequire('./add/operator/delay');\nrequire('./add/operator/delayWhen');\nrequire('./add/operator/distinct');\nrequire('./add/operator/distinctUntilChanged');\nrequire('./add/operator/distinctUntilKeyChanged');\nrequire('./add/operator/do');\nrequire('./add/operator/exhaust');\nrequire('./add/operator/exhaustMap');\nrequire('./add/operator/expand');\nrequire('./add/operator/elementAt');\nrequire('./add/operator/filter');\nrequire('./add/operator/finally');\nrequire('./add/operator/find');\nrequire('./add/operator/findIndex');\nrequire('./add/operator/first');\nrequire('./add/operator/groupBy');\nrequire('./add/operator/ignoreElements');\nrequire('./add/operator/isEmpty');\nrequire('./add/operator/audit');\nrequire('./add/operator/auditTime');\nrequire('./add/operator/last');\nrequire('./add/operator/let');\nrequire('./add/operator/every');\nrequire('./add/operator/map');\nrequire('./add/operator/mapTo');\nrequire('./add/operator/materialize');\nrequire('./add/operator/max');\nrequire('./add/operator/merge');\nrequire('./add/operator/mergeAll');\nrequire('./add/operator/mergeMap');\nrequire('./add/operator/mergeMapTo');\nrequire('./add/operator/mergeScan');\nrequire('./add/operator/min');\nrequire('./add/operator/multicast');\nrequire('./add/operator/observeOn');\nrequire('./add/operator/onErrorResumeNext');\nrequire('./add/operator/pairwise');\nrequire('./add/operator/partition');\nrequire('./add/operator/pluck');\nrequire('./add/operator/publish');\nrequire('./add/operator/publishBehavior');\nrequire('./add/operator/publishReplay');\nrequire('./add/operator/publishLast');\nrequire('./add/operator/race');\nrequire('./add/operator/reduce');\nrequire('./add/operator/repeat');\nrequire('./add/operator/repeatWhen');\nrequire('./add/operator/retry');\nrequire('./add/operator/retryWhen');\nrequire('./add/operator/sample');\nrequire('./add/operator/sampleTime');\nrequire('./add/operator/scan');\nrequire('./add/operator/sequenceEqual');\nrequire('./add/operator/share');\nrequire('./add/operator/shareReplay');\nrequire('./add/operator/single');\nrequire('./add/operator/skip');\nrequire('./add/operator/skipLast');\nrequire('./add/operator/skipUntil');\nrequire('./add/operator/skipWhile');\nrequire('./add/operator/startWith');\nrequire('./add/operator/subscribeOn');\nrequire('./add/operator/switch');\nrequire('./add/operator/switchMap');\nrequire('./add/operator/switchMapTo');\nrequire('./add/operator/take');\nrequire('./add/operator/takeLast');\nrequire('./add/operator/takeUntil');\nrequire('./add/operator/takeWhile');\nrequire('./add/operator/throttle');\nrequire('./add/operator/throttleTime');\nrequire('./add/operator/timeInterval');\nrequire('./add/operator/timeout');\nrequire('./add/operator/timeoutWith');\nrequire('./add/operator/timestamp');\nrequire('./add/operator/toArray');\nrequire('./add/operator/toPromise');\nrequire('./add/operator/window');\nrequire('./add/operator/windowCount');\nrequire('./add/operator/windowTime');\nrequire('./add/operator/windowToggle');\nrequire('./add/operator/windowWhen');\nrequire('./add/operator/withLatestFrom');\nrequire('./add/operator/zip');\nrequire('./add/operator/zipAll');\n/* tslint:disable:no-unused-variable */\nvar Subscription_1 = require('./Subscription');\nexports.Subscription = Subscription_1.Subscription;\nvar Subscriber_1 = require('./Subscriber');\nexports.Subscriber = Subscriber_1.Subscriber;\nvar AsyncSubject_1 = require('./AsyncSubject');\nexports.AsyncSubject = AsyncSubject_1.AsyncSubject;\nvar ReplaySubject_1 = require('./ReplaySubject');\nexports.ReplaySubject = ReplaySubject_1.ReplaySubject;\nvar BehaviorSubject_1 = require('./BehaviorSubject');\nexports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;\nvar ConnectableObservable_1 = require('./observable/ConnectableObservable');\nexports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;\nvar Notification_1 = require('./Notification');\nexports.Notification = Notification_1.Notification;\nvar EmptyError_1 = require('./util/EmptyError');\nexports.EmptyError = EmptyError_1.EmptyError;\nvar ArgumentOutOfRangeError_1 = require('./util/ArgumentOutOfRangeError');\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;\nvar TimeoutError_1 = require('./util/TimeoutError');\nexports.TimeoutError = TimeoutError_1.TimeoutError;\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\nexports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;\nvar timeInterval_1 = require('./operator/timeInterval');\nexports.TimeInterval = timeInterval_1.TimeInterval;\nvar timestamp_1 = require('./operators/timestamp');\nexports.Timestamp = timestamp_1.Timestamp;\nvar TestScheduler_1 = require('./testing/TestScheduler');\nexports.TestScheduler = TestScheduler_1.TestScheduler;\nvar VirtualTimeScheduler_1 = require('./scheduler/VirtualTimeScheduler');\nexports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;\nvar AjaxObservable_1 = require('./observable/dom/AjaxObservable');\nexports.AjaxResponse = AjaxObservable_1.AjaxResponse;\nexports.AjaxError = AjaxObservable_1.AjaxError;\nexports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;\nvar pipe_1 = require('./util/pipe');\nexports.pipe = pipe_1.pipe;\nvar asap_1 = require('./scheduler/asap');\nvar async_1 = require('./scheduler/async');\nvar queue_1 = require('./scheduler/queue');\nvar animationFrame_1 = require('./scheduler/animationFrame');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\nvar iterator_1 = require('./symbol/iterator');\nvar observable_1 = require('./symbol/observable');\nvar _operators = require('./operators');\nexports.operators = _operators;\n/* tslint:enable:no-unused-variable */\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nvar Scheduler = {\n    asap: asap_1.asap,\n    queue: queue_1.queue,\n    animationFrame: animationFrame_1.animationFrame,\n    async: async_1.async\n};\nexports.Scheduler = Scheduler;\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nvar Symbol = {\n    rxSubscriber: rxSubscriber_1.rxSubscriber,\n    observable: observable_1.observable,\n    iterator: iterator_1.iterator\n};\nexports.Symbol = Symbol;\n//# sourceMappingURL=Rx.js.map","import * as Rxjs from 'rxjs'\r\nimport Table from './table'\r\nimport Widgets from './widgets'\r\nimport FormatService from '../service/format.service'\r\nimport UsersService from '../service/users.service'\r\nexport default class View {\r\n    constructor() {\r\n        this.sideList = {}\r\n        this.selectedSubject = {}\r\n        this.table = {}\r\n        this.mainDiv = document.getElementById('main')\r\n        this.mainDiv.registerPage = this.renderRegister(this.mainDiv)\r\n        this.mainDiv.loginPage = this.renderLogin(this.mainDiv)\r\n        this.mainDiv.mainPage = this.renderMain(this.mainDiv)\r\n        this.displayPage('loginPageDiv')\r\n\r\n        document.body.appendChild(this.mainDiv)\r\n    }\r\n    renderRegister(parent) {\r\n        const regDiv = Widgets.div(parent, 'regPageDiv')\r\n\r\n        const appTitle = Widgets.textElement(regDiv, \"h1\", \"Skaly.\")\r\n\r\n        const pageTitle = Widgets.textElement(regDiv, \"h2\", \"Register\")\r\n\r\n        const userInput = Widgets.inputDiv(regDiv, 'text', 'Username')\r\n\r\n        const passInput = Widgets.inputDiv(regDiv, 'password', 'Password')\r\n\r\n        const superCheck = Widgets.inputDiv(regDiv, 'checkbox', \"Are you a moderator? \", true)\r\n\r\n        const promiseObs = (text) => Rxjs.Observable.fromPromise(UsersService.checkUserExists(text)\r\n            .then(res => true)\r\n            .catch(rej => false)\r\n        )\r\n\r\n        Rxjs.Observable.fromEvent(userInput.input, 'input')\r\n            .debounceTime(500)\r\n            .map(event => event.target.value)\r\n            .switchMap(value => promiseObs(value))\r\n            .subscribe(res => Widgets.checkInput(userInput.input, res))\r\n\r\n\r\n        const submitButton = Widgets.button(regDiv, 'REGISTER')\r\n        submitButton.onclick = () => {\r\n            const credentials = {\r\n                id: userInput.input.value,\r\n                password: passInput.input.value,\r\n                superUser: superCheck.input.checked\r\n            }\r\n            UsersService.addUser(credentials)\r\n                .then(() => {\r\n                    this.displayPage('loginPageDiv')\r\n                    userInput.input.value = ''\r\n                    passInput.input.value = ''\r\n                    superCheck.input.checked = false\r\n                })\r\n                .catch(rej => {})\r\n        }\r\n        const backButton = Widgets.button(regDiv, 'BACK')\r\n        backButton.onclick = () => {\r\n            userInput.input.value = ''\r\n            passInput.input.value = ''\r\n            Widgets.checkInput(userInput.input, true)\r\n            this.displayPage('loginPageDiv')\r\n        }\r\n        return regDiv\r\n    }\r\n    renderLogin(parent) {\r\n        const loginDiv = Widgets.div(parent, 'loginPageDiv')\r\n\r\n        const appTitle = Widgets.textElement(loginDiv, \"h1\", \"Skaly.\")\r\n\r\n        const pageTitle = Widgets.textElement(loginDiv, \"h2\", \"Login\")\r\n\r\n        const userInput = Widgets.inputDiv(loginDiv, 'text', 'Username')\r\n\r\n        const passInput = Widgets.inputDiv(loginDiv, 'password', 'Password')\r\n\r\n        const submitButton = Widgets.button(loginDiv, 'LOGIN')\r\n        submitButton.onclick = () => {\r\n            const credentials = {\r\n                id: userInput.input.value,\r\n                password: passInput.input.value\r\n            }\r\n            UsersService.checkUser(credentials)\r\n                .then(res => {\r\n                    UsersService.setData(res)\r\n                    this.updateAside(this.sideList, UsersService.getSubjects())\r\n                    this.displayPage('mainPageDiv')\r\n                    let userString\r\n                    if (UsersService.getSuperUser()) {\r\n                        userString = 'Moderator'\r\n                    } else {\r\n                        userString = 'Standard'\r\n                    }\r\n                    document.getElementById('userType').innerHTML = userString\r\n                    userInput.input.value = ''\r\n                    passInput.input.value = ''\r\n                })\r\n                .catch(rej => {})\r\n        }\r\n        const registerButton = Widgets.button(loginDiv, 'REGISTER')\r\n        registerButton.onclick = () => this.displayPage('regPageDiv')\r\n        return loginDiv\r\n    }\r\n    renderMain(parent) {\r\n        const mainPageDiv = Widgets.div(parent, 'mainPageDiv')\r\n        mainPageDiv.style.height = '100%'\r\n        const header = this.header(mainPageDiv)\r\n        this.contentHolder = this.contentHolder(mainPageDiv)\r\n        return mainPageDiv\r\n    }\r\n    displayPage(page) { // <------\r\n        document.querySelectorAll(\"[class$='PageDiv']\").forEach(div => {\r\n            if (div.className == page) {\r\n                div.hidden = false\r\n            } else {\r\n                div.hidden = true\r\n            }\r\n        })\r\n    }\r\n    //components\r\n    contentHolder(parent) {\r\n        const contentHolder = Widgets.div(parent, 'contentHolder')\r\n        const aside = this.aside(contentHolder)\r\n        this.updateAside(aside, UsersService.getSubjects())\r\n        this.sideList = aside\r\n        this.table = new Table(contentHolder)\r\n        this.table.main.hidden = true\r\n        return contentHolder\r\n    }\r\n    saveCurrentSubject() {\r\n        if (this.selectedSubject) {\r\n            const selected = UsersService.getSubjects()\r\n                .find(subject => subject.text == this.selectedSubject.id)\r\n            if (selected) {\r\n                selected.scale = this.table.getData()\r\n                UsersService.updateUser()\r\n                if (UsersService.getSuperUser()) {\r\n                    FormatService.putFormat(selected, UsersService.getData().id)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    header(parent) {\r\n        const header = document.createElement('header')\r\n        const appTitle = Widgets.textElement(header, 'h1', 'Skaly.')\r\n        const userType = Widgets.textElement(header, 'h2', '')\r\n        userType.id = 'userType'\r\n        const logoutButton = Widgets.button(header, 'Logout')\r\n        logoutButton.onclick = () => {\r\n            this.deleteAside(this.sideList, UsersService.getSubjects())\r\n            this.table.main.hidden = true\r\n            this.saveCurrentSubject()\r\n            this.selectedSubject = null\r\n            this.displayPage('loginPageDiv')\r\n            this.subjectInputDiv.reset()\r\n        }\r\n        parent.appendChild(header)\r\n        return header\r\n    }\r\n    aside(parent) {\r\n        const aside = document.createElement('div')\r\n        aside.className = \"aside\"\r\n        this.subjectInputDiv = this.subjectInput(aside)\r\n        this.subjectInputDiv.hidden = true\r\n        const subjectAddButton = this.subjectAddButton(aside)\r\n        subjectAddButton.onclick = () => {\r\n            this.subjectInputDiv.hidden = false\r\n        }\r\n        parent.appendChild(aside)\r\n        return aside\r\n    }\r\n    subjectDiv(parent, data) {\r\n        const subjectDiv = Widgets.div(parent, 'subjectDiv')\r\n        subjectDiv.id = data.text\r\n        const text = document.createElement('span')\r\n        text.className = 'text'\r\n        text.style.color = 'white'\r\n        text.innerHTML = data.text\r\n        subjectDiv.appendChild(text)\r\n\r\n        const deleteBox = Widgets.imageDiv(subjectDiv, 'deleteBox', './src/img/delete.png')\r\n        deleteBox.onclick = (ev) => {\r\n            const oldSubject = UsersService.getSubjects()\r\n                .find(subject => subject.text == subjectDiv.id)\r\n            const newSubjects = UsersService.getSubjects()\r\n                .filter(subject => {\r\n                    return subject.text != subjectDiv.id\r\n                })\r\n            UsersService.setSubjects(newSubjects)\r\n            this.deleteAsideOne(parent, subjectDiv.id)\r\n            UsersService.updateUser()\r\n            if (UsersService.getSuperUser()) {\r\n                FormatService.deleteFormat(oldSubject)\r\n            }\r\n            this.table.main.hidden = true\r\n            ev.cancelBubble = true\r\n        }\r\n        subjectDiv.onclick = () => {\r\n            this.saveCurrentSubject()\r\n            let subjectFromService = UsersService.getSubjects()\r\n                .find(subject => subject.text == subjectDiv.id)\r\n            FormatService.getFormat(subjectFromService)\r\n                .then(res => {\r\n                    this.table.updateData({\r\n                        format: res.format,\r\n                        points: subjectFromService.scale.points,\r\n                        rows: subjectFromService.scale.rows,\r\n                        cols: subjectFromService.scale.cols\r\n                    }, UsersService.getSuperUser())\r\n                    this.table.main.hidden = false\r\n                    this.table.deselectAll()\r\n                    this.selectedSubject = subjectDiv\r\n                    this.selectSubject(subjectDiv)\r\n\r\n                })\r\n                .catch(rej => {\r\n                    alert('Subject no longer exists')\r\n                    const newSubjects = UsersService.getSubjects()\r\n                        .filter(subject => {\r\n                            return subject.text != subjectDiv.id\r\n                        })\r\n                    UsersService.setSubjects(newSubjects)\r\n                    this.deleteAsideOne(parent, subjectDiv.id)\r\n                    UsersService.updateUser()\r\n                })\r\n\r\n\r\n        }\r\n        return subjectDiv\r\n\r\n    }\r\n    updateAside(aside, data) {\r\n        if (data) {\r\n            data.forEach(subject => {\r\n                const subjectDiv = this.subjectDiv(aside, subject)\r\n            })\r\n        }\r\n    }\r\n    updateAsideOne(aside, data) {\r\n        if (data) {\r\n            const subjectDiv = this.subjectDiv(aside, data)\r\n        }\r\n    }\r\n    deleteAside(aside, data) {\r\n        if (data) {\r\n            data.forEach(subject => {\r\n                this.deleteAsideOne(aside, subject.text)\r\n            })\r\n        }\r\n    }\r\n    deleteAsideOne(aside, data) {\r\n        if (data) {\r\n            document.getElementById(data).remove()\r\n        }\r\n    }\r\n    subjectAddButton(parent) {\r\n        const subjectAddButton = Widgets.div(parent, 'subjectAddButton')\r\n        const text = document.createElement('span')\r\n        text.className = 'text'\r\n        text.style.color = 'white'\r\n        text.innerHTML = '+'\r\n        subjectAddButton.appendChild(text)\r\n        return subjectAddButton\r\n    }\r\n    subjectInput(parent) {\r\n        const subjectInput = Widgets.div(parent, 'subjectInput')\r\n        const nameInput = Widgets.inputList(subjectInput, 'Subject name')\r\n        const submitButton = Widgets.button(subjectInput, 'Submit subject')\r\n\r\n        const formatObservable = (text) => Rxjs.Observable.fromPromise(FormatService.getFormatRegExp(text)\r\n            .then(res => res)\r\n            .catch(rej => null)\r\n        )\r\n        let subscription = Rxjs.Observable.fromEvent(nameInput.input, 'input')\r\n            .filter(event => UsersService.getSuperUser() == false)\r\n            .debounceTime(500)\r\n            .switchMap(event => formatObservable(event.target.value))\r\n            .filter(res => res != null)\r\n            .do(array => nameInput.addOptions(array))\r\n            .subscribe()\r\n\r\n        submitButton.onclick = () => {\r\n            if (nameInput.input.value != '' && !this.checkDuplicate(nameInput.input.value)) {\r\n                const newInput = {\r\n                    text: nameInput.input.value,\r\n                    scale: this.table.getEmptyScale()\r\n                }\r\n                if (UsersService.getSuperUser()) {\r\n                    FormatService.postFormat(newInput, UsersService.getData().id)\r\n                        .then(() => {\r\n                            UsersService.getSubjects().push(newInput)\r\n                            subjectInput.reset()\r\n                            UsersService.updateUser()\r\n                                .then(this.updateAsideOne(parent, newInput))\r\n                        })\r\n                        .catch(rej => {})\r\n                } else {\r\n                    FormatService.getFormat(newInput)\r\n                        .then(res => {\r\n                            newInput.text = res.id\r\n                            newInput.scale.format = res.format\r\n                            UsersService.getSubjects().push(newInput)\r\n                            subjectInput.reset()\r\n                            UsersService.updateUser()\r\n                                .then(this.updateAsideOne(parent, newInput))\r\n                        })\r\n                        .catch(rej => alert(\"Subject doesn't exist\"))\r\n                }\r\n            } else {\r\n                alert('Pogresan unos')\r\n            }\r\n        }\r\n        const cancelButton = Widgets.button(subjectInput, 'Cancel')\r\n        cancelButton.onclick = () => subjectInput.reset()\r\n\r\n        subjectInput.reset = () => {\r\n            nameInput.input.value = ''\r\n            nameInput.addOptions(null)\r\n            subjectInput.hidden = true\r\n        }\r\n\r\n        return subjectInput\r\n    }\r\n    checkDuplicate(text) {\r\n        let duplicates = UsersService.getSubjects().filter(subject => subject.text == text)\r\n        if (duplicates.length == 0) {\r\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n    }\r\n    selectSubject(subject) {\r\n        document.querySelectorAll('.subjectDiv').forEach(subjectDiv => {\r\n            if (subjectDiv.id == subject.id) {\r\n                subjectDiv.style.border = '2px solid black'\r\n            } else {\r\n                subjectDiv.style.border = 'none'\r\n            }\r\n        })\r\n    }\r\n}","import View from './scripts/components/view'\r\n\r\nconst view = new View"],"sourceRoot":""}